[{"filePath":"D:\\project1\\expense-tracker\\src\\bundles\\chartBundle.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":11,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":11,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[200,238],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":20,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":20,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[393,440],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":60,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":60,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1268,1316],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":109,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":109,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2362,2404],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":139,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":139,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3154,3265],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":158,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":158,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3633,3738],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createChart, getChartColors } from \"../charts/chartCore.js\";\n\n/**\n * Chart Bundle - Consolidated chart management\n */\n\n/**\n * Initialize all charts\n */\nexport function initializeCharts() {\n  console.log(\"Initializing charts...\");\n\n  try {\n    // Initialize income/expense chart\n    initializeIncomeExpenseChart();\n\n    // Initialize timeline chart\n    initializeTimelineChart();\n\n    console.log(\"Charts initialized successfully\");\n  } catch (error) {\n    console.error(\"Error initializing charts:\", error);\n  }\n}\n\n/**\n * Initialize income vs expense chart\n */\nfunction initializeIncomeExpenseChart() {\n  try {\n    const canvas = document.getElementById(\"incomeExpenseChart\");\n    if (!canvas) {\n      console.warn(\"Income/Expense chart canvas not found\");\n      return;\n    }\n\n    // Create basic chart structure\n    const chartData = {\n      labels: [\"Income\", \"Expenses\"],\n      datasets: [\n        {\n          data: [0, 0],\n          backgroundColor: getChartColors(2),\n          borderWidth: 1,\n        },\n      ],\n    };\n\n    const options = {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          position: \"top\",\n        },\n      },\n    };\n\n    createChart(canvas, \"doughnut\", chartData, options);\n    console.log(\"Income/Expense chart initialized\");\n  } catch (error) {\n    console.error(\"Error initializing income/expense chart:\", error);\n  }\n}\n\n/**\n * Initialize timeline chart\n */\nfunction initializeTimelineChart() {\n  try {\n    const canvas = document.getElementById(\"timelineChart\");\n    if (!canvas) {\n      console.warn(\"Timeline chart canvas not found\");\n      return;\n    }\n\n    // Create basic chart structure\n    const chartData = {\n      labels: [],\n      datasets: [\n        {\n          label: \"Income\",\n          data: [],\n          backgroundColor: getChartColors(1)[0],\n          borderColor: getChartColors(1)[0],\n          tension: 0.1,\n        },\n        {\n          label: \"Expenses\",\n          data: [],\n          backgroundColor: getChartColors(2)[1],\n          borderColor: getChartColors(2)[1],\n          tension: 0.1,\n        },\n      ],\n    };\n\n    const options = {\n      responsive: true,\n      maintainAspectRatio: false,\n      scales: {\n        y: {\n          beginAtZero: true,\n        },\n      },\n    };\n\n    createChart(canvas, \"line\", chartData, options);\n    console.log(\"Timeline chart initialized\");\n  } catch (error) {\n    console.error(\"Error initializing timeline chart:\", error);\n  }\n}\n\n/**\n * Update charts with new data using dd/mm/yyyy format\n */\nexport function updateCharts(transactions = []) {\n  try {\n    updateIncomeExpenseChart(transactions);\n    updateTimelineChart(transactions);\n  } catch (error) {\n    console.error(\"Error updating charts:\", error);\n  }\n}\n\n/**\n * Update income expense chart with dd/mm/yyyy date handling\n */\nfunction updateIncomeExpenseChart(transactions) {\n  // FIXED: Filter transactions by date range if needed\n  const filteredTransactions = transactions.filter((tx) => {\n    if (!tx.date) return true;\n    // Validate date format\n    const date = new Date(tx.date);\n    return !isNaN(date.getTime());\n  });\n\n  console.log(\n    \"Updating income/expense chart with\",\n    filteredTransactions.length,\n    \"transactions\"\n  );\n}\n\n/**\n * Update timeline chart with dd/mm/yyyy date handling\n */\nfunction updateTimelineChart(transactions) {\n  // FIXED: Filter transactions by date range if needed\n  const filteredTransactions = transactions.filter((tx) => {\n    if (!tx.date) return true;\n    // Validate date format\n    const date = new Date(tx.date);\n    return !isNaN(date.getTime());\n  });\n\n  console.log(\n    \"Updating timeline chart with\",\n    filteredTransactions.length,\n    \"transactions\"\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\bundles\\coreBundle.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":25,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":25,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[645,695],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":52,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":52,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1450,1496],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'initializeCategoryMapping' is defined but never used.","line":63,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":63,"endColumn":41},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":74,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":74,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2084,2204],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":96,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":96,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2785,2851],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":99,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":99,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2931,3030],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Core Bundle - Consolidates core application functionality\n * This reduces the number of separate HTTP requests\n */\n\n// Re-export core functionality\nexport {\n  AppState,\n  loadMergedFiles,\n  loadTransactions,\n} from \"../core/appState.js\";\nexport { DEFAULT_CATEGORIES, HEADERS } from \"../core/constants.js\";\nexport {\n  handleFileUpload,\n  isDuplicateFile,\n  generateFileSignature,\n} from \"../parsers/fileHandler.js\";\nexport { addMergedFile } from \"../core/fileManager.js\";\nexport { initializeEventListeners } from \"../core/eventHandlers.js\";\n\n/**\n * Initialize all core components in one call\n */\nexport async function initializeCore() {\n  console.log(\"Initializing core functionality...\");\n\n  try {\n    // Load essential modules\n    const { loadMergedFiles, loadTransactions } = await import(\n      \"../core/appState.js\"\n    );\n    const { initializeEventListeners } = await import(\n      \"../core/eventHandlers.js\"\n    );\n    const { initializeCategories } = await import(\"../ui/categoryManager.js\");\n    const { initCategoryMapping } = await import(\"../ui/categoryMapping.js\");\n    const { initializeFileHandlers } = await import(\n      \"../parsers/fileHandler.js\"\n    );\n\n    // Load app state and data\n    ensureDefaultCategories();\n    loadMergedFiles();\n    loadTransactions();\n\n    // Initialize in proper sequence\n    initializeCategories();\n    initCategoryMapping();\n    initializeFileHandlers();\n    initializeEventListeners();\n\n    console.log(\"Core functionality initialized\");\n    return true;\n  } catch (error) {\n    console.error(\"Error initializing core:\", error);\n    return false;\n  }\n}\n\n/**\n * Initializes category mappings\n */\nasync function initializeCategoryMapping() {\n  try {\n    // Import the module\n    const categoryMappingModule = await import(\"../ui/categoryMapping.js\");\n\n    // Make sure we're working with the map object correctly\n    if (\n      categoryMappingModule.descriptionCategoryMap &&\n      typeof categoryMappingModule.descriptionCategoryMap.init === \"function\"\n    ) {\n      categoryMappingModule.descriptionCategoryMap.init();\n      console.log(\n        \"CoreBundle: Category mapping initialized successfully via descriptionCategoryMap.init().\"\n      );\n    } else {\n      console.warn(\n        \"CoreBundle: Category mapping object or init method not found.\"\n      );\n    }\n  } catch (error) {\n    console.error(\"CoreBundle: Error initializing category mapping:\", error);\n  }\n}\n\n// Import AppState and handle defaults internally\nimport { AppState, saveCategories } from \"../core/appState.js\";\nimport { DEFAULT_CATEGORIES } from \"../constants/categories.js\";\n\n/**\n * Local function to ensure default categories\n */\nfunction ensureDefaultCategories() {\n  if (!AppState.categories || Object.keys(AppState.categories).length === 0) {\n    console.log(\"No categories found, initializing with defaults...\");\n    AppState.categories = { ...DEFAULT_CATEGORIES };\n    saveCategories();\n    console.log(\n      \"Default categories initialized:\",\n      Object.keys(AppState.categories)\n    );\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\bundles\\uiBundle.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":60,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":60,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1693,1738],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":83,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":83,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2339,2411],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * UI Bundle - Consolidates all UI-related functionality\n * This reduces the number of separate HTTP requests\n */\n\n// Import the new revertTransaction functionality\nimport \"../ui/revertTransaction.js\";\n\n// Local imports for internal usage (while preserving re-exports below)\nimport { showModal as __showModal, closeAllModals as __closeAllModals } from \"../ui/modalManager.js\";\nimport { showToast as __showToast } from \"../ui/uiManager.js\";\n\n// Re-export UI functionality - no CSS imports\nexport {\n  initializeUI,\n  showToast,\n  hideElement,\n  showElement,\n} from \"../ui/uiManager.js\";\nexport { setupSidebarManager } from \"../ui/sidebarManager.js\";\nexport {\n  updateTransactions,\n  renderTransactions,\n  renderCategoryButtons,\n} from \"../ui/transactionManager.js\";\nexport { showModal, closeAllModals } from \"../ui/modalManager.js\";\nexport { revertTransaction } from \"../ui/revertTransaction.js\";\n\n// Re-export file handling UI\nexport {\n  onFileUpload,\n  clearPreview,\n  createNewFileInput,\n  onSaveHeaders,\n} from \"../ui/fileUpload.js\";\nexport {\n  renderHeaderPreview,\n  suggestMapping,\n  updateHeaderMapping,\n} from \"../ui/headerMapping.js\";\nexport { renderMergedFiles } from \"../ui/fileListUI.js\";\n\n/**\n * Initialize all UI components in one call\n */\nexport async function initializeAllUI() {\n  try {\n    // Load essential modules\n    const { initializeUI } = await import(\"../ui/uiManager.js\");\n    const { setupSidebarManager } = await import(\"../ui/sidebarManager.js\");\n    const { renderCategoryButtons } = await import(\n      \"../ui/transactionManager.js\"\n    );\n\n    // Initialize in the proper order\n    initializeUI();\n    setupSidebarManager();\n    renderCategoryButtons();\n\n    console.log(\"All UI components initialized\");\n    return true;\n  } catch (error) {\n    console.error(\"Error initializing UI:\", error);\n    return false;\n  }\n}\n\n/**\n * Initialize theme settings - uses CSS classes defined in styles folder\n */\nexport function initializeTheme() {\n  // Get stored preference\n  const isDarkMode = localStorage.getItem(\"darkMode\") === \"true\";\n\n  // Apply to body class - CSS is defined in styles/dark-theme.css\n  document.body.classList.toggle(\"dark-mode\", isDarkMode);\n\n  // Update chart theme if Chart.js is loaded\n  if (isDarkMode && window.Chart && window.Chart.defaults) {\n    updateChartTheme(isDarkMode);\n  }\n\n  console.log(`Theme initialized: ${isDarkMode ? \"dark\" : \"light\"} mode`);\n}\n\n/**\n * Updates chart theme colors based on dark mode\n */\nfunction updateChartTheme(isDarkMode) {\n  if (window.Chart && window.Chart.defaults) {\n    window.Chart.defaults.color = isDarkMode ? \"#e0e0e0\" : \"#666666\";\n    window.Chart.defaults.borderColor = isDarkMode ? \"#444444\" : \"#dddddd\";\n  }\n}\n\n// Global UI utilities\nexport const UIUtils = {\n  /**\n   * Show a modal with enhanced configuration\n   */\n  showEnhancedModal: (config) => {\n  return __showModal({\n      ...config,\n      className: `enhanced-modal ${config.className || \"\"}`,\n      closeOnClickOutside: config.closeOnClickOutside !== false,\n    });\n  },\n\n  /**\n   * Close all modals safely\n   */\n  closeAllModals: () => {\n    try {\n  __closeAllModals();\n    } catch (error) {\n      console.error(\"Error closing modals:\", error);\n    }\n  },\n\n  /**\n   * Show success toast\n   */\n  showSuccess: (message) => {\n  __showToast(message, \"success\");\n  },\n\n  /**\n   * Show error toast\n   */\n  showError: (message) => {\n  __showToast(message, \"error\");\n  },\n\n  /**\n   * Show warning toast\n   */\n  showWarning: (message) => {\n  __showToast(message, \"warning\");\n  },\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\charts\\chartCore.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'chartInstances' is assigned a value but never used.","line":6,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":21},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":113,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":113,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2710,2763],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":172,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":172,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4552,4597],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":212,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":212,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5691,5749],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'setupGlobalResizeHandler' is defined but never used.","line":230,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":230,"endColumn":34},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":245,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":245,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6610,6669],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":280,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":280,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7524,7568],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'getEmptyChartData' is defined but never used.","line":296,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":296,"endColumn":27},{"ruleId":"no-unused-vars","severity":1,"message":"'addResizeHandler' is defined but never used.","line":329,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":329,"endColumn":26},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":397,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":397,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10507,10554],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":407,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":407,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10728,10796],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Core chart configuration and utilities\n */\n\n// Global chart instances to prevent memory leaks\nconst chartInstances = new Map();\nconst registeredCharts = new Map(); // Add this missing declaration\n\n/**\n * Default chart configuration with flexible dimensions\n */\nexport const defaultChartConfig = {\n  responsive: true,\n  maintainAspectRatio: false, // CRITICAL: Allow height to adjust for content\n  interaction: {\n    intersect: false,\n    mode: \"index\",\n  },\n  plugins: {\n    legend: {\n      display: true,\n      position: \"top\",\n      // FIXED: Ensure legend has proper spacing and wrapping\n      labels: {\n        padding: 15,\n        usePointStyle: true,\n        boxWidth: 12,\n        boxHeight: 12,\n        generateLabels: function (chart) {\n          const original = Chart.defaults.plugins.legend.labels.generateLabels;\n          const labels = original.call(this, chart);\n\n          // Ensure labels wrap properly\n          labels.forEach((label) => {\n            if (label?.text && label.text.length > 20) {\n              label.text = label.text.substring(0, 20) + \"...\";\n            }\n          });\n\n          return labels;\n        },\n      },\n    },\n    tooltip: {\n      enabled: true,\n      mode: \"index\",\n      intersect: false,\n      // FIXED: Ensure tooltips don't get cut off\n      position: \"nearest\",\n      bodySpacing: 4,\n      titleSpacing: 4,\n      footerSpacing: 4,\n      xPadding: 8,\n      yPadding: 8,\n    },\n  },\n  scales: {\n    x: {\n      display: true,\n      grid: {\n        display: true,\n      },\n      // FIXED: Ensure x-axis labels don't get cut off\n      ticks: {\n        maxRotation: 45,\n        minRotation: 0,\n      },\n    },\n    y: {\n      display: true,\n      beginAtZero: true,\n      grid: {\n        display: true,\n      },\n      // FIXED: Ensure y-axis has proper padding\n      ticks: {\n        padding: 10,\n      },\n    },\n  },\n  // FIXED: Ensure proper padding for all chart elements\n  layout: {\n    padding: {\n      top: 20,\n      bottom: 20,\n      left: 20,\n      right: 20,\n    },\n  },\n  // Prevent animations from causing memory leaks\n  animation: {\n    duration: 400,\n    easing: \"easeInOutQuart\",\n  },\n};\n\n/**\n * Creates a chart with proper memory management and flexible dimensions\n * @param {HTMLCanvasElement} canvas - The canvas element\n * @param {string} type - Chart type\n * @param {Object} data - Chart data\n * @param {Object} options - Chart options\n * @returns {Chart} The created chart instance\n */\nexport function createChart(canvas, type, data, options = {}) {\n  try {\n    if (!canvas) {\n      console.error(\"Canvas element is required for chart creation\");\n      return null;\n    }\n\n    const canvasId = canvas.id || `chart-${Date.now()}`;\n    console.log(`Creating chart: ${canvasId} (${type})`);\n\n    // Destroy existing chart if it exists\n    destroyChart(canvasId);\n\n    // FIXED: Ensure canvas has proper responsive dimensions\n    const container = canvas.parentElement;\n    if (container) {\n      // FIXED: Don't set fixed dimensions, use CSS for responsiveness\n      canvas.style.width = \"100%\";\n      canvas.style.height = \"auto\";\n      canvas.style.maxWidth = \"100%\";\n      canvas.style.maxHeight = \"100%\";\n      canvas.style.display = \"block\";\n      canvas.style.boxSizing = \"border-box\";\n    }\n\n    // FIXED: Merge options with special handling for chart-specific configurations\n    const chartOptions = {\n      ...defaultChartConfig,\n      ...options,\n      responsive: true,\n      maintainAspectRatio: false,\n      // FIXED: Add resize handling\n      onResize: (chart, size) => {\n        // Ensure chart doesn't grow beyond container\n        const container = chart?.canvas?.parentElement;\n        if (container) {\n          const maxWidth = container.offsetWidth;\n          const maxHeight = Math.min(\n            container.offsetHeight,\n            window.innerHeight * 0.8\n          );\n\n          if (size.width > maxWidth || size.height > maxHeight) {\n            chart.resize(\n              Math.min(size.width, maxWidth),\n              Math.min(size.height, maxHeight)\n            );\n          }\n        }\n      },\n    };\n\n    // FIXED: Special handling for pie/doughnut charts to ensure legend fits\n    if (type === \"pie\" || type === \"doughnut\") {\n      chartOptions.plugins.legend.position = \"bottom\";\n      chartOptions.layout.padding.bottom = 30;\n    }\n\n    // Create new chart\n    const chart = new Chart(canvas, {\n      type: type,\n      data: data,\n      options: chartOptions,\n    });\n\n    // Register the chart\n    registeredCharts.set(canvasId, chart);\n    console.log(`Chart registered: ${canvasId}`);\n\n    // FIXED: Add zoom change monitoring\n    addZoomMonitoring(canvas, chart);\n\n    // FIXED: Ensure chart resizes properly when container changes\n    setTimeout(() => {\n      if (chart && typeof chart?.resize === \"function\") {\n        chart.resize();\n      }\n    }, 100);\n\n    return chart;\n  } catch (error) {\n    console.error(\"Error creating chart:\", error);\n    return null;\n  }\n}\n\n/**\n * FIXED: Add zoom monitoring for individual charts\n */\nfunction addZoomMonitoring(canvas, chart) {\n  let lastDevicePixelRatio = window.devicePixelRatio;\n\n  const checkZoom = () => {\n    const currentDevicePixelRatio = window.devicePixelRatio;\n    if (Math.abs(currentDevicePixelRatio - lastDevicePixelRatio) > 0.1) {\n      lastDevicePixelRatio = currentDevicePixelRatio;\n\n      setTimeout(() => {\n        if (chart?.canvas?.isConnected) {\n          // Reset canvas styling\n          canvas.style.width = \"100%\";\n          canvas.style.height = \"auto\";\n          canvas.style.maxWidth = \"100%\";\n          canvas.style.maxHeight = \"100%\";\n\n          // Force resize\n          chart.resize();\n          console.log(`Chart ${canvas.id} resized for zoom change`);\n        }\n      }, 50);\n    }\n  };\n\n  window.addEventListener(\"resize\", checkZoom);\n\n  // Store for cleanup\n  if (!canvas._zoomHandlers) {\n    canvas._zoomHandlers = [];\n  }\n  canvas._zoomHandlers.push(checkZoom);\n}\n\n/**\n * Global resize handler with error protection\n */\nfunction setupGlobalResizeHandler() {\n  let resizeTimeout;\n\n  const handleResize = () => {\n    clearTimeout(resizeTimeout);\n    resizeTimeout = setTimeout(() => {\n      try {\n        registeredCharts.forEach((chartInstance, canvasId) => {\n          // Check if chart and canvas still exist in DOM\n          if (chartInstance?.canvas?.ownerDocument) {\n            const canvas = document.getElementById(canvasId);\n            if (canvas?.isConnected) {\n              chartInstance.resize();\n            } else {\n              // Chart canvas is no longer in DOM, clean it up\n              console.log(`Cleaning up disconnected chart: ${canvasId}`);\n              destroyChart(canvasId);\n            }\n          }\n        });\n      } catch (error) {\n        console.error(\"Error in resize handler:\", error);\n        // Don't let resize errors break the app\n      }\n    }, 150);\n  };\n\n  window.addEventListener(\"resize\", handleResize);\n\n  // Return cleanup function\n  return () => {\n    clearTimeout(resizeTimeout);\n    window.removeEventListener(\"resize\", handleResize);\n  };\n}\n\n/**\n * Safely destroys a chart and cleans up memory\n * @param {string} canvasId - The canvas ID\n */\nexport function destroyChart(canvasId) {\n  const chartInstance = registeredCharts.get(canvasId);\n\n  if (chartInstance) {\n    try {\n      // Check if chart is still valid before destroying\n      if (chartInstance.canvas?.ownerDocument) {\n        chartInstance.destroy();\n      }\n      registeredCharts.delete(canvasId);\n      console.log(`Chart destroyed: ${canvasId}`);\n    } catch (error) {\n      console.error(`Error destroying chart ${canvasId}:`, error);\n      // Force removal from registry even if destroy fails\n      registeredCharts.delete(canvasId);\n    }\n  }\n\n  return null;\n}\n\n/**\n * Returns empty data structure for a chart type\n * @param {string} type - Chart type\n * @returns {Object} Empty chart data\n */\nfunction getEmptyChartData(type) {\n  if (type === \"pie\" || type === \"doughnut\") {\n    return {\n      labels: [\"No Data\"],\n      datasets: [\n        {\n          data: [1],\n          backgroundColor: [\"#e0e0e0\"],\n          borderWidth: 0,\n        },\n      ],\n    };\n  }\n\n  return {\n    labels: [],\n    datasets: [\n      {\n        label: \"No Data\",\n        data: [],\n        borderColor: \"#e0e0e0\",\n        backgroundColor: \"rgba(224, 224, 224, 0.1)\",\n        borderWidth: 1,\n      },\n    ],\n  };\n}\n\n/**\n * Adds debounced resize handler to prevent infinite loops\n * @param {HTMLCanvasElement} canvas - The canvas element\n * @param {Chart} chart - The chart instance\n */\nfunction addResizeHandler(canvas, chart) {\n  let resizeTimeout;\n  let isResizing = false;\n\n  const resizeObserver = new ResizeObserver((entries) => {\n    if (isResizing) return; // Prevent recursive calls\n\n    clearTimeout(resizeTimeout);\n    resizeTimeout = setTimeout(() => {\n      isResizing = true;\n\n      try {\n        for (const entry of entries) {\n          const { width, height } = entry.contentRect;\n\n          // CRITICAL: Limit maximum dimensions to prevent infinite expansion\n          const maxWidth = Math.min(width, 1200);\n          const maxHeight = Math.min(height, 600);\n\n          if (maxWidth > 0 && maxHeight > 0) {\n            // Update canvas dimensions\n            canvas.width = maxWidth;\n            canvas.height = maxHeight;\n\n            // Trigger chart resize\n            if (chart && typeof chart?.resize === \"function\") {\n              chart.resize(maxWidth, maxHeight);\n            }\n          }\n        }\n      } catch (error) {\n        console.error(\"Error in resize handler:\", error);\n      } finally {\n        isResizing = false;\n      }\n    }, 100); // Debounce resize events\n  });\n\n  // Observe the canvas container, not the canvas itself\n  const container = canvas.parentElement;\n  if (container) {\n    resizeObserver.observe(container);\n\n    // Store observer for cleanup\n    canvas._resizeObserver = resizeObserver;\n  }\n}\n\n/**\n * Updates chart data safely without causing memory leaks\n * @param {string} canvasId - The canvas ID\n * @param {Object} newData - New chart data\n */\nexport function updateChartData(canvasId, newData) {\n  const chart = registeredCharts.get(canvasId);\n  if (!chart) {\n    console.warn(`Chart not found: ${canvasId}`);\n    return;\n  }\n\n  try {\n    // Clear existing data\n    chart.data.labels = newData.labels || [];\n    chart.data.datasets = newData.datasets || [];\n\n    // Update chart\n    chart.update(\"none\"); // Disable animations for updates\n\n    console.log(`Chart data updated: ${canvasId}`);\n  } catch (error) {\n    console.error(`Error updating chart ${canvasId}:`, error);\n  }\n}\n\n/**\n * Cleanup all charts and observers\n */\nexport function cleanupAllCharts() {\n  console.log(`Cleaning up ${registeredCharts.size} chart instances`);\n\n  registeredCharts.forEach((chart, id) => {\n    try {\n      // Cleanup resize observer\n      const canvas = document.getElementById(id);\n      if (canvas?._resizeObserver) {\n        canvas._resizeObserver.disconnect();\n        delete canvas._resizeObserver;\n      }\n\n      // Destroy chart\n      chart.destroy();\n    } catch (error) {\n      console.error(`Error cleaning up chart ${id}:`, error);\n    }\n  });\n\n  registeredCharts.clear();\n}\n\n/**\n * Initialize chart containers with proper CSS for flexible heights\n */\nexport function initializeChartContainers() {\n  const chartContainers = document.querySelectorAll(\n    \".chart-container, .chart-wrapper\"\n  );\n\n  chartContainers.forEach((container) => {\n    // FIXED: Set container CSS to allow flexible heights\n    container.style.width = \"100%\";\n    container.style.height = \"auto\";\n    container.style.minHeight = \"400px\";\n    container.style.maxHeight = \"none\";\n    container.style.overflow = \"visible\";\n    container.style.position = \"relative\";\n    container.style.display = \"flex\";\n    container.style.flexDirection = \"column\";\n\n    // Find canvas inside container\n    const canvas = container.querySelector(\"canvas\");\n    if (canvas) {\n      canvas.style.width = \"100%\";\n      canvas.style.height = \"auto\";\n      canvas.style.minHeight = \"300px\";\n      canvas.style.maxHeight = \"none\";\n      canvas.style.flex = \"1\";\n    }\n  });\n}\n\n// Cleanup on page unload\nwindow.addEventListener(\"beforeunload\", cleanupAllCharts);\n\n/**\n * Default chart color palette\n */\nconst DEFAULT_CHART_COLORS = [\n  \"#FF6384\",\n  \"#36A2EB\",\n  \"#FFCE56\",\n  \"#4BC0C0\",\n  \"#9966FF\",\n  \"#FF9F40\",\n  \"#FF6384\",\n  \"#C9CBCF\",\n  \"#4BC0C0\",\n  \"#FF6384\",\n];\n\nconst DARK_CHART_COLORS = [\n  \"#FF7F9A\",\n  \"#5BC0EB\",\n  \"#FFD56B\",\n  \"#66D9D9\",\n  \"#B380FF\",\n  \"#FFB366\",\n  \"#FF7F9A\",\n  \"#E0E0E0\",\n  \"#66D9D9\",\n  \"#FF7F9A\",\n];\n\n/**\n * Gets chart colors based on current theme\n * @param {number} count - Number of colors needed\n * @param {boolean} isDarkMode - Whether dark mode is active\n * @returns {Array<string>} Array of color strings\n */\nexport function getChartColors(count = 10, isDarkMode = false) {\n  const colors = isDarkMode ? DARK_CHART_COLORS : DEFAULT_CHART_COLORS;\n\n  // If we need more colors than available, repeat the pattern\n  const result = [];\n  for (let i = 0; i < count; i++) {\n    result.push(colors[i % colors.length]);\n  }\n\n  return result;\n}\n\n/**\n * Gets a single chart color by index\n * @param {number} index - Color index\n * @param {boolean} isDarkMode - Whether dark mode is active\n * @returns {string} Color string\n */\nexport function getChartColor(index = 0, isDarkMode = false) {\n  const colors = isDarkMode ? DARK_CHART_COLORS : DEFAULT_CHART_COLORS;\n  return colors[index % colors.length];\n}\n\n/**\n * Generates colors for category data\n * @param {Array} categories - Array of category names\n * @param {Object} categoryColors - Mapping of category names to colors\n * @param {boolean} isDarkMode - Whether dark mode is active\n * @returns {Array<string>} Array of colors matching categories\n */\nexport function getCategoryColors(\n  categories,\n  categoryColors = {},\n  isDarkMode = false\n) {\n  return categories.map((category, index) => {\n    // Use category-specific color if available\n    if (categoryColors[category]) {\n      return categoryColors[category];\n    }\n    // Fall back to default chart colors\n    return getChartColor(index, isDarkMode);\n  });\n}\n\n/**\n * Handle window resize events and trigger chart resizes\n */\nlet resizeTimeout;\nfunction handleResize() {\n  clearTimeout(resizeTimeout);\n  resizeTimeout = setTimeout(() => {\n    try {\n      registeredCharts.forEach((chart, canvasId) => {\n        // Check if chart and its canvas still exist in DOM\n        if (!chart?.canvas?.ownerDocument) {\n          console.warn(\n            `Chart ${canvasId} canvas no longer in DOM, removing from tracking`\n          );\n          registeredCharts.delete(canvasId);\n          return;\n        }\n\n        // FIXED: Reset canvas dimensions before resize\n        const canvas = chart?.canvas;\n        canvas.style.width = \"100%\";\n        canvas.style.height = \"auto\";\n        canvas.style.maxWidth = \"100%\";\n        canvas.style.maxHeight = \"100%\";\n\n        if (typeof chart.resize === \"function\") {\n          chart.resize();\n        }\n      });\n    } catch (error) {\n      console.error(\"Error in resize handler:\", error);\n    }\n  }, 100);\n}\n\n// Attach resize handler to window resize events\nwindow.addEventListener(\"resize\", handleResize);\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\charts\\chartManager.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'chartUpdateInProgress' is assigned a value but never used.","line":5,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":26},{"ruleId":"no-unused-vars","severity":1,"message":"'isUpdating' is assigned a value but never used.","line":11,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'getCleanCanvas' is defined but never used.","line":16,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":24},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":28,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":28,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[761,823],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":64,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":64,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1739,1797],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":87,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":87,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2247,2314],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":111,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":111,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2826,2888],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":128,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":128,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3248,3316],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":147,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":147,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3700,3739],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'filterTransactionsForCharts' is defined but never used.","line":153,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":153,"endColumn":37},{"ruleId":"no-unused-vars","severity":1,"message":"'createChartWithRegistration' is defined but never used.","line":221,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":221,"endColumn":37},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":259,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":259,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6658,6715],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":276,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":276,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7134,7186],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":301,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":301,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7940,8013],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":327,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":327,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8792,8857],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":333,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":333,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8968,9031],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":348,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":348,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9318,9366],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":365,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":365,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9868,9918],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":380,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":380,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10395,10437],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":394,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":394,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10848,10886],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":414,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":414,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11389,11436],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AppState } from \"../core/appState.js\";\n\n// Global chart instances storage with better tracking\nconst chartInstances = new Map();\nlet chartUpdateInProgress = false;\n\n// Global registry to track all Chart.js instances\nconst globalChartRegistry = new Map();\n\n// Add a flag to prevent multiple simultaneous updates\nlet isUpdating = false;\n\n/**\n * Get chart canvas and ensure it's clean\n */\nfunction getCleanCanvas(canvasId) {\n  const canvas = document.getElementById(canvasId);\n  if (!canvas) {\n    console.error(`Canvas ${canvasId} not found`);\n    return null;\n  }\n\n  // Destroy any existing chart on this canvas\n  if (chartInstances.has(canvasId)) {\n    const existingChart = chartInstances.get(canvasId);\n    try {\n      existingChart.destroy();\n      console.log(`Destroyed existing chart on canvas ${canvasId}`);\n    } catch (error) {\n      console.warn(`Error destroying chart on ${canvasId}:`, error);\n    }\n    chartInstances.delete(canvasId);\n  }\n\n  // Clear the canvas completely\n  const ctx = canvas.getContext(\"2d\");\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  // Reset canvas size to force re-initialization\n\n  const parentWidth = canvas.parentElement?.offsetWidth ?? 400;\n  const parentHeight = canvas.parentElement?.offsetHeight ?? 300;\n\n  canvas.width = parentWidth;\n  canvas.height = parentHeight;\n  canvas.style.width = parentWidth + \"px\";\n  canvas.style.height = parentHeight + \"px\";\n\n  return canvas;\n}\n\n/**\n * Destroy chart from global registry\n */\nfunction destroyFromGlobalRegistry(canvasId) {\n  if (!globalChartRegistry.has(canvasId)) {\n    return;\n  }\n\n  const chart = globalChartRegistry.get(canvasId);\n  try {\n    if (chart && typeof chart.destroy === \"function\") {\n      chart.destroy();\n      console.log(`Destroyed chart from registry: ${canvasId}`);\n    }\n  } catch (error) {\n    console.warn(`Error destroying chart from registry ${canvasId}:`, error);\n  }\n  globalChartRegistry.delete(canvasId);\n}\n\n/**\n * Destroy chart from Chart.js global registry\n */\nfunction destroyFromChartJsRegistry(canvas, canvasId) {\n  if (!window.Chart?.getChart) {\n    return;\n  }\n\n  const chartInstance = window.Chart.getChart(canvas);\n  if (!chartInstance) {\n    return;\n  }\n\n  try {\n    chartInstance.destroy();\n    console.log(`Destroyed chart from Chart.js registry: ${canvasId}`);\n  } catch (error) {\n    console.warn(`Error destroying from Chart.js registry ${canvasId}:`, error);\n  }\n}\n\n/**\n * Clear canvas context safely\n */\nfunction clearCanvasContext(canvas, canvasId) {\n  try {\n    const ctx = canvas.getContext(\"2d\");\n    if (ctx) {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n    }\n  } catch (error) {\n    console.warn(`Error clearing canvas ${canvasId}:`, error);\n  }\n}\n\n/**\n * Force destroy a chart with more careful cleanup\n */\nfunction forceDestroyChart(canvasId) {\n  console.log(`Force destroying chart for canvas: ${canvasId}`);\n\n  const canvas = document.getElementById(canvasId);\n  if (!canvas) {\n    console.warn(`Canvas ${canvasId} not found`);\n    return;\n  }\n\n  destroyFromGlobalRegistry(canvasId);\n  destroyFromChartJsRegistry(canvas, canvasId);\n  clearCanvasContext(canvas, canvasId);\n}\n\n/**\n * Clear all chart instances with better timing\n */\nasync function clearAllCharts() {\n  console.log(\"Clearing all chart instances with aggressive cleanup\");\n\n  const canvasIds = [\n    \"incomeExpenseChart\",\n    \"expenseCategoryChart\",\n    \"timelineChart\",\n  ];\n\n  // Force destroy all charts\n  canvasIds.forEach((canvasId) => {\n    forceDestroyChart(canvasId);\n  });\n\n  // Clear our registry\n  globalChartRegistry.clear();\n\n  // Wait for cleanup to complete\n  await new Promise((resolve) => setTimeout(resolve, 50)); // Reduced wait time\n\n  console.log(\"Chart cleanup completed\");\n}\n\n/**\n * Filter transactions for chart display based on current filters\n */\nfunction filterTransactionsForCharts(transactions) {\n  if (!Array.isArray(transactions)) {\n    console.warn(\"filterTransactionsForCharts: transactions is not an array\");\n    return [];\n  }\n\n  // Get current filter values\n  const periodFilter =\n    document.getElementById(\"chartPeriodSelect\")?.value || \"all\";\n  const currencyFilter =\n    document.getElementById(\"chartCurrencySelect\")?.value || \"all\";\n\n  let filtered = [...transactions];\n\n  // Apply period filter\n  if (periodFilter !== \"all\") {\n    const now = new Date();\n    let startDate;\n\n    switch (periodFilter) {\n      case \"month\":\n        startDate = new Date(now.getFullYear(), now.getMonth(), 1);\n        break;\n      case \"quarter\": {\n        const quarter = Math.floor(now.getMonth() / 3);\n        startDate = new Date(now.getFullYear(), quarter * 3, 1);\n        break;\n      }\n      case \"year\":\n        startDate = new Date(now.getFullYear(), 0, 1);\n        break;\n      default:\n        startDate = null;\n    }\n\n    if (startDate) {\n      filtered = filtered.filter((tx) => {\n        try {\n          const txDate = new Date(tx.date);\n          if (isNaN(txDate.getTime())) {\n            throw new Error(`Invalid date format: ${tx.date}`);\n          }\n          return txDate >= startDate;\n        } catch (e) {\n          console.warn(\n            \"Invalid date in transaction:\",\n            tx.date,\n            \"Error:\",\n            e.message\n          );\n          // Handle the exception by excluding invalid transactions\n          return false;\n        }\n      });\n    }\n  }\n\n  // Apply currency filter\n  if (currencyFilter !== \"all\") {\n    filtered = filtered.filter((tx) => tx.currency === currencyFilter);\n  }\n\n  return filtered;\n}\n\n/**\n * Create chart with improved registration and error handling\n */\nfunction createChartWithRegistration(canvasId, config) {\n  // Ensure canvas is completely clean first\n  forceDestroyChart(canvasId);\n\n  const canvas = document.getElementById(canvasId);\n  if (!canvas) {\n    console.error(`Canvas ${canvasId} not found`);\n    return null;\n  }\n\n  try {\n    // Ensure Chart.js is available\n    if (!window.Chart) {\n      console.error(\"Chart.js is not available\");\n      return null;\n    }\n\n    const Chart = window.Chart;\n\n    // Add a small delay to ensure canvas is ready\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) {\n      console.error(`Could not get 2D context for canvas ${canvasId}`);\n      return null;\n    }\n\n    // Ensure canvas has proper dimensions\n    if (canvas.offsetWidth === 0 || canvas.offsetHeight === 0) {\n      console.warn(`Canvas ${canvasId} has zero dimensions, setting defaults`);\n      canvas.style.width = \"400px\";\n      canvas.style.height = \"300px\";\n    }\n\n    const chart = new Chart(ctx, config);\n\n    // Register in our global registry\n    globalChartRegistry.set(canvasId, chart);\n\n    console.log(`Created and registered chart: ${canvasId}`);\n    return chart;\n  } catch (error) {\n    console.error(`Error creating chart for ${canvasId}:`, error);\n    return null;\n  }\n}\n\n/**\n * Updates charts with current transaction data\n */\n\n/**\n * Updates charts with current transaction data, with retry if canvases are missing\n * @param {number} retryCount - Internal use only, for retry attempts\n */\nexport async function updateChartsWithCurrentData(retryCount = 0) {\n  console.log(\"Updating charts with current data...\");\n\n  // Check if all chart canvases exist\n  const incomeCanvas = document.getElementById(\"incomeExpenseChart\");\n  const expenseCanvas = document.getElementById(\"expenseChart\");\n  const timelineCanvas = document.getElementById(\"timelineChart\");\n\n  if (!incomeCanvas || !expenseCanvas || !timelineCanvas) {\n    if (retryCount < 5) {\n      console.warn(\n        `Chart canvas not found (retry ${\n          retryCount + 1\n        }/5), retrying in 200ms...`\n      );\n      setTimeout(() => updateChartsWithCurrentData(retryCount + 1), 200);\n      return;\n    } else {\n      console.error(\n        \"Chart canvases still not found after 5 retries. Charts will not update.\"\n      );\n      return;\n    }\n  }\n\n  const transactions = AppState.transactions || [];\n  console.log(`Processing ${transactions.length} transactions for charts`);\n\n  // Track chart creation results\n  const chartResults = await Promise.allSettled([\n    createIncomeExpenseChartSafely(transactions),\n    createExpenseCategoryChartSafely(transactions),\n    createTimelineChartSafely(transactions),\n  ]);\n\n  // Analyze results\n  const successful = chartResults.filter(\n    (result) => result.status === \"fulfilled\"\n  ).length;\n  const failed = chartResults.filter(\n    (result) => result.status === \"rejected\"\n  ).length;\n\n  // Log failed charts with details\n  chartResults.forEach((result, index) => {\n    const chartNames = [\"income/expense\", \"expense category\", \"timeline\"];\n    if (result.status === \"rejected\") {\n      console.error(\n        `Failed to create ${chartNames[index]} chart:`,\n        result.reason\n      );\n    } else {\n      console.log(`Γ£ô ${chartNames[index]} chart created successfully`);\n    }\n  });\n\n  // Only show success message if all charts were created successfully\n  if (failed === 0) {\n    console.log(`Γ£ô All ${successful} charts updated successfully`);\n  } else {\n    console.warn(\n      `ΓÜá∩╕Å Chart update completed: ${successful} successful, ${failed} failed`\n    );\n  }\n\n  return chartResults;\n}\n\n/**\n * Safely creates income/expense chart with error handling\n */\nasync function createIncomeExpenseChartSafely(transactions) {\n  try {\n    console.log(\"Creating income/expense chart...\");\n    const { createIncomeExpenseChart } = await import(\n      \"./incomeExpenseChart.js\"\n    );\n    await createIncomeExpenseChart(transactions);\n    return { success: true, chart: \"income-expense\" };\n  } catch (error) {\n    console.error(\"Error creating income/expense chart:\", error);\n    throw error; // Re-throw so Promise.allSettled can catch it\n  }\n}\n\n/**\n * Safely creates expense category chart with error handling\n */\nasync function createExpenseCategoryChartSafely(transactions) {\n  try {\n    console.log(\"Creating expense category chart...\");\n    const { createExpenseCategoryChart } = await import(\"./expenseChart.js\");\n    await createExpenseCategoryChart(transactions);\n    return { success: true, chart: \"expense-category\" };\n  } catch (error) {\n    console.error(\"Error creating expense category chart:\", error);\n    throw error; // Re-throw so Promise.allSettled can catch it\n  }\n}\n\n/**\n * Safely creates timeline chart with error handling\n */\nasync function createTimelineChartSafely(transactions) {\n  try {\n    console.log(\"Creating timeline chart...\");\n    const { createTimelineChart } = await import(\"./timelineChart.js\");\n    await createTimelineChart(transactions);\n    return { success: true, chart: \"timeline\" };\n  } catch (error) {\n    console.error(\"Error creating timeline chart:\", error);\n    throw error; // Re-throw so Promise.allSettled can catch it\n  }\n}\n\n/**\n * Initialize chart event listeners and setup\n */\nexport function initializeCharts() {\n  console.log(\"Initializing charts...\");\n\n  // Initialize chart controls if they exist\n  const periodSelect = document.getElementById(\"chartPeriodSelect\");\n  const currencySelect = document.getElementById(\"chartCurrencySelect\");\n\n  if (periodSelect) {\n    periodSelect.addEventListener(\"change\", () => {\n      updateChartsWithCurrentData();\n    });\n  }\n\n  if (currencySelect) {\n    currencySelect.addEventListener(\"change\", () => {\n      updateChartsWithCurrentData();\n    });\n  }\n\n  // Initial chart update\n  updateChartsWithCurrentData();\n  console.log(\"Charts initialized successfully\");\n}\n\n// Export chart management functions\nexport { chartInstances, clearAllCharts };\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\charts\\expenseChart.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'groupTransactionsByCategory' is defined but never used.","line":44,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":37},{"ruleId":"no-unused-vars","severity":1,"message":"'createChartConfig' is defined but never used.","line":77,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":77,"endColumn":27},{"ruleId":"no-unused-vars","severity":1,"message":"'clearCanvas' is defined but never used.","line":172,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":172,"endColumn":21},{"ruleId":"no-unused-vars","severity":1,"message":"'handleChartError' is defined but never used.","line":182,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":182,"endColumn":26},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":225,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":225,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5861,5929],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":274,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":274,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6957,7011],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":282,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":282,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7176,7225],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":300,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":300,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7691,7734],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":325,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":325,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8291,8365],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'addToggleSubcategoriesButton' is defined but never used.","line":332,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":332,"endColumn":38},{"ruleId":"no-unused-vars","severity":1,"message":"'showEmptyStateChart' is defined but never used.","line":427,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":427,"endColumn":29},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":467,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":467,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12264,12312],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":475,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":475,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12421,12471],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":547,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":547,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14322,14383],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":563,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":563,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14733,14779],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  createChart,\n  destroyChart,\n  updateChartData,\n  getCategoryColors,\n} from \"./chartCore.js\";\nimport { AppState } from \"../core/appState.js\";\n\nlet pieChart = null;\nlet showSubcategories = false;\n\n// Store chart instance\nlet expenseCategoryChart = null;\n\n// Define chart colors at module level\nconst CHART_COLORS = [\n  \"#FF6384\",\n  \"#36A2EB\",\n  \"#FFCE56\",\n  \"#4BC0C0\",\n  \"#9966FF\",\n  \"#FF9F40\",\n  \"#FF6384\",\n  \"#C9CBCF\",\n  \"#4BC0C0\",\n  \"#FF6384\",\n  \"#36A2EB\",\n  \"#FFCE56\",\n];\n\nfunction getChartColors(count) {\n  const colors = [];\n  for (let i = 0; i < count; i++) {\n    colors.push(CHART_COLORS[i % CHART_COLORS.length]);\n  }\n  return colors;\n}\n\n/**\n * Groups transactions by category or subcategory\n * @param {Array} transactions - The transactions to process\n * @returns {Object} Object containing category totals\n */\nfunction groupTransactionsByCategory(transactions) {\n  const categoryTotals = {};\n\n  transactions.forEach((tx) => {\n    // Only consider expenses (not income)\n    const amount = parseFloat(tx.expenses) || 0;\n    if (!amount) return;\n\n    if (showSubcategories && tx.category && tx.subcategory) {\n      // Use subcategory as the key when showing subcategories\n      const key = `${tx.category}:${tx.subcategory}`;\n      categoryTotals[key] = (categoryTotals[key] || 0) + amount;\n    } else {\n      // Just use main category\n      const category = tx.category || \"Uncategorized\";\n      categoryTotals[category] = (categoryTotals[category] || 0) + amount;\n    }\n  });\n\n  return categoryTotals;\n}\n\n/**\n * Updates the expense pie chart with the given transactions\n * @param {Array} transactions - The transactions to display\n * @returns {boolean} True if successful, false otherwise\n */\n/**\n * Creates chart configuration based on categories and totals\n * @param {Array} categories - List of categories\n * @param {Object} categoryTotals - Category totals\n * @returns {Object} Chart configuration\n */\nfunction createChartConfig(categories, categoryTotals) {\n  // Create colors array based on categories or subcategories\n  const colors = categories.map((category) => {\n    if (showSubcategories && category.includes(\":\")) {\n      // Extract subcategory color\n      const [mainCat, subCat] = category.split(\":\");\n      const mainCategory = AppState.categories[mainCat];\n      if (\n        mainCategory &&\n        typeof mainCategory === \"object\" &&\n        mainCategory.subcategories?.subcategories?.[subCat]\n      ) {\n        return mainCategory.subcategories[subCat];\n      }\n    }\n\n    // Default to category color or generate based on name\n    const mainCatName = category.includes(\":\")\n      ? category.split(\":\")[0]\n      : category;\n    return generateCategoryColor(mainCatName);\n  });\n\n  // Create display labels (format subcategory labels)\n  const displayLabels = categories.map((category) => {\n    if (category.includes(\":\")) {\n      const [mainCat, subCat] = category.split(\":\");\n      return `${mainCat}: ${subCat}`;\n    }\n    return category;\n  });\n\n  // Create the chart data\n  const chartData = {\n    labels: displayLabels,\n    datasets: [\n      {\n        data: categories.map((cat) => categoryTotals[cat]),\n        backgroundColor: colors,\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  return {\n    type: \"pie\",\n    data: chartData,\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      layout: {\n        padding: {\n          top: 20,\n          right: 20,\n          bottom: 20,\n          left: 20,\n        },\n      },\n      plugins: {\n        legend: {\n          position: \"right\",\n          labels: {\n            boxWidth: 15,\n            padding: 10,\n          },\n        },\n        tooltip: {\n          callbacks: {\n            label: function (context) {\n              const value = context.raw || 0;\n              return (\n                \"$\" +\n                value.toLocaleString(\"en-US\", {\n                  minimumFractionDigits: 0,\n                  maximumFractionDigits: 2,\n                })\n              );\n            },\n          },\n        },\n        title: {\n          display: true,\n          text: showSubcategories\n            ? \"Expenses by Subcategory\"\n            : \"Expenses by Category\",\n        },\n      },\n    },\n  };\n}\n\n/**\n * Helper function to clear canvas\n * @param {HTMLCanvasElement} canvas - The canvas to clear\n */\nfunction clearCanvas(canvas) {\n  const ctx = canvas.getContext(\"2d\");\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  return false;\n}\n\n/**\n * Helper function to handle error display\n * @param {Error} error - The error that occurred\n */\nfunction handleChartError(error) {\n  console.error(\"Error creating expense chart:\", error);\n\n  // Fall back to canvas rendering\n  const canvas = document.getElementById(\"expenseChart\");\n  if (!canvas) return;\n\n  try {\n    const ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.fillStyle = document.body.classList.contains(\"dark-mode\")\n      ? \"#333\"\n      : \"#f5f5f5\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    ctx.fillStyle = document.body.classList.contains(\"dark-mode\")\n      ? \"#e0e0e0\"\n      : \"#666\";\n    ctx.font = \"14px Arial\";\n    ctx.textAlign = \"center\";\n    ctx.fillText(\n      \"Error creating expense chart\",\n      canvas.width / 2,\n      canvas.height / 2\n    );\n  } catch (fallbackError) {\n    console.error(\"Error creating fallback display:\", fallbackError);\n  }\n}\n\n/**\n * Initialize expense chart with proper error handling\n */\nexport function initializeExpenseChart() {\n  const canvas = document.getElementById(\"expenseChart\");\n  if (!canvas) {\n    console.warn(\n      \"Expense chart canvas not found - charts section may not be loaded yet\"\n    );\n\n    // Try again after a delay to allow DOM to load\n    setTimeout(() => {\n      const retryCanvas = document.getElementById(\"expenseChart\");\n      if (retryCanvas) {\n        console.log(\"Found expense chart canvas on retry, initializing...\");\n        initializeExpenseChartWithCanvas(retryCanvas);\n      } else {\n        console.error(\n          \"Expense chart canvas still not found after retry. Check if charts section exists in HTML.\"\n        );\n      }\n    }, 1000);\n    return;\n  }\n\n  initializeExpenseChartWithCanvas(canvas);\n}\n\n/**\n * Initialize chart with canvas element\n */\nfunction initializeExpenseChartWithCanvas(canvas) {\n  const config = {\n    type: \"doughnut\",\n    data: {\n      labels: [\"No Data\"],\n      datasets: [\n        {\n          data: [1],\n          backgroundColor: [\"#e0e0e0\"],\n          borderWidth: 0,\n        },\n      ],\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        title: {\n          display: false, // Title is handled by HTML h3\n        },\n        legend: {\n          position: \"bottom\",\n          labels: {\n            padding: 15,\n            usePointStyle: true,\n          },\n        },\n      },\n    },\n  };\n\n  createChart(canvas, \"doughnut\", config.data, config.options);\n  console.log(\"Expense chart initialized successfully\");\n}\n\n/**\n * Update expense chart with transaction data\n */\nexport function updateExpenseChart(transactions) {\n  if (!transactions || transactions.length === 0) {\n    console.log(\"No transactions for expense chart\");\n    return;\n  }\n\n  // Group expenses by category\n  const categoryTotals = {};\n  transactions.forEach((tx) => {\n    const expense = parseFloat(tx.expenses) || 0;\n    if (expense > 0) {\n      const category = tx.category || \"Uncategorized\";\n      categoryTotals[category] = (categoryTotals[category] || 0) + expense;\n    }\n  });\n\n  const categories = Object.keys(categoryTotals);\n  const amounts = Object.values(categoryTotals);\n\n  if (categories.length === 0) {\n    console.log(\"No expense categories found\");\n    return;\n  }\n\n  // Get category colors from AppState or use chart colors\n  import(\"../core/appState.js\").then((module) => {\n    const isDarkMode = document.body.classList.contains(\"dark-mode\");\n    const colors = getCategoryColors(\n      categories,\n      module.AppState.categories,\n      isDarkMode\n    );\n\n    const chartData = {\n      labels: categories,\n      datasets: [\n        {\n          data: amounts,\n          backgroundColor: colors,\n          borderWidth: 1,\n        },\n      ],\n    };\n\n    updateChartData(\"expenseChart\", chartData);\n    console.log(`Updated expense chart with ${categories.length} categories`);\n  });\n}\n\n/**\n * Adds a toggle button for subcategory breakdown\n */\nfunction addToggleSubcategoriesButton() {\n  // Check if button already exists\n  let toggleBtn = document.getElementById(\"toggleSubcategoriesBtn\");\n\n  if (!toggleBtn) {\n    // Create button\n    toggleBtn = document.createElement(\"button\");\n    toggleBtn.id = \"toggleSubcategoriesBtn\";\n    toggleBtn.className = \"toggle-subcategories-btn\";\n    toggleBtn.title = showSubcategories\n      ? \"Show Main Categories\"\n      : \"Show Subcategories\";\n    toggleBtn.innerHTML = showSubcategories\n      ? \"≡ƒôè Main Categories\"\n      : \"≡ƒöì Show Subcategories\";\n    toggleBtn.style.position = \"absolute\";\n    toggleBtn.style.top = \"10px\";\n    toggleBtn.style.right = \"10px\";\n    toggleBtn.style.zIndex = \"10\";\n    toggleBtn.style.padding = \"5px 10px\";\n    toggleBtn.style.fontSize = \"12px\";\n    toggleBtn.style.backgroundColor = \"#f0f0f0\";\n    toggleBtn.style.border = \"1px solid #ddd\";\n    toggleBtn.style.borderRadius = \"4px\";\n    toggleBtn.style.cursor = \"pointer\";\n\n    // Find the chart wrapper to append\n    const chartWrapper = document\n      .getElementById(\"expenseChart\")\n      .closest(\".chart-wrapper\");\n    if (chartWrapper) {\n      chartWrapper.style.position = \"relative\";\n      chartWrapper.appendChild(toggleBtn);\n    }\n\n    // Add event listener\n    toggleBtn.addEventListener(\"click\", () => {\n      showSubcategories = !showSubcategories;\n      toggleBtn.title = showSubcategories\n        ? \"Show Main Categories\"\n        : \"Show Subcategories\";\n      toggleBtn.innerHTML = showSubcategories\n        ? \"≡ƒôè Main Categories\"\n        : \"≡ƒöì Show Subcategories\";\n\n      // Update chart with current transactions\n      import(\"../core/appState.js\").then((module) => {\n        updateExpenseChart(module.AppState.transactions);\n      });\n    });\n  } else {\n    // Just update existing button text\n    toggleBtn.title = showSubcategories\n      ? \"Show Main Categories\"\n      : \"Show Subcategories\";\n    toggleBtn.innerHTML = showSubcategories\n      ? \"≡ƒôè Main Categories\"\n      : \"≡ƒöì Show Subcategories\";\n  }\n}\n\n/**\n * Helper function to get or generate category color\n * @param {string} categoryName - Category name\n * @returns {string} Category color\n */\nfunction generateCategoryColor(categoryName) {\n  if (AppState.categories[categoryName]) {\n    const catValue = AppState.categories[categoryName];\n    if (typeof catValue === \"string\") {\n      return catValue;\n    } else if (catValue?.color) {\n      return catValue.color;\n    }\n  }\n\n  // Fallback to a stable generated color\n  let hash = 0;\n  for (let i = 0; i < categoryName.length; i++) {\n    hash = (hash << 5) - hash + categoryName.charCodeAt(i);\n    hash = hash & hash;\n  }\n  return `#${Math.abs(hash).toString(16).substring(0, 6).padStart(6, \"0\")}`;\n}\n\n/**\n * Cleans up the expense chart\n */\nexport function cleanupExpenseChart() {\n  pieChart = destroyChart(pieChart);\n}\n\n/**\n * Shows empty state for expense chart with improved aesthetics\n */\nfunction showEmptyStateChart() {\n  const ctx = document.getElementById(\"expenseChart\");\n  if (!ctx) return;\n\n  // Use createSafeChart to create a blank chart without any \"No data\" text\n  if (window.expenseChart) {\n    window.expenseChart.destroy();\n  }\n\n  window.expenseChart = createSafeChart(ctx, {\n    type: \"doughnut\",\n    data: {\n      labels: [],\n      datasets: [\n        {\n          data: [],\n          backgroundColor: [],\n        },\n      ],\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: { display: false },\n        tooltip: { enabled: false },\n        // Remove the \"No data\" text entirely\n        title: { display: false },\n      },\n    },\n  });\n}\n\n/**\n * Destroy existing expense category chart instance\n */\nexport function destroyExpenseChart() {\n  if (expenseCategoryChart) {\n    expenseCategoryChart.destroy();\n    expenseCategoryChart = null;\n    console.log(\"Expense category chart destroyed\");\n  }\n}\n\n/**\n * Creates the expense category chart\n */\nexport async function createExpenseCategoryChart() {\n  console.log(\"Creating expense category chart...\");\n\n  try {\n    // Use global Chart.js (loaded via CDN in HTML)\n    if (typeof Chart === \"undefined\") {\n      throw new Error(\"Chart.js is not loaded\");\n    }\n\n    const canvas = document.getElementById(\"expenseCategoryChart\");\n    if (!canvas) {\n      console.warn(\"Expense category chart canvas not found\");\n      return null;\n    }\n\n    // Destroy existing chart\n    if (window.expenseCategoryChartInstance) {\n      window.expenseCategoryChartInstance.destroy();\n    }\n\n    // Get chart data\n    const data = getExpenseCategoryData();\n\n    if (!data || data.labels.length === 0) {\n      showNoDataMessage(canvas);\n      return null;\n    }\n\n    // Create the chart\n    const chartInstance = new Chart(canvas, {\n      type: \"pie\",\n      data: {\n        labels: data.labels,\n        datasets: [\n          {\n            data: data.values,\n            backgroundColor: getChartColors(data.labels.length),\n            borderWidth: 2,\n            borderColor: \"#fff\",\n          },\n        ],\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            position: \"bottom\",\n            labels: {\n              padding: 20,\n              usePointStyle: true,\n            },\n          },\n          tooltip: {\n            callbacks: {\n              label: function (context) {\n                const value = context.parsed;\n                const total = data.values.reduce((sum, val) => sum + val, 0);\n                const percentage =\n                  total > 0 ? ((value / total) * 100).toFixed(1) : 0;\n                return `${context.label}: $${value.toFixed(\n                  2\n                )} (${percentage}%)`;\n              },\n            },\n          },\n        },\n      },\n    });\n\n    // Store reference\n    window.expenseCategoryChartInstance = chartInstance;\n\n    console.log(\"Γ£ô expense category chart created successfully\");\n    return chartInstance;\n  } catch (error) {\n    console.error(\"Γ¥î Error creating expense category chart:\", error);\n    return null;\n  }\n}\n\n/**\n * Clear the expense category chart\n */\nexport function clearExpenseCategoryChart() {\n  if (expenseCategoryChart) {\n    try {\n      expenseCategoryChart.destroy();\n      expenseCategoryChart = null;\n      console.log(\"Expense category chart cleared\");\n    } catch (error) {\n      console.error(\"Error clearing expense category chart:\", error);\n    }\n  }\n}\n\n/**\n * Get expense category data for chart\n */\nfunction getExpenseCategoryData() {\n  const transactions = AppState.transactions || [];\n  const categoryTotals = calculateCategoryTotals(transactions);\n\n  return {\n    labels: Object.keys(categoryTotals),\n    values: Object.values(categoryTotals),\n  };\n}\n\n/**\n * Create safe chart with error handling\n */\nfunction createSafeChart(canvas, config) {\n  try {\n    return new Chart(canvas, config);\n  } catch (error) {\n    console.error(\"Error creating chart:\", error);\n    return null;\n  }\n}\n\n/**\n * Show no data message\n */\nfunction showNoDataMessage(canvas, message = \"No expense data available\") {\n  displayNoDataMessage(canvas, message);\n}\n\n/**\n * Helper function to display no data message\n * @param {HTMLCanvasElement} canvas - The canvas to display the message on\n * @param {string} message - The message to display\n */\nfunction displayNoDataMessage(canvas, message) {\n  const ctx = canvas.getContext(\"2d\");\n\n  // Clear canvas\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  // Set text properties\n  ctx.textAlign = \"center\";\n  ctx.textBaseline = \"middle\";\n  ctx.font = \"14px Arial\";\n\n  // Determine text color based on theme\n  const isDarkMode = document.body.classList.contains(\"dark-mode\");\n  ctx.fillStyle = isDarkMode ? \"#aaaaaa\" : \"#666666\";\n\n  // Draw message in center of canvas\n  ctx.fillText(message, canvas.width / 2, canvas.height / 2);\n}\n\n/**\n * Calculate category totals from transactions\n * @param {Array} transactions - Array of transactions\n * @returns {Object} Object with category totals\n */\nfunction calculateCategoryTotals(transactions) {\n  const totals = {};\n\n  if (!transactions || !Array.isArray(transactions)) {\n    return totals;\n  }\n\n  transactions.forEach((transaction) => {\n    const category = transaction.category || \"Uncategorized\";\n    const amount = parseFloat(transaction.expenses || 0);\n\n    if (amount > 0) {\n      totals[category] = (totals[category] || 0) + amount;\n    }\n  });\n\n  return totals;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\charts\\incomeExpenseChart.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":15,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":15,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[438,484],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":23,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":23,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[604,652],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":95,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":95,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2523,2582],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":118,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":118,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3078,3122],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":164,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":164,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4238,4333],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":229,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":229,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5739,5800],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'calculateIncomeExpenseTotals' is defined but never used.","line":237,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":237,"endColumn":38}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createChart, destroyChart, getChartColors } from \"./chartCore.js\";\n// Reuse common helper for empty state messaging\nimport { showNoDataMessage } from \"./expenseChart.js\";\n\n// Store chart instance\nlet incomeExpenseChart = null;\n\n/**\n * Destroy existing income/expense chart instance\n */\nexport function destroyIncomeExpenseChart() {\n  if (incomeExpenseChart) {\n    incomeExpenseChart.destroy();\n    incomeExpenseChart = null;\n    console.log(\"Income/Expense chart destroyed\");\n  }\n}\n\n/**\n * Creates the income vs expense chart\n */\nexport async function createIncomeExpenseChart(transactions) {\n  console.log(\"Creating income/expense chart...\");\n\n  try {\n    // Use global Chart.js (loaded via CDN in HTML)\n    if (typeof Chart === \"undefined\") {\n      throw new Error(\"Chart.js is not loaded\");\n    }\n\n    const canvas = document.getElementById(\"incomeExpenseChart\");\n    if (!canvas) {\n      console.warn(\"Income expense chart canvas not found\");\n      return null;\n    }\n\n    // Destroy existing chart\n    if (window.incomeExpenseChartInstance) {\n      window.incomeExpenseChartInstance.destroy();\n    }\n\n    // Get chart data\n    const data = getIncomeExpenseData(transactions);\n\n    if (!data || (data.income === 0 && data.expenses === 0)) {\n      showNoDataMessage(canvas);\n      return null;\n    }\n\n    // Create the chart\n    const chartInstance = new Chart(canvas, {\n      type: \"doughnut\",\n      data: {\n        labels: [\"Income\", \"Expenses\"],\n        datasets: [\n          {\n            data: [data.income, data.expenses],\n            backgroundColor: [\"#4CAF50\", \"#f44336\"],\n            borderWidth: 2,\n            borderColor: \"#fff\",\n          },\n        ],\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            position: \"bottom\",\n            labels: {\n              padding: 20,\n              usePointStyle: true,\n            },\n          },\n          tooltip: {\n            callbacks: {\n              label: function (context) {\n                const value = context.parsed;\n                const total = data.income + data.expenses;\n                const percentage =\n                  total > 0 ? ((value / total) * 100).toFixed(1) : 0;\n                return `${context.label}: $${value.toFixed(\n                  2\n                )} (${percentage}%)`;\n              },\n            },\n          },\n        },\n      },\n    });\n\n    // Store reference\n    window.incomeExpenseChartInstance = chartInstance;\n\n    console.log(\"Γ£ô income/expense chart created successfully\");\n    return chartInstance;\n  } catch (error) {\n    console.error(\"Γ¥î Error creating income/expense chart:\", error);\n    return null;\n  }\n}\n\n/**\n * Update the income vs expense chart\n */\nexport function updateIncomeExpenseChart(transactions) {\n  return createIncomeExpenseChart(transactions);\n}\n\n/**\n * Clear the income vs expense chart\n */\nexport function clearIncomeExpenseChart() {\n  if (incomeExpenseChart) {\n    try {\n      incomeExpenseChart.destroy();\n      incomeExpenseChart = null;\n      console.log(\"Income/expense chart cleared\");\n    } catch (error) {\n      console.error(\"Error clearing income/expense chart:\", error);\n    }\n  }\n}\n\n/**\n * Get income and expense data from transactions\n */\nfunction getIncomeExpenseData(transactions) {\n  const totals = { income: 0, expenses: 0 };\n\n  if (!transactions || !Array.isArray(transactions)) {\n    return totals;\n  }\n\n  transactions.forEach((tx) => {\n    totals.income += parseFloat(tx.income || 0);\n    totals.expenses += parseFloat(tx.expenses || 0);\n  });\n\n  return totals;\n}\n\n/**\n * Cleans up the income vs expense chart\n */\nexport function cleanupIncomeExpenseChart() {\n  incomeExpenseChart = destroyChart(incomeExpenseChart);\n}\n\n/**\n * Initialize income vs expense chart with error handling\n */\nexport function initializeIncomeExpenseChart() {\n  const canvas = document.getElementById(\"incomeExpenseChart\");\n  if (!canvas) {\n    console.warn(\n      \"Income expense chart canvas not found - charts section may not be loaded yet\"\n    );\n\n    // Try again after a delay\n    setTimeout(() => {\n      const retryCanvas = document.getElementById(\"incomeExpenseChart\");\n      if (retryCanvas) {\n        console.log(\n          \"Found income expense chart canvas on retry, initializing...\"\n        );\n        initializeIncomeExpenseChartWithCanvas(retryCanvas);\n      } else {\n        console.error(\n          \"Income expense chart canvas still not found after retry. Check if charts section exists in HTML.\"\n        );\n      }\n    }, 1000);\n    return;\n  }\n\n  initializeIncomeExpenseChartWithCanvas(canvas);\n}\n\n/**\n * Initialize chart with canvas element\n */\nfunction initializeIncomeExpenseChartWithCanvas(canvas) {\n  // Get colors for income and expense\n  const isDarkMode = document.body.classList.contains(\"dark-mode\");\n  const colors = getChartColors(2, isDarkMode);\n\n  const config = {\n    type: \"bar\",\n    data: {\n      labels: [\"Total\"],\n      datasets: [\n        {\n          label: \"Income\",\n          data: [0],\n          backgroundColor: colors[0],\n          borderColor: colors[0],\n          borderWidth: 1,\n        },\n        {\n          label: \"Expenses\",\n          data: [0],\n          backgroundColor: colors[1],\n          borderColor: colors[1],\n          borderWidth: 1,\n        },\n      ],\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        title: {\n          display: false, // Title handled by HTML h3\n        },\n        legend: {\n          position: \"top\",\n        },\n      },\n      scales: {\n        y: {\n          beginAtZero: true,\n        },\n      },\n    },\n  };\n\n  createChart(canvas, \"bar\", config.data, config.options);\n  console.log(\"Income expense chart initialized successfully\");\n}\n\n/**\n * Calculate income and expense totals from transactions\n * @param {Array} transactions - Array of transactions\n * @returns {Object} Object with income and expense totals\n */\nfunction calculateIncomeExpenseTotals(transactions) {\n  const totals = {\n    income: 0,\n    expenses: 0,\n  };\n\n  if (!transactions || !Array.isArray(transactions)) {\n    return totals;\n  }\n\n  transactions.forEach((transaction) => {\n    const income = parseFloat(transaction.income || 0);\n    const expenses = parseFloat(transaction.expenses || 0);\n\n    totals.income += income;\n    totals.expenses += expenses;\n  });\n\n  return totals;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\charts\\timelineChart.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":12,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":12,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[443,499],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":42,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":42,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1260,1317],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":56,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":56,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1586,1628],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'prepareTimelineData' is defined but never used.","line":83,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":83,"endColumn":29},{"ruleId":"no-unused-vars","severity":1,"message":"'clearChart' is defined but never used.","line":159,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":159,"endColumn":20},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":187,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":187,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4843,4912],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":252,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":252,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6337,6392],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":263,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":263,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6569,6607],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":277,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":277,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6880,6920],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'updateTimelineChartInternal' is defined but never used.","line":284,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":284,"endColumn":37},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":285,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":285,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7024,7066],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":292,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":292,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7178,7240],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":297,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":297,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7338,7392],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":319,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":319,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8046,8084],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":335,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":335,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8554,8625],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-undef","severity":2,"message":"'isDarkMode' is not defined.","line":388,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":388,"endColumn":32},{"ruleId":"no-undef","severity":2,"message":"'gridColor' is not defined.","line":398,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":398,"endColumn":31},{"ruleId":"no-undef","severity":2,"message":"'textColor' is not defined.","line":401,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":401,"endColumn":31},{"ruleId":"no-undef","severity":2,"message":"'gridColor' is not defined.","line":409,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":409,"endColumn":31},{"ruleId":"no-undef","severity":2,"message":"'textColor' is not defined.","line":412,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":412,"endColumn":31},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":436,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":436,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11123,11174],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":447,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":447,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11372,11443],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'destroyChartInstance' is defined but never used.","line":474,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":474,"endColumn":30},{"ruleId":"no-unused-vars","severity":1,"message":"'aggregateByPeriod' is defined but never used.","line":713,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":713,"endColumn":27},{"ruleId":"no-unused-vars","severity":1,"message":"'prepareTimelineDataWithPeriod' is defined but never used.","line":803,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":803,"endColumn":39},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":817,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":817,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[21452,21506],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":942,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":942,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[24655,24697],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":999,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":999,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[26062,26115],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'safeFormatNumber' is defined but never used.","line":1031,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":1031,"endColumn":26},{"ruleId":"no-unused-vars","severity":1,"message":"'period' is defined but never used. Allowed unused args must match /^_/u.","line":1111,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":1111,"endColumn":38}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AppState } from \"../core/appState.js\";\nimport { createChart, destroyChart, getChartColors } from \"./chartCore.js\";\nimport { formatDateToDDMMYYYY, parseDDMMYYYY } from \"../utils/dateUtils.js\";\n\n/**\n * Validates chart data before processing\n * @param {Array} data - Chart data to validate\n * @returns {boolean} True if data is valid\n */\nfunction validateChartData(data) {\n  if (!data || !Array.isArray(data) || data.length === 0) {\n    console.log(\"Timeline chart: No valid data to display\");\n    return false;\n  }\n  return true;\n}\n\n/**\n * Hides the timeline chart when there's no data\n */\nfunction hideTimelineChart() {\n  const chartWrapper = document.getElementById(\"timelineChartWrapper\");\n  const chartContainer = document.getElementById(\"timelineChart\");\n\n  if (chartWrapper) {\n    chartWrapper.style.display = \"none\";\n  }\n\n  if (chartContainer) {\n    // Clear any existing chart\n    const canvas = chartContainer.querySelector(\"canvas\");\n    if (canvas) {\n      const ctx = canvas.getContext(\"2d\");\n      if (ctx) {\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n      }\n    }\n    chartContainer.innerHTML =\n      '<p style=\"text-align: center; color: #666; padding: 20px;\">No transaction data available for timeline chart</p>';\n  }\n\n  console.log(\"Timeline chart hidden - no data available\");\n}\n\n/**\n * Creates and updates the timeline chart\n * @param {Array} transactions - Array of transaction objects\n */\nexport function updateTimelineChart(transactions = []) {\n  if (!validateChartData(transactions)) {\n    hideTimelineChart();\n    return;\n  }\n\n  try {\n    console.log(\"Updating timeline chart...\");\n\n    if (!validateChartData(transactions)) {\n      clearTimelineChart();\n      return false;\n    }\n\n    const timelineData = processTimelineData(transactions);\n\n    if (timelineData.labels.length === 0) {\n      clearTimelineChart();\n      return false;\n    }\n\n    initializeTimelineChart();\n    return true;\n  } catch (error) {\n    console.error(\"Error updating timeline chart:\", error);\n    return false;\n  }\n}\n\n/**\n * Prepares data for timeline chart\n * @param {Array} transactions - Filtered transactions\n * @returns {Object} Chart.js data object\n */\nfunction prepareTimelineData(transactions) {\n  const monthlyData = {};\n\n  // Group transactions by month\n  transactions.forEach((tx) => {\n    if (!tx.date) return;\n\n    try {\n      const date = new Date(tx.date);\n      if (isNaN(date.getTime())) return;\n\n      const monthKey = `${date.getFullYear()}-${String(\n        date.getMonth() + 1\n      ).padStart(2, \"0\")}`;\n\n      if (!monthlyData[monthKey]) {\n        monthlyData[monthKey] = { income: 0, expenses: 0 };\n      }\n\n      monthlyData[monthKey].income += parseFloat(tx.income) || 0;\n      monthlyData[monthKey].expenses += parseFloat(tx.expenses) || 0;\n    } catch (error) {\n      console.warn(\"Error processing date for timeline:\", tx.date, error);\n    }\n  });\n\n  // Sort months chronologically\n  const sortedMonths = Object.keys(monthlyData).sort((a, b) =>\n    a.localeCompare(b)\n  );\n\n  if (sortedMonths.length === 0) {\n    return { labels: [], datasets: [] };\n  }\n\n  // Prepare chart data\n  const incomeData = sortedMonths.map((month) => monthlyData[month].income);\n  const expenseData = sortedMonths.map((month) => monthlyData[month].expenses);\n\n  // Format labels for display (MMM YYYY)\n  const labels = sortedMonths.map((month) => {\n    const [year, monthNum] = month.split(\"-\");\n    const date = new Date(year, monthNum - 1);\n    return date.toLocaleDateString(\"en-US\", {\n      month: \"short\",\n      year: \"numeric\",\n    });\n  });\n\n  return {\n    labels,\n    datasets: [\n      {\n        label: \"Income\",\n        data: incomeData,\n        borderColor: \"#4CAF50\",\n        backgroundColor: \"rgba(76, 175, 80, 0.1)\",\n        tension: 0.1,\n        fill: false,\n      },\n      {\n        label: \"Expenses\",\n        data: expenseData,\n        borderColor: \"#F44336\",\n        backgroundColor: \"rgba(244, 67, 54, 0.1)\",\n        tension: 0.1,\n        fill: false,\n      },\n    ],\n  };\n}\n\n/**\n * Clears the timeline chart\n * @param {HTMLCanvasElement} canvas - Chart canvas\n */\nfunction clearChart(canvas) {\n  const existingChart = Chart.getChart(canvas);\n  if (existingChart) {\n    existingChart.destroy();\n  }\n\n  // Clear the chart instance\n  storeChartInstance(\"timeline\", null);\n}\n\n// Store chart instance\nlet timelineChart = null;\nlet timelineChartInstance = null;\n\n/**\n * Initialize timeline chart with error handling\n */\nexport function initializeTimelineChart() {\n  const canvas = document.getElementById(\"timelineChart\");\n  if (!canvas) {\n    console.warn(\n      \"Timeline chart canvas not found - charts section may not be loaded yet\"\n    );\n\n    // Try again after a delay\n    setTimeout(() => {\n      const retryCanvas = document.getElementById(\"timelineChart\");\n      if (retryCanvas) {\n        console.log(\"Found timeline chart canvas on retry, initializing...\");\n        initializeTimelineChartWithCanvas(retryCanvas);\n      } else {\n        console.error(\n          \"Timeline chart canvas still not found after retry. Check if charts section exists in HTML.\"\n        );\n      }\n    }, 1000);\n    return;\n  }\n\n  initializeTimelineChartWithCanvas(canvas);\n}\n\n/**\n * Initialize chart with canvas element\n */\nfunction initializeTimelineChartWithCanvas(canvas) {\n  // Get colors for the chart\n  const isDarkMode = document.body.classList.contains(\"dark-mode\");\n  const colors = getChartColors(2, isDarkMode);\n\n  const config = {\n    type: \"line\",\n    data: {\n      labels: [],\n      datasets: [\n        {\n          label: \"Income\",\n          data: [],\n          borderColor: colors[0],\n          backgroundColor: colors[0] + \"20\",\n          tension: 0.1,\n          fill: false,\n        },\n        {\n          label: \"Expenses\",\n          data: [],\n          borderColor: colors[1],\n          backgroundColor: colors[1] + \"20\",\n          tension: 0.1,\n          fill: false,\n        },\n      ],\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        title: {\n          display: false, // Title handled by HTML h3\n        },\n        legend: {\n          position: \"top\",\n        },\n      },\n      scales: {\n        y: {\n          beginAtZero: true,\n        },\n      },\n    },\n  };\n\n  createChart(canvas, \"line\", config.data, config.options);\n  console.log(\"Timeline chart initialized successfully\");\n}\n\n/**\n * Clear the timeline chart\n */\nexport function clearTimelineChart() {\n  if (timelineChart) {\n    try {\n      timelineChart.destroy();\n      timelineChart = null;\n      console.log(\"Timeline chart cleared\");\n    } catch (error) {\n      console.error(\"Error clearing timeline chart:\", error);\n    }\n  }\n}\n\n/**\n * Destroy existing timeline chart instance\n */\nexport function destroyTimelineChart() {\n  if (timelineChart) {\n    timelineChart.destroy();\n    timelineChart = null;\n    console.log(\"Timeline chart destroyed\");\n  }\n}\n\n/**\n * Update timeline chart with current period\n */\nfunction updateTimelineChartInternal() {\n  console.log(\"Updating timeline chart...\");\n\n  // Destroy existing chart first\n  destroyTimelineChart();\n\n  try {\n    const period = getChartPeriod();\n    console.log(`Updating timeline chart with period: ${period}`);\n\n    const timelineData = calculateTimelineData(period);\n\n    if (!timelineData.hasData) {\n      console.log(\"No valid transaction data for timeline\");\n      showEmptyStateChart();\n      return;\n    }\n\n    // Initialize new chart\n    initializeTimelineChart();\n\n    // Get the chart instance from the canvas\n    const canvas = document.getElementById(\"timelineChart\");\n    timelineChartInstance = canvas ? Chart.getChart(canvas) : null;\n\n    if (!timelineChartInstance) {\n      console.error(\"Could not initialize timeline chart\");\n      return;\n    }\n\n    timelineChartInstance.data.labels = timelineData.labels;\n    timelineChartInstance.data.datasets[0].data = timelineData.income;\n    timelineChartInstance.data.datasets[1].data = timelineData.expenses;\n    timelineChartInstance.update(\"none\");\n\n    console.log(\"Timeline chart updated\");\n  } catch (error) {\n    console.error(\"Error creating timeline chart:\", error);\n    destroyTimelineChart(); // Clean up on error\n  }\n}\n\n/**\n * Updates the timeline chart with transaction data\n */\nfunction refreshTimelineChart(period = \"month\") {\n  const timelineCanvas = document.getElementById(\"timelineChart\");\n  if (!timelineCanvas) return;\n\n  // Check if we have transaction data to display\n  if (!AppState.transactions || AppState.transactions.length === 0) {\n    console.log(\"No valid timeline data to display - showing empty state\");\n    showEmptyStateChart();\n    return;\n  }\n\n  try {\n    // Group transactions by period\n    const groupedData = groupTransactionsByPeriod(\n      AppState.transactions,\n      period\n    );\n    const chartData = formatChartData(groupedData);\n\n    // Ensure layout padding is properly defined to prevent errors\n    const config = {\n      type: \"bar\",\n      data: chartData,\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        layout: {\n          padding: {\n            top: 20,\n            right: 20,\n            bottom: 20,\n            left: 20,\n          },\n        },\n        interaction: {\n          intersect: false,\n          mode: \"index\",\n        },\n        plugins: {\n          tooltip: {\n            enabled: true,\n            position: \"nearest\",\n            callbacks: {\n              label: function (context) {\n                let value = context.raw;\n                let label = context.dataset.label || \"\";\n                if (label) {\n                  label += \": \";\n                }\n                if (typeof value === \"number\") {\n                  return label + value.toFixed(2);\n                }\n                return label + value;\n              },\n            },\n          },\n          legend: {\n            position: \"top\",\n            labels: {\n              color: isDarkMode ? \"#e0e0e0\" : \"#333\",\n              font: {\n                size: 14,\n              },\n            },\n          },\n        },\n        scales: {\n          x: {\n            grid: {\n              color: gridColor,\n            },\n            ticks: {\n              color: textColor,\n              autoSkip: true,\n              maxRotation: 45,\n              minRotation: 0,\n            },\n          },\n          y: {\n            grid: {\n              color: gridColor,\n            },\n            ticks: {\n              color: textColor,\n              // FIX: Use safer number formatting to avoid the RangeError\n              callback: function (value) {\n                if (value % 1 === 0) {\n                  return value.toString();\n                }\n                return value.toFixed(2);\n              },\n            },\n            beginAtZero: true,\n          },\n        },\n      },\n    };\n\n    // Destroy any existing chart instance\n    if (window.timelineChart) {\n      destroyChart(window.timelineChart);\n      window.timelineChart = null;\n    }\n\n    // Create the new chart instance\n    window.timelineChart = new Chart(timelineCanvas, config);\n\n    console.log(\"Timeline chart updated successfully\");\n  } catch (error) {\n    console.error(\"Error creating timeline chart:\", error);\n    showEmptyStateChart();\n  }\n}\n\n/**\n * Shows empty state for timeline chart\n */\nfunction showEmptyStateChart() {\n  console.log(\"No valid timeline data to display - showing empty state\");\n\n  // Destroy any existing chart first\n  destroyTimelineChart();\n\n  try {\n    // Create empty chart\n    initializeTimelineChart();\n\n    // Get the chart instance from the canvas\n    const canvas = document.getElementById(\"timelineChart\");\n    timelineChartInstance = canvas ? Chart.getChart(canvas) : null;\n\n    if (timelineChartInstance) {\n      timelineChartInstance.data.labels = [\"No Data\"];\n      timelineChartInstance.data.datasets[0].data = [0];\n      timelineChartInstance.data.datasets[1].data = [0];\n      timelineChartInstance.update(\"none\");\n    }\n  } catch (error) {\n    console.error(\"Error creating empty state chart:\", error);\n  }\n}\n\n/**\n * Helper function to safely destroy a Chart.js instance\n */\nfunction destroyChartInstance(chart) {\n  if (!chart) return;\n\n  // First check if it's a valid Chart.js instance\n  if (typeof chart.destroy === \"function\") {\n    chart.destroy();\n  } else {\n    // Fallback for invalid instance - try to access the chart's internal canvas\n    try {\n      const chartCanvas = chart?.canvas || chart?.ctx?.canvas;\n      if (chartCanvas?.id) {\n        // Try to find and destroy any Chart.js instance on this canvas\n        const existingChart = Chart.getChart(chartCanvas);\n        if (existingChart && typeof existingChart?.destroy === \"function\") {\n          existingChart.destroy();\n        }\n      }\n    } catch (err) {\n      console.warn(\"Failed to destroy chart via fallback method:\", err);\n    }\n  }\n}\n\n/**\n * Groups transactions by date with the specified granularity\n * @param {Array} transactions - The transactions to group\n * @param {string} period - The period granularity ('month', 'quarter', etc.)\n * @returns {Object} Grouped transactions\n */\nfunction groupTransactionsByPeriod(transactions, period) {\n  const grouped = {};\n\n  transactions.forEach((tx) => {\n    if (!tx.date) return;\n\n    let date = new Date(tx.date);\n    let key;\n\n    // Create the appropriate grouping key based on period\n    switch (period) {\n      case \"year\":\n        key = date.getFullYear().toString();\n        break;\n      case \"half\": {\n        const half = Math.floor(date.getMonth() / 6) + 1;\n        key = `${date.getFullYear()} H${half}`;\n        break;\n      }\n      case \"quarter\": {\n        const quarter = Math.floor(date.getMonth() / 3) + 1;\n        key = `${date.getFullYear()} Q${quarter}`;\n        break;\n      }\n      case \"month\":\n      default: {\n        // Format as YYYY-MM for sorting\n        const month = date.getMonth() + 1;\n        key = `${date.getFullYear()}-${month.toString().padStart(2, \"0\")}`;\n        break;\n      }\n    }\n\n    if (!grouped[key]) {\n      grouped[key] = {\n        income: 0,\n        expenses: 0,\n        date: date,\n        label: formatPeriodLabel(key, period),\n      };\n    }\n\n    if (tx.income) grouped[key].income += parseFloat(tx.income) || 0;\n    if (tx.expenses) grouped[key].expenses += parseFloat(tx.expenses) || 0;\n  });\n\n  return grouped;\n}\n\n/**\n * Formats a period key into a display label\n * @param {string} key - The period key\n * @param {string} period - The period type\n * @returns {string} Formatted label\n */\nfunction formatPeriodLabel(key, period) {\n  switch (period) {\n    case \"year\": {\n      return key; // Already just the year\n    }\n    case \"half\": {\n      return key; // Already formatted as \"YYYY HX\"\n    }\n    case \"quarter\": {\n      return key; // Already formatted as \"YYYY QX\"\n    }\n    case \"month\":\n    default: {\n      // Convert YYYY-MM to more readable format\n      const [year, month] = key.split(\"-\");\n      const date = new Date(parseInt(year), parseInt(month) - 1, 1);\n      return date.toLocaleString(\"default\", {\n        month: \"short\",\n        year: \"numeric\",\n      });\n    }\n  }\n}\n\n/**\n * Get chart options based on selected period\n * @param {string} period - The time period (year, half, quarter, month)\n * @returns {Object} Chart options\n */\nfunction getTimelineOptions(period) {\n  const baseOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    interaction: {\n      intersect: false,\n      mode: \"index\",\n    },\n    plugins: {\n      legend: {\n        position: \"top\",\n      },\n      title: {\n        display: true,\n        text: `Income & Expenses By ${capitalize(period)}`,\n      },\n      tooltip: {\n        callbacks: {\n          label: function (context) {\n            const value = context.raw || 0;\n            return (\n              context.dataset.label +\n              \": $\" +\n              value.toLocaleString(\"en-US\", {\n                minimumFractionDigits: 0,\n                maximumFractionDigits: 2,\n              })\n            );\n          },\n        },\n      },\n    },\n    scales: {\n      y: {\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: \"Amount ($)\",\n        },\n      },\n    },\n  };\n\n  return baseOptions;\n}\n\n/**\n * Initialize period map for a given date range and period type\n * @param {Date} firstDate - Start date\n * @param {Date} lastDate - End date\n * @param {string} period - Period type\n * @returns {Object} Initialized period map\n */\nfunction initializePeriodMap(firstDate, lastDate, period) {\n  const periodMap = {};\n  const months = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ];\n\n  for (\n    let year = firstDate.getFullYear();\n    year <= lastDate.getFullYear();\n    year++\n  ) {\n    if (period === \"year\") {\n      periodMap[year] = { income: 0, expenses: 0 };\n    } else if (period === \"half\") {\n      periodMap[`${year}-1H`] = { income: 0, expenses: 0 };\n      periodMap[`${year}-2H`] = { income: 0, expenses: 0 };\n    } else if (period === \"quarter\") {\n      for (let q = 1; q <= 4; q++) {\n        periodMap[`${year}-Q${q}`] = { income: 0, expenses: 0 };\n      }\n    } else {\n      // month\n      for (let month = 0; month < 12; month++) {\n        periodMap[`${year}-${month}`] = {\n          income: 0,\n          expenses: 0,\n          label: `${months[month]} ${year}`,\n        };\n      }\n    }\n  }\n\n  return periodMap;\n}\n\n/**\n * Create a period key for a transaction based on its date and period type\n * @param {Date} date - Transaction date\n * @param {string} period - Period type\n * @returns {string} Period key\n */\nfunction createPeriodKey(date, period) {\n  const year = date.getFullYear();\n\n  switch (period) {\n    case \"year\":\n      return year.toString();\n    case \"half\":\n      return `${year}-${date.getMonth() < 6 ? \"1H\" : \"2H\"}`;\n    case \"quarter\":\n      return `${year}-Q${Math.floor(date.getMonth() / 3) + 1}`;\n    default: // month\n      return `${year}-${date.getMonth()}`;\n  }\n}\n\n/**\n * Aggregate transaction data by the selected period\n * @param {Array} transactions - The transactions to aggregate\n * @param {string} period - The time period (year, half, quarter, month)\n * @returns {Object} Object containing labels and data arrays\n */\nfunction aggregateByPeriod(transactions, period) {\n  if (!transactions || transactions.length === 0) {\n    return { labels: [], incomeData: [], expenseData: [] };\n  }\n\n  // Sort transactions by date\n  transactions.sort((a, b) => new Date(a.date) - new Date(b.date));\n\n  // Get date range\n  const firstDate = new Date(transactions[0].date);\n  const lastDate = new Date(transactions[transactions.length - 1].date);\n\n  // Initialize period map\n  const periodMap = initializePeriodMap(firstDate, lastDate, period);\n\n  // Aggregate data\n  transactions.forEach((tx) => {\n    const date = new Date(tx.date);\n    const key = createPeriodKey(date, period);\n\n    if (periodMap[key]) {\n      periodMap[key].income += parseFloat(tx.income || 0);\n      periodMap[key].expenses += parseFloat(tx.expenses || 0);\n    }\n  });\n\n  // Convert to arrays for chart\n  const periods = Object.keys(periodMap).sort((a, b) => a.localeCompare(b));\n  const labels = periods.map((p) =>\n    period === \"month\" ? periodMap[p].label : p\n  );\n  const incomeData = periods.map((p) => periodMap[p].income);\n  const expenseData = periods.map((p) => periodMap[p].expenses);\n\n  return { labels, incomeData, expenseData };\n}\n\n/**\n * Capitalizes the first letter of a string\n */\nfunction capitalize(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n/**\n * Cleans up the timeline chart\n */\nexport function cleanupTimelineChart() {\n  timelineChart = destroyChart(timelineChart);\n}\n\n// Keep only one declaration of each function\nfunction getPeriodLabel(date, period) {\n  // Implementation\n  const d = new Date(date);\n  switch (period) {\n    case \"year\":\n      return d.getFullYear().toString();\n    case \"half\":\n      return `${d.getFullYear()} ${d.getMonth() < 6 ? \"H1\" : \"H2\"}`;\n    case \"quarter\":\n      return `${d.getFullYear()} Q${Math.floor(d.getMonth() / 3) + 1}`;\n    case \"month\":\n      return `${d.getFullYear()}-${(d.getMonth() + 1)\n        .toString()\n        .padStart(2, \"0\")}`;\n    default:\n      return date;\n  }\n}\n\n/**\n * Renders the timeline chart\n * @param {Array} data - The transaction data to render\n */\nfunction renderTimelineChart(data) {\n  const groupedData = groupTransactionsByPeriod(data, \"month\");\n  const chartData = formatChartData(groupedData);\n  // Find canvas and create chart with basic options\n  const canvas = document.getElementById(\"timelineChart\");\n  if (!canvas) return;\n  createChart(canvas, \"line\", chartData, getTimelineOptions(\"month\"));\n}\n\n/**\n * Prepares transaction data for timeline visualization with period options\n * @param {Array} transactions - The transaction data to display\n * @param {string} periodOption - The time period option (month, quarter, year)\n * @returns {Object} Object with labels, incomeData, and expensesData arrays\n */\nfunction prepareTimelineDataWithPeriod(transactions, periodOption = \"month\") {\n  // Default empty results\n  const result = {\n    labels: [],\n    incomeData: [],\n    expensesData: [],\n  };\n\n  if (\n    !transactions ||\n    !Array.isArray(transactions) ||\n    transactions.length === 0\n  ) {\n    // Use info level logging instead of warning for expected empty state\n    console.log(\"No valid transaction data for timeline\");\n    return result;\n  }\n\n  try {\n    // Group transactions by period\n    const periodData = {};\n\n    // Process each transaction\n    transactions.forEach((tx) => {\n      if (!tx.date) return;\n\n      // Parse the transaction date\n      const txDate = new Date(tx.date);\n      if (isNaN(txDate.getTime())) return;\n\n      // Get period key based on selected periodOption\n      const periodKey = getPeriodKey(txDate, periodOption);\n\n      // Initialize period if it doesn't exist\n      if (!periodData[periodKey]) {\n        periodData[periodKey] = {\n          income: 0,\n          expenses: 0,\n        };\n      }\n\n      // Add income and expenses\n      if (tx?.income && !isNaN(parseFloat(tx.income))) {\n        periodData[periodKey].income += parseFloat(tx.income);\n      }\n\n      if (tx?.expenses && !isNaN(parseFloat(tx.expenses))) {\n        periodData[periodKey].expenses += parseFloat(tx.expenses);\n      }\n    });\n\n    // Sort periods chronologically\n    const sortedPeriods = Object.keys(periodData).sort((a, b) => {\n      return new Date(a) - new Date(b);\n    });\n\n    // Generate final data arrays\n    result.labels = sortedPeriods.map((period) =>\n      formatPeriodDisplayLabel(period, periodOption)\n    );\n    result.incomeData = sortedPeriods.map(\n      (period) => periodData[period].income\n    );\n    result.expensesData = sortedPeriods.map(\n      (period) => periodData[period].expenses\n    );\n\n    return result;\n  } catch (error) {\n    console.error(\"Error preparing timeline data:\", error);\n    return result;\n  }\n}\n\n/**\n * Gets period key for grouping transactions\n * @param {Date} date - The transaction date\n * @param {string} periodOption - The selected period (month, quarter, year)\n * @returns {string} The period key\n */\nfunction getPeriodKey(date, periodOption) {\n  const year = date.getFullYear();\n  const month = date.getMonth() + 1; // 1-based month\n\n  switch (periodOption) {\n    case \"year\":\n      return `${year}`;\n\n    case \"quarter\": {\n      const quarter = Math.ceil(month / 3);\n      return `${year}-Q${quarter}`;\n    }\n\n    case \"half\": {\n      const half = month <= 6 ? 1 : 2;\n      return `${year}-H${half}`;\n    }\n\n    case \"month\":\n    default:\n      return `${year}-${month.toString().padStart(2, \"0\")}`;\n  }\n}\n\n/**\n * Formats period key into readable label\n * @param {string} periodKey - The period key\n * @param {string} periodOption - The selected period type\n * @returns {string} Formatted label\n */\nfunction formatPeriodDisplayLabel(periodKey, periodOption) {\n  if (periodOption === \"year\") {\n    return periodKey;\n  }\n\n  if (periodOption === \"quarter\") {\n    const [year, quarter] = periodKey.split(\"-\");\n    return `${quarter} ${year}`;\n  }\n\n  if (periodOption === \"half\") {\n    const [year, half] = periodKey.split(\"-\");\n    return `${half === \"H1\" ? \"Jan-Jun\" : \"Jul-Dec\"} ${year}`;\n  }\n\n  // Default: month\n  const [year, month] = periodKey.split(\"-\");\n  const date = new Date(parseInt(year), parseInt(month) - 1, 1);\n\n  return date.toLocaleDateString(undefined, {\n    month: \"short\",\n    year: \"numeric\",\n  });\n}\n\n/**\n * Creates the timeline chart\n */\nexport async function createTimelineChart() {\n  console.log(\"Creating timeline chart...\");\n\n  try {\n    // Use global Chart.js (loaded via CDN in HTML)\n    if (typeof Chart === \"undefined\") {\n      throw new Error(\"Chart.js is not loaded\");\n    }\n\n    const canvas = document.getElementById(\"timelineChart\");\n    if (!canvas) {\n      console.warn(\"Timeline chart canvas not found\");\n      return null;\n    }\n\n    // Destroy existing chart\n    if (window.timelineChartInstance) {\n      window.timelineChartInstance.destroy();\n    }\n\n    // Get chart data\n  const data = getTimelineData();\n\n    if (!data || data.labels.length === 0) {\n      showNoDataMessage(canvas);\n      return null;\n    }\n\n    // Create the chart\n    const chartInstance = new Chart(canvas, {\n      type: \"line\",\n      data: {\n        labels: data.labels,\n        datasets: [\n          {\n            label: \"Income\",\n            data: data.income,\n            borderColor: \"#4CAF50\",\n            backgroundColor: \"rgba(76, 175, 80, 0.1)\",\n            fill: false,\n            tension: 0.4,\n          },\n          {\n            label: \"Expenses\",\n            data: data.expenses,\n            borderColor: \"#f44336\",\n            backgroundColor: \"rgba(244, 67, 54, 0.1)\",\n            fill: false,\n            tension: 0.4,\n          },\n        ],\n      },\n      options: getTimelineOptions(\"month\"),\n    });\n\n    // Store reference\n    window.timelineChartInstance = chartInstance;\n\n    console.log(\"Γ£ô timeline chart created successfully\");\n    return chartInstance;\n  } catch (error) {\n    console.error(\"Γ¥î Error creating timeline chart:\", error);\n    return null;\n  }\n}\n\n// Initialize the timeline chart when the page loads\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  // Set up period selector\n  const periodSelect = document.getElementById(\"timelineChartPeriod\");\n  if (periodSelect) {\n    periodSelect.addEventListener(\"change\", function () {\n      // Only update if we have transactions\n      if (AppState.transactions?.length > 0) {\n        refreshTimelineChart(this.value);\n      }\n    });\n  }\n\n  // Initial render will happen when transactions are loaded\n});\n\n// Export functions for use in other modules\nexport { renderTimelineChart, groupTransactionsByPeriod, getPeriodLabel };\n\n/**\n * Format numbers safely for chart labels\n * @param {number} value - The value to format\n * @returns {string} Formatted value\n */\nfunction safeFormatNumber(value) {\n  if (typeof value !== \"number\") return value;\n\n  try {\n    // Use simple toFixed for formatting to avoid locale issues\n    return value.toFixed(2);\n  } catch (err) {\n    // Log the error and provide context for debugging\n    console.warn(\"Error formatting number value:\", err, value);\n    // Fallback to basic string conversion\n    return String(value);\n  }\n}\n\n/**\n * Process timeline data from transactions\n * @param {Array} transactions - Array of transactions\n * @returns {Object} Processed timeline data with dd/mm/yyyy formatted labels\n */\nfunction processTimelineData(transactions) {\n  const timelineData = {\n    labels: [],\n    incomeData: [],\n    expenseData: [],\n  };\n\n  if (!transactions || !Array.isArray(transactions)) {\n    return timelineData;\n  }\n\n  // Group transactions by date\n  const dailyTotals = {};\n\n  transactions.forEach((transaction) => {\n    const date = transaction.date;\n    if (!date) return;\n\n    // FIXED: Use formatDateToDDMMYYYY for consistent date format\n    const formattedDate = formatDateToDDMMYYYY(date);\n    if (!formattedDate) return;\n\n    if (!dailyTotals[formattedDate]) {\n      dailyTotals[formattedDate] = { income: 0, expenses: 0 };\n    }\n\n    const income = parseFloat(transaction.income || 0);\n    const expenses = parseFloat(transaction.expenses || 0);\n\n    dailyTotals[formattedDate].income += income;\n    dailyTotals[formattedDate].expenses += expenses;\n  });\n\n  // Sort dates and prepare data arrays\n  const sortedDates = Object.keys(dailyTotals).sort((a, b) => {\n    // Convert back to Date objects for proper sorting\n  const dateA = parseDDMMYYYY(a);\n  const dateB = parseDDMMYYYY(b);\n    return dateA - dateB;\n  });\n\n  timelineData.labels = sortedDates;\n  timelineData.incomeData = sortedDates.map((date) => dailyTotals[date].income);\n  timelineData.expenseData = sortedDates.map(\n    (date) => dailyTotals[date].expenses\n  );\n\n  return timelineData;\n}\n\n/**\n * Get current chart period from UI\n */\nfunction getChartPeriod() {\n  const periodSelect = document.getElementById(\"timelineChartPeriod\");\n  return periodSelect ? periodSelect.value : \"month\";\n}\n\n/**\n * Calculate timeline data for given period\n */\nfunction calculateTimelineData(period) {\n  const transactions = AppState.transactions || [];\n\n  if (!transactions.length) {\n    return { hasData: false, labels: [], income: [], expenses: [] };\n  }\n\n  const data = processTimelineData(transactions);\n  return {\n    hasData: data.labels.length > 0,\n    labels: data.labels,\n    income: data.incomeData,\n    expenses: data.expenseData,\n  };\n}\n\n/**\n * Store chart instance safely\n */\nfunction storeChartInstance(chartType, instance) {\n  if (chartType === \"timeline\") {\n    timelineChart = instance;\n  }\n}\n\n/**\n * Get timeline data for chart\n */\nfunction getTimelineData() {\n  const transactions = AppState.transactions || [];\n  return processTimelineData(transactions);\n}\n\n/**\n * Show no data message on canvas\n */\nfunction showNoDataMessage(canvas, message = \"No data available\") {\n  const ctx = canvas.getContext(\"2d\");\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.textAlign = \"center\";\n  ctx.textBaseline = \"middle\";\n  ctx.fillStyle = \"#666\";\n  ctx.font = \"14px Arial\";\n  ctx.fillText(message, canvas.width / 2, canvas.height / 2);\n}\n\n/**\n * Formats grouped data into Chart.js data structure\n * @param {Object} groupedData - Map of label -> { income, expenses }\n * @returns {Object} Chart.js data object\n */\nfunction formatChartData(groupedData) {\n  const labels = Object.keys(groupedData).sort((a, b) => a.localeCompare(b));\n  const income = labels.map((k) => groupedData[k].income || 0);\n  const expenses = labels.map((k) => groupedData[k].expenses || 0);\n\n  return {\n    labels,\n    datasets: [\n      {\n        label: \"Income\",\n        data: income,\n        borderColor: \"#4CAF50\",\n        backgroundColor: \"rgba(76, 175, 80, 0.1)\",\n        tension: 0.1,\n        fill: false,\n      },\n      {\n        label: \"Expenses\",\n        data: expenses,\n        borderColor: \"#F44336\",\n        backgroundColor: \"rgba(244, 67, 54, 0.1)\",\n        tension: 0.1,\n        fill: false,\n      },\n    ],\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\components\\FileUploader.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":39,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":39,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1036,1096],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { handleFileUpload } from \"../parsers/fileHandler.js\";\n\nexport class FileUploader {\n  constructor(fileInputId, onSuccess, onError) {\n    this.fileInputId = fileInputId;\n    this.onSuccess = onSuccess || this.defaultSuccess;\n    this.onError = onError || this.defaultError;\n    this.initialize();\n  }\n\n  initialize() {\n    const fileInput = document.getElementById(this.fileInputId);\n    if (!fileInput) {\n      console.error(`File input with ID ${this.fileInputId} not found`);\n      return;\n    }\n\n    fileInput.addEventListener(\"change\", this.handleFileChange.bind(this));\n  }\n\n  handleFileChange(event) {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    // Reset input so the same file can be selected again\n    event.target.value = \"\";\n\n    // Process the file\n    handleFileUpload(file)\n      .then((data) => {\n        if (this.onSuccess) this.onSuccess(data, file);\n      })\n      .catch((error) => {\n        if (this.onError) this.onError(error, file);\n      });\n  }\n\n  defaultSuccess(data, file) {\n    console.log(`File ${file.name} parsed successfully:`, data);\n  }\n\n  defaultError(error, file) {\n    console.error(`Error processing file ${file.name}:`, error);\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\constants\\categories.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\constants\\currencies.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\constants\\fieldMappings.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\core\\appState.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":24,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":24,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[512,552],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":31,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":31,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[769,873],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":37,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":47},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":45,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":45,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1148,1249],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":59,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":59,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1566,1680],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":68,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":68,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1890,1990],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":77,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":77,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2220,2271],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":83,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":83,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2391,2440],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":95,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":95,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2642,2691],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":102,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":102,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2883,2949],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":114,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":114,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3305,3406],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":119,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":119,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3548,3640],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":132,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":132,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3926,4030],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":154,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":154,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4545,4655],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":160,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":160,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4719,4791],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":163,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":163,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4932,5057],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":175,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":175,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5276,5471],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":185,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":185,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5628,5692],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":217,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":217,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6346,6406],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'rebuildTransactionsFromFiles' is defined but never used.","line":224,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":224,"endColumn":38},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":225,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":225,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6637,6697],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":253,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":253,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7434,7522],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":262,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":262,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7625,7690],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":269,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":269,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7883,8000],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":283,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":283,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8236,8292],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":294,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":294,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8546,8671],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":310,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":310,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8947,8995],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":322,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":322,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9249,9299],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":334,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":334,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9558,9608],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":349,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":349,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9960,9992],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":366,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":366,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10360,10400],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":379,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":379,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10638,10680],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":396,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":396,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10977,11019],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":431,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":431,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11826,11867],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":438,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":438,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11956,12010],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":445,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":445,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12209,12313],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":453,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":453,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12454,12561],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":458,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":458,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12600,12892],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":475,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":475,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13092,13192],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":484,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":484,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13377,13428],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":40,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { DEFAULT_CATEGORIES } from \"../constants/categories.js\";\n\n/**\n * Application State Management\n * Centralized state management for the expense tracker application\n */\n\n// Global application state\nexport const AppState = {\n  transactions: [],\n  mergedFiles: [],\n  categories: {},\n  currentFileName: null,\n  currentPreviewData: null,\n  currentFileSignature: null,\n  currentSuggestedMapping: null,\n  currentPreviewModal: null,\n};\n\n/**\n * Initialize the application state\n */\nexport function initialize() {\n  console.log(\"Initializing AppState...\");\n\n  try {\n    // Load transactions from localStorage\n    const savedTransactions = localStorage.getItem(\"transactions\");\n    if (savedTransactions) {\n      AppState.transactions = JSON.parse(savedTransactions);\n      console.log(\n        `Γ£à LOADED: ${AppState.transactions.length} transactions from localStorage`\n      );\n\n      // Ensure all transactions have IDs\n      let idsAdded = 0;\n      AppState.transactions.forEach((tx, index) => {\n        if (!tx.id) {\n          tx.id = `tx_${Date.now()}_${Math.random()}`;\n          idsAdded++;\n        }\n      });\n\n      if (idsAdded > 0) {\n        console.log(\n          `≡ƒô¥ EDITED TRANSACTIONS: Added ${idsAdded} missing transaction IDs`\n        );\n        // Save back to localStorage with IDs\n        localStorage.setItem(\n          \"transactions\",\n          JSON.stringify(AppState.transactions)\n        );\n      }\n\n      // Count edited transactions\n      const editedTransactions = AppState.transactions.filter(\n        (tx) => tx.edited\n      ).length;\n      console.log(\n        `≡ƒô¥ EDITED TRANSACTIONS: Found ${editedTransactions} edited transactions after load`\n      );\n    }\n\n    // Load merged files from localStorage\n    const savedMergedFiles = localStorage.getItem(\"mergedFiles\");\n    if (savedMergedFiles) {\n      AppState.mergedFiles = JSON.parse(savedMergedFiles);\n      console.log(\n        `Loaded ${AppState.mergedFiles.length} merged files from localStorage`\n      );\n    }\n\n    // FIXED: Load categories from localStorage with consistent key\n    const savedCategories = localStorage.getItem(\"categories\");\n    if (savedCategories) {\n      AppState.categories = JSON.parse(savedCategories);\n      console.log(`Loaded categories from localStorage`);\n    } else {\n      // Initialize with default categories if none exist\n      initializeDefaultCategories();\n    }\n\n    console.log(\"AppState initialized successfully\");\n    return true;\n  } catch (error) {\n    console.error(\"Error initializing AppState:\", error);\n    return false;\n  }\n}\n\n/**\n * Initialize application state\n */\nexport function initializeAppState() {\n  console.log(\"Initializing application state...\");\n\n  // Load merged files\n  try {\n    const savedMergedFiles = localStorage.getItem(\"mergedFiles\");\n    if (savedMergedFiles) {\n      AppState.mergedFiles = JSON.parse(savedMergedFiles);\n      console.log(`Loaded ${AppState.mergedFiles.length} merged files`);\n    }\n  } catch (error) {\n    console.error(\"Error loading merged files:\", error);\n    AppState.mergedFiles = [];\n  }\n\n  // CRITICAL FIX: Load transactions directly from localStorage\n  try {\n    const savedTransactions = localStorage.getItem(\"transactions\");\n    if (savedTransactions) {\n      AppState.transactions = JSON.parse(savedTransactions);\n      console.log(\n        `Loaded ${AppState.transactions.length} transactions from localStorage`\n      );\n    } else if (AppState.mergedFiles && AppState.mergedFiles.length > 0) {\n      // If no saved transactions, process from merged files\n      console.log(\n        \"No saved transactions found, processing from merged files...\"\n      );\n      AppState.transactions = [];\n\n      AppState.mergedFiles.forEach((file) => {\n        if (file.transactions && Array.isArray(file.transactions)) {\n          AppState.transactions = AppState.transactions.concat(\n            file.transactions\n          );\n        }\n      });\n\n      console.log(\n        `Processed ${AppState.transactions.length} transactions from merged files`\n      );\n\n      // Save the processed transactions\n      if (AppState.transactions.length > 0) {\n        localStorage.setItem(\n          \"transactions\",\n          JSON.stringify(AppState.transactions)\n        );\n      }\n    }\n  } catch (error) {\n    console.error(\"Error loading transactions:\", error);\n    AppState.transactions = [];\n  }\n\n  // Load categories\n  try {\n    const savedCategories = localStorage.getItem(\"categories\");\n    if (savedCategories) {\n      AppState.categories = JSON.parse(savedCategories);\n      console.log(\n        `Loaded categories from localStorage:`,\n        Object.keys(AppState.categories)\n      );\n    } else {\n      // Initialize with default categories\n      console.log(\"No saved categories found, initializing with defaults...\");\n      AppState.categories = { ...DEFAULT_CATEGORIES };\n      localStorage.setItem(\"categories\", JSON.stringify(AppState.categories));\n      console.log(\n        `Initialized ${\n          Object.keys(AppState.categories).length\n        } default categories`\n      );\n    }\n  } catch (error) {\n    console.error(\"Error loading categories:\", error);\n    AppState.categories = { ...DEFAULT_CATEGORIES };\n    localStorage.setItem(\"categories\", JSON.stringify(AppState.categories));\n  }\n\n  console.log(\"AppState initialized:\", {\n    transactions: AppState.transactions.length,\n    mergedFiles: AppState.mergedFiles.length,\n    categories: Object.keys(AppState.categories).length,\n  });\n}\n\n// FIXED: Add function to set current file signature\nexport function setCurrentFileSignature(signature) {\n  AppState.currentFileSignature = signature;\n  console.log(\"CRITICAL: Set current file signature:\", signature);\n}\n\n/**\n * Ensure all transactions in AppState have unique IDs\n */\nexport function ensureAllTransactionIds() {\n  if (!AppState.transactions || !Array.isArray(AppState.transactions)) {\n    return;\n  }\n\n  const usedIds = new Set();\n  let idsAdded = 0;\n\n  AppState.transactions.forEach((tx, index) => {\n    if (!tx.id || usedIds.has(tx.id)) {\n      // Generate new unique ID\n      let newId;\n      do {\n        newId = `tx_${Date.now()}_${Math.random()\n          .toString(36)\n          .substring(2, 11)}_${index}`;\n      } while (usedIds.has(newId));\n\n      tx.id = newId;\n      idsAdded++;\n    }\n\n    usedIds.add(tx.id);\n  });\n\n  if (idsAdded > 0) {\n    console.log(`Added ${idsAdded} unique IDs to transactions`);\n    // Save updated transactions\n    localStorage.setItem(\"transactions\", JSON.stringify(AppState.transactions));\n  }\n}\n\n// FIXED: Add function to rebuild transactions from merged files\nfunction rebuildTransactionsFromFiles() {\n  console.log(\"Rebuilding transactions from merged files...\");\n\n  let allTransactions = [];\n\n  AppState.mergedFiles.forEach((file) => {\n    if (file.transactions && Array.isArray(file.transactions)) {\n      allTransactions = allTransactions.concat(file.transactions);\n    }\n  });\n\n  // Ensure all transactions have unique IDs\n  const usedIds = new Set();\n  allTransactions.forEach((tx, index) => {\n    if (!tx.id || usedIds.has(tx.id)) {\n      let newId;\n      do {\n        newId = `tx_${Date.now()}_${Math.random()\n          .toString(36)\n          .substring(2, 11)}_${index}`;\n      } while (usedIds.has(newId));\n      tx.id = newId;\n    }\n    usedIds.add(tx.id);\n  });\n\n  AppState.transactions = allTransactions;\n  localStorage.setItem(\"transactions\", JSON.stringify(AppState.transactions));\n\n  console.log(\n    `Rebuilt ${allTransactions.length} transactions from merged files`\n  );\n}\n\n/**\n * Initialize default categories from constants\n */\nfunction initializeDefaultCategories() {\n  console.log(\"Initializing default categories from constants...\");\n\n  // Use the imported DEFAULT_CATEGORIES directly\n  AppState.categories = { ...DEFAULT_CATEGORIES };\n\n  try {\n    localStorage.setItem(\"categories\", JSON.stringify(AppState.categories));\n    console.log(\n      `Initialized ${\n        Object.keys(AppState.categories).length\n      } default categories`\n    );\n  } catch (error) {\n    console.error(\"Error saving default categories to localStorage:\", error);\n  }\n}\n\n/**\n * FIXED: Force reset to default categories (called during app reset)\n */\nexport function forceResetToDefaultCategories() {\n  console.log(\"Force resetting to default categories...\");\n\n  // Clear existing categories\n  AppState.categories = {};\n\n  // Load default categories\n  AppState.categories = { ...DEFAULT_CATEGORIES };\n\n  // Save immediately\n  try {\n    localStorage.setItem(\"categories\", JSON.stringify(AppState.categories));\n    console.log(\n      `Force reset: Loaded ${\n        Object.keys(AppState.categories).length\n      } default categories`\n    );\n  } catch (error) {\n    console.error(\"Error saving default categories during force reset:\", error);\n  }\n}\n\n/**\n * Save categories to localStorage\n */\nexport function saveCategories() {\n  try {\n    localStorage.setItem(\"categories\", JSON.stringify(AppState.categories));\n    console.log(\"Categories saved to localStorage\");\n  } catch (error) {\n    console.error(\"Error saving categories:\", error);\n  }\n}\n\n/**\n * Save merged files to localStorage\n */\nexport function saveMergedFiles() {\n  try {\n    localStorage.setItem(\"mergedFiles\", JSON.stringify(AppState.mergedFiles));\n    console.log(\"Merged files saved to localStorage\");\n  } catch (error) {\n    console.error(\"Error saving merged files:\", error);\n  }\n}\n\n/**\n * Save transactions to localStorage\n */\nexport function saveTransactions() {\n  try {\n    localStorage.setItem(\"transactions\", JSON.stringify(AppState.transactions));\n    console.log(\"Transactions saved to localStorage\");\n  } catch (error) {\n    console.error(\"Error saving transactions:\", error);\n  }\n}\n\n/**\n * Reset file-related state\n */\nexport function resetFileState() {\n  AppState.currentFileName = null;\n  AppState.currentPreviewData = null;\n  AppState.currentFileSignature = null;\n  AppState.currentSuggestedMapping = null;\n  AppState.currentPreviewModal = null;\n  console.log(\"File state reset\");\n}\n\n/**\n * Add a category to the state\n */\nexport function addCategory(name, color, order) {\n  if (!name || typeof name !== \"string\") {\n    throw new Error(\"Category name is required and must be a string\");\n  }\n\n  AppState.categories[name] = {\n    color: color || \"#cccccc\",\n    order: order || Object.keys(AppState.categories).length + 1,\n  };\n\n  saveCategories();\n  console.log(`Category '${name}' added`);\n}\n\n/**\n * Remove a category from the state\n */\nexport function removeCategory(name) {\n  if (!name || !AppState.categories[name]) {\n    throw new Error(\"Category not found\");\n  }\n\n  delete AppState.categories[name];\n  saveCategories();\n  console.log(`Category '${name}' removed`);\n}\n\n/**\n * Update a category in the state\n */\nexport function updateCategory(name, updates) {\n  if (!name || !AppState.categories[name]) {\n    throw new Error(\"Category not found\");\n  }\n\n  AppState.categories[name] = {\n    ...AppState.categories[name],\n    ...updates,\n  };\n\n  saveCategories();\n  console.log(`Category '${name}' updated`);\n}\n\n/**\n * Get all categories sorted by order\n */\nexport function getCategories() {\n  return Object.entries(AppState.categories)\n    .sort(([, a], [, b]) => {\n      const orderA =\n        typeof a === \"object\" && a.order !== undefined ? a.order : 999;\n      const orderB =\n        typeof b === \"object\" && b.order !== undefined ? b.order : 999;\n      return orderA - orderB;\n    })\n    .reduce((acc, [name, data]) => {\n      acc[name] = data;\n      return acc;\n    }, {});\n}\n\n/**\n * Clear all application state\n */\nexport function clearState() {\n  AppState.transactions = [];\n  AppState.mergedFiles = [];\n  AppState.categories = {};\n  resetFileState();\n\n  // Clear localStorage\n  localStorage.removeItem(\"transactions\");\n  localStorage.removeItem(\"mergedFiles\");\n  localStorage.removeItem(\"categories\");\n\n  console.log(\"Application state cleared\");\n}\n\n/**\n * Load app state from localStorage\n */\nexport async function loadAppState() {\n  console.log(\"Loading app state from localStorage...\");\n\n  try {\n    // Load transactions\n    const savedTransactions = localStorage.getItem(\"transactions\");\n    if (savedTransactions) {\n      AppState.transactions = JSON.parse(savedTransactions);\n      console.log(\n        `Γ£à LOADED: ${AppState.transactions.length} transactions from localStorage`\n      );\n\n      // Count edited transactions\n      const editedCount = AppState.transactions.filter(\n        (tx) => tx.edited\n      ).length;\n      console.log(\n        `≡ƒô¥ EDITED TRANSACTIONS: Found ${editedCount} edited transactions after load`\n      );\n\n      if (editedCount > 0) {\n        console.log(\n          `≡ƒöì EDITED TX DETAILS:`,\n          AppState.transactions\n            .filter((tx) => tx.edited)\n            .map((tx) => ({\n              id: tx.id,\n              description: tx.description?.substring(0, 30),\n              edited: tx.edited,\n            }))\n        );\n      }\n    }\n\n    // Load merged files\n    const savedMergedFiles = localStorage.getItem(\"mergedFiles\");\n    if (savedMergedFiles) {\n      AppState.mergedFiles = JSON.parse(savedMergedFiles);\n      console.log(\n        `Loaded ${AppState.mergedFiles.length} merged files from localStorage`\n      );\n    }\n\n    // Load categories\n    const savedCategories = localStorage.getItem(\"categories\");\n    if (savedCategories) {\n      AppState.categories = JSON.parse(savedCategories);\n      console.log(`Loaded categories from localStorage`);\n    }\n  } catch (error) {\n    console.error(\"Error loading app state:\", error);\n  }\n}\n\n// Export AppState as default for compatibility\nexport default AppState;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\core\\debug.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":22,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":22,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[654,692],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":25,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":25,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[758,797],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Enhanced existing debug functionality\nexport function initializeDebugMode() {\n  const debugToggle = document.getElementById(\"debugModeToggle\");\n\n  if (debugToggle) {\n    // Load saved debug state\n    const savedDebugMode = localStorage.getItem(\"debugMode\") === \"true\";\n    debugToggle.checked = savedDebugMode;\n    applyDebugMode(savedDebugMode);\n\n    debugToggle.addEventListener(\"change\", (e) => {\n      const isDebugMode = e.target.checked;\n      localStorage.setItem(\"debugMode\", isDebugMode);\n      applyDebugMode(isDebugMode);\n    });\n  }\n}\n\nfunction applyDebugMode(enabled) {\n  if (enabled) {\n    document.body.classList.add(\"debug-mode\");\n    console.log(\"≡ƒÉ¢ Debug mode: ENABLED\");\n  } else {\n    document.body.classList.remove(\"debug-mode\");\n    console.log(\"≡ƒÉ¢ Debug mode: DISABLED\");\n  }\n}\n\n// Export existing debug functions\nexport {\n  debugFiles,\n  debugSignatures,\n  debugTransactions,\n  saveDebugLog,\n  resetApplication,\n} from \"./existing-debug-functions.js\";\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\core\\debugManager.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":31,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":31,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[946,989],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":40,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":40,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1151,1189],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":41,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":41,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1194,1232],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":44,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":44,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1298,1337],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":66,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":66,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"group"},"fix":{"range":[1843,1888],"text":""},"desc":"Remove the console.group()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":67,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":67,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1893,1943],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":68,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":68,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"table"},"fix":{"range":[1948,1979],"text":""},"desc":"Remove the console.table()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":69,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":69,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"groupEnd"},"fix":{"range":[1984,2003],"text":""},"desc":"Remove the console.groupEnd()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":90,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":90,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"group"},"fix":{"range":[2520,2562],"text":""},"desc":"Remove the console.group()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":91,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":91,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"table"},"fix":{"range":[2567,2593],"text":""},"desc":"Remove the console.table()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":92,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":92,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"groupEnd"},"fix":{"range":[2598,2617],"text":""},"desc":"Remove the console.groupEnd()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":178,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":178,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"group"},"fix":{"range":[4771,4822],"text":""},"desc":"Remove the console.group()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":179,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":179,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4827,4891],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":180,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":180,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4896,5158],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":186,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":186,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5163,5205],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":187,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":187,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5210,5260],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":188,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":188,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5265,5551],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":196,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":196,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5556,5824],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":203,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":203,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"groupEnd"},"fix":{"range":[5829,5848],"text":""},"desc":"Remove the console.groupEnd()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":287,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":287,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8136,8272],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":323,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":323,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9367,9480],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AppState } from \"./appState.js\";\nimport { showToast } from \"../ui/uiManager.js\";\nimport { DEFAULT_CATEGORIES } from \"../constants/categories.js\";\n\n/**\n * Initialize debug mode functionality\n */\nexport function initializeDebugMode() {\n  const debugToggle = document.getElementById(\"debugModeToggle\");\n  if (debugToggle) {\n    // Load saved debug mode state\n    const savedDebugMode = localStorage.getItem(\"debugMode\") === \"true\";\n    debugToggle.checked = savedDebugMode;\n    updateDebugMode(savedDebugMode);\n\n    // Add event listener for debug mode toggle\n    debugToggle.addEventListener(\"change\", (e) => {\n      const isDebugMode = e.target.checked;\n      localStorage.setItem(\"debugMode\", isDebugMode);\n      updateDebugMode(isDebugMode);\n\n      showToast(\n        isDebugMode ? \"≡ƒÉ¢ Debug mode enabled\" : \"≡ƒÉ¢ Debug mode disabled\",\n        \"info\"\n      );\n    });\n  } else {\n    console.warn(\"Debug toggle element not found\");\n  }\n\n  console.log(\"Γ£à Debug manager initialized\");\n}\n\n/**\n * Update debug mode UI and functionality\n */\nfunction updateDebugMode(isEnabled) {\n  if (isEnabled) {\n    document.body.classList.add(\"debug-mode\");\n    console.log(\"≡ƒÉ¢ Debug mode: ENABLED\");\n    console.log(\"≡ƒôè AppState:\", AppState);\n  } else {\n    document.body.classList.remove(\"debug-mode\");\n    console.log(\"≡ƒÉ¢ Debug mode: DISABLED\");\n  }\n}\n\n/**\n * Debug files information\n */\nexport function debugFiles() {\n  try {\n    const mergedFiles = AppState.mergedFiles || [];\n    const debugInfo = {\n      totalFiles: mergedFiles.length,\n      files: mergedFiles.map((file) => ({\n        fileName: file.fileName,\n        signature: file.signature,\n        currency: file.currency,\n        transactionCount: file.transactions?.length || 0,\n        dateProcessed: file.dateProcessed,\n        headerMapping: file.headerMapping,\n      })),\n    };\n\n    console.group(\"≡ƒùé∩╕Å Debug Files Information\");\n    console.log(\"Total Files:\", debugInfo.totalFiles);\n    console.table(debugInfo.files);\n    console.groupEnd();\n\n    showToast(`Debug: ${debugInfo.totalFiles} files analyzed`, \"info\");\n  } catch (error) {\n    console.error(\"Γ¥î Error in debug files:\", error);\n    showToast(\"Error debugging files\", \"error\");\n  }\n}\n\n/**\n * Debug signatures information\n */\nexport function debugSignatures() {\n  try {\n    const mergedFiles = AppState.mergedFiles || [];\n    const signatures = mergedFiles.map((file) => ({\n      fileName: file.fileName,\n      signature: file.signature,\n      columns: file.headerMapping?.length || 0,\n    }));\n\n    console.group(\"≡ƒöì Debug File Signatures\");\n    console.table(signatures);\n    console.groupEnd();\n\n    showToast(`Debug: ${signatures.length} signatures analyzed`, \"info\");\n  } catch (error) {\n    console.error(\"Γ¥î Error in debug signatures:\", error);\n    showToast(\"Error debugging signatures\", \"error\");\n  }\n}\n\n/**\n * Debug transactions information\n */\nexport function debugTransactions() {\n  try {\n    const transactions = AppState.transactions || [];\n    const debugInfo = {\n      totalTransactions: transactions.length,\n      byFile: {},\n      byCategory: {},\n      dateRange: {\n        earliest: null,\n        latest: null,\n      },\n      amounts: {\n        totalIncome: 0,\n        totalExpenses: 0,\n      },\n      idConsistency: {\n        withIds: 0,\n        withoutIds: 0,\n        duplicateIds: 0,\n        uniqueIds: new Set(),\n      },\n    };\n\n    const seenIds = new Set();\n\n    // Analyze transactions\n    transactions.forEach((tx) => {\n      // ID consistency analysis\n      if (tx.id) {\n        debugInfo.idConsistency.withIds++;\n        if (seenIds.has(tx.id)) {\n          debugInfo.idConsistency.duplicateIds++;\n        } else {\n          seenIds.add(tx.id);\n          debugInfo.idConsistency.uniqueIds.add(tx.id);\n        }\n      } else {\n        debugInfo.idConsistency.withoutIds++;\n      }\n\n      // By file\n      if (tx.fileName) {\n        debugInfo.byFile[tx.fileName] =\n          (debugInfo.byFile[tx.fileName] || 0) + 1;\n      }\n\n      // By category\n      const category = tx.category || \"Uncategorized\";\n      debugInfo.byCategory[category] =\n        (debugInfo.byCategory[category] || 0) + 1;\n\n      // Date range\n      if (tx.date) {\n        const date = new Date(tx.date);\n        if (\n          !debugInfo.dateRange.earliest ||\n          date < debugInfo.dateRange.earliest\n        ) {\n          debugInfo.dateRange.earliest = date;\n        }\n        if (!debugInfo.dateRange.latest || date > debugInfo.dateRange.latest) {\n          debugInfo.dateRange.latest = date;\n        }\n      }\n\n      // Amounts\n      if (tx.income) {\n        debugInfo.amounts.totalIncome += parseFloat(tx.income) || 0;\n      }\n      if (tx.expenses) {\n        debugInfo.amounts.totalExpenses += parseFloat(tx.expenses) || 0;\n      }\n    });\n\n    console.group(\"≡ƒôè Debug Transactions Information\");\n    console.log(\"Total Transactions:\", debugInfo.totalTransactions);\n    console.log(\"ID Consistency:\", {\n      withIds: debugInfo.idConsistency.withIds,\n      withoutIds: debugInfo.idConsistency.withoutIds,\n      duplicateIds: debugInfo.idConsistency.duplicateIds,\n      uniqueIdsCount: debugInfo.idConsistency.uniqueIds.size,\n    });\n    console.log(\"By File:\", debugInfo.byFile);\n    console.log(\"By Category:\", debugInfo.byCategory);\n    console.log(\"Date Range:\", {\n      earliest: debugInfo.dateRange.earliest\n        ? debugInfo.dateRange.earliest.toISOString().split(\"T\")[0]\n        : null,\n      latest: debugInfo.dateRange.latest\n        ? debugInfo.dateRange.latest.toISOString().split(\"T\")[0]\n        : null,\n    });\n    console.log(\"Amounts:\", {\n      totalIncome: debugInfo.amounts.totalIncome.toFixed(2),\n      totalExpenses: debugInfo.amounts.totalExpenses.toFixed(2),\n      balance: (\n        debugInfo.amounts.totalIncome - debugInfo.amounts.totalExpenses\n      ).toFixed(2),\n    });\n    console.groupEnd();\n\n    showToast(\n      `Debug: ${debugInfo.totalTransactions} transactions analyzed`,\n      \"info\"\n    );\n  } catch (error) {\n    console.error(\"Γ¥î Error in debug transactions:\", error);\n    showToast(\"Error debugging transactions\", \"error\");\n  }\n}\n\n/**\n * Save debug log to file\n */\nexport function saveDebugLog() {\n  try {\n    const debugData = {\n      timestamp: new Date().toISOString(),\n      appState: {\n        transactions: AppState.transactions?.length || 0,\n        mergedFiles: AppState.mergedFiles?.length || 0,\n        categories: Object.keys(AppState.categories || {}).length,\n      },\n      consoleHistory: window.consoleHistory || [],\n      recentErrors: window.recentErrors || [],\n      userAgent: navigator.userAgent,\n      url: window.location.href,\n    };\n\n    const debugContent = JSON.stringify(debugData, null, 2);\n    const blob = new Blob([debugContent], { type: \"application/json\" });\n    const url = URL.createObjectURL(blob);\n\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = `expense-tracker-debug-${Date.now()}.json`;\n    link.style.display = \"none\";\n\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n\n    URL.revokeObjectURL(url);\n\n    showToast(\"Debug log saved successfully\", \"success\");\n  } catch (error) {\n    console.error(\"Γ¥î Error saving debug log:\", error);\n    showToast(\"Error saving debug log\", \"error\");\n  }\n}\n\n/**\n * Reset application data\n */\nexport function resetApplication() {\n  try {\n    // Clear all localStorage data\n    const keysToRemove = [\n      \"expenseTrackerTransactions\",\n      \"expenseTrackerMergedFiles\",\n      \"expenseTrackerCategories\",\n      \"categories\",\n      \"transactions\",\n      \"mergedFiles\",\n      \"categoryOrder\",\n      \"darkMode\",\n      \"debugMode\",\n    ];\n\n    keysToRemove.forEach((key) => {\n      localStorage.removeItem(key);\n    });\n\n    // Clear AppState\n    AppState.transactions = [];\n    AppState.mergedFiles = [];\n    AppState.categories = {};\n\n    // FIXED: Initialize with default categories immediately like the reset button does\n    AppState.categories = { ...DEFAULT_CATEGORIES };\n\n    // FIXED: Save categories immediately to localStorage\n    localStorage.setItem(\"categories\", JSON.stringify(AppState.categories));\n    console.log(\n      `Reset and loaded ${\n        Object.keys(AppState.categories).length\n      } default categories automatically`\n    );\n\n    // Clear UI\n    const transactionContainer = document.getElementById(\n      \"transactionTableContainer\"\n    );\n    if (transactionContainer) {\n      transactionContainer.innerHTML =\n        '<p class=\"no-transactions\">No transactions to display</p>';\n    }\n\n    // Reset toggles\n    const darkModeToggle = document.getElementById(\"darkModeToggle\");\n    const debugModeToggle = document.getElementById(\"debugModeToggle\");\n\n    if (darkModeToggle) darkModeToggle.checked = false;\n    if (debugModeToggle) debugModeToggle.checked = false;\n\n    // Remove body classes\n    document.body.classList.remove(\"dark-mode\", \"debug-mode\");\n\n    showToast(\n      \"Application reset successfully with default categories loaded\",\n      \"success\"\n    );\n\n    // CRITICAL FIX: Call the exact same function as the Reset to Defaults button\n    import(\"../ui/categoryManager.js\")\n      .then((categoryModule) => {\n        if (categoryModule.resetToDefaultCategories) {\n          // This ensures the exact same process as clicking the reset button\n          categoryModule.resetToDefaultCategories();\n          console.log(\n            \"CRITICAL: Called resetToDefaultCategories() exactly like the reset button\"\n          );\n        }\n      })\n      .catch((error) => {\n        console.warn(\"Could not call resetToDefaultCategories:\", error);\n      });\n\n    // FIXED: Force immediate category UI update using the same method as reset button\n    import(\"./appState.js\")\n      .then((appModule) => {\n        if (appModule.initializeAppState) {\n          appModule.initializeAppState();\n        }\n      })\n      .catch((error) => {\n        console.warn(\"Could not re-initialize app state after reset:\", error);\n      });\n\n    // FIXED: Update transaction UI immediately like reset button does\n    import(\"../ui/transactionManager.js\")\n      .then((txModule) => {\n        if (txModule.updateAllCategoryUI) {\n          txModule.updateAllCategoryUI();\n        }\n        if (txModule.renderTransactions) {\n          txModule.renderTransactions([], true);\n        }\n      })\n      .catch((error) => {\n        console.warn(\"Could not update transaction UI after reset:\", error);\n      });\n\n    // FIXED: Ensure global state is immediately available\n    window.AppState = AppState;\n\n    // Reload the page after ensuring everything is saved\n    setTimeout(() => {\n      window.location.reload();\n    }, 1000);\n  } catch (error) {\n    console.error(\"Γ¥î Error resetting application:\", error);\n    showToast(\"Error resetting application\", \"error\");\n  }\n}\n\n/**\n * Get debug information as an object\n */\nexport function getDebugInfo() {\n  return {\n    timestamp: new Date().toISOString(),\n    appState: {\n      transactions: AppState.transactions?.length || 0,\n      mergedFiles: AppState.mergedFiles?.length || 0,\n      categories: Object.keys(AppState.categories || {}).length,\n      currentFileName: AppState.currentFileName || null,\n    },\n    localStorage: {\n      size: JSON.stringify(localStorage).length,\n      keys: Object.keys(localStorage),\n    },\n    performance: {\n      memory: performance.memory\n        ? {\n            used:\n              Math.round(performance.memory.usedJSHeapSize / 1048576) + \" MB\",\n            total:\n              Math.round(performance.memory.totalJSHeapSize / 1048576) + \" MB\",\n          }\n        : \"Not available\",\n    },\n    errors: window.recentErrors || [],\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\core\\fileHandlers.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\core\\fileManager.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":68,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":68,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1998,2050],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":75,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":75,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2225,2339],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":78,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":78,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2344,2415],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":111,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":111,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AppState, saveMergedFiles } from \"./appState.js\";\nimport { showToast } from \"../ui/uiManager.js\";\n\n/**\n * Adds or updates a merged file in the AppState\n * @param {Array<Array>} fileData - The parsed file data\n * @param {Array<string>} headerMapping - Header mapping array\n * @param {string} fileName - Name of the file\n * @param {string} signature - Unique file signature\n * @param {number} headerRowIndex - Index of header row (0-based)\n * @param {number} dataRowIndex - Index where data starts (0-based)\n * @param {string} currency - Currency for this file\n */\nexport function addMergedFile(\n  fileData,\n  headerMapping,\n  fileName,\n  signature,\n  headerRowIndex = 0,\n  dataRowIndex = 1,\n  currency = \"USD\"\n) {\n  if (!fileData || !headerMapping || !fileName || !signature) {\n    console.error(\"addMergedFile: Missing required parameters.\", {\n      fileName,\n      signature,\n      headerMapping,\n      fileData,\n    });\n    showToast(\"Error: Could not add file due to missing data.\", \"error\");\n    return;\n  }\n\n  try {\n    // Process the file data into transactions immediately\n    const transactions = processFileDataToTransactions(\n      fileData,\n      headerMapping,\n      dataRowIndex,\n      fileName,\n      currency\n    );\n\n    const fileEntry = {\n      fileName,\n      data: fileData,\n      headerMapping,\n      signature,\n      headerRowIndex,\n      dataRowIndex,\n      currency,\n      transactions, // Store processed transactions\n      dateAdded: new Date().toISOString(),\n      selected: true,\n    };\n\n    // Ensure AppState.mergedFiles is an array\n    if (!Array.isArray(AppState.mergedFiles)) {\n      AppState.mergedFiles = [];\n    }\n\n    // Check for existing file by signature to prevent exact duplicates if desired,\n    // or replace by name if that's the policy (current policy seems to be replace by name via UI confirm)\n    const existingFileIndex = AppState.mergedFiles.findIndex(\n      (f) => f.fileName === fileName\n    );\n    if (existingFileIndex !== -1) {\n      console.log(`Replacing existing file: ${fileName}`);\n      AppState.mergedFiles[existingFileIndex] = fileEntry;\n    } else {\n      AppState.mergedFiles.push(fileEntry);\n    }\n\n    saveMergedFiles(); // Save to localStorage\n    console.log(\n      `File \"${fileName}\" added/updated in mergedFiles. Total: ${AppState.mergedFiles.length}`\n    );\n    console.log(`Processed ${transactions.length} transactions from file`);\n  } catch (error) {\n    console.error(\"Error adding merged file:\", error);\n    throw error;\n  }\n}\n\n/**\n * Process file data into transaction objects\n * @param {Array<Array>} fileData - Raw file data\n * @param {Array<string>} headerMapping - Header mapping\n * @param {number} dataRowIndex - Starting data row index\n * @param {string} fileName - Source file name\n * @param {string} currency - Currency for transactions\n * @returns {Array} Processed transactions\n */\nfunction processFileDataToTransactions(\n  fileData,\n  headerMapping,\n  dataRowIndex,\n  fileName,\n  currency\n) {\n  const transactions = [];\n\n  if (!fileData || !headerMapping) {\n    console.warn(\"Missing file data or header mapping\");\n    return transactions;\n  }\n\n  // Get data rows starting from the specified index\n  const dataRows = fileData.slice(dataRowIndex);\n\n  dataRows.forEach((row, index) => {\n    if (!row || row.length === 0) return;\n\n    const transaction = {\n      date: \"\",\n      description: \"\",\n      income: \"\",\n      expenses: \"\",\n      currency: currency,\n      category: \"Uncategorized\",\n      fileName: fileName,\n    };\n\n    // Map row data to transaction fields\n    headerMapping.forEach((mapping, colIndex) => {\n      if (mapping && mapping !== \"ΓÇô\" && colIndex < row.length) {\n        const value = row[colIndex];\n        if (value !== null && value !== undefined && value !== \"\") {\n          const fieldName = mapping.toLowerCase();\n          transaction[fieldName] = String(value).trim();\n        }\n      }\n    });\n\n    // Validate and clean up the transaction\n    if (\n      transaction.date ||\n      transaction.description ||\n      transaction.income ||\n      transaction.expenses\n    ) {\n      // Clean up amounts\n      if (transaction.income) {\n        transaction.income = cleanAmount(transaction.income);\n      }\n      if (transaction.expenses) {\n        transaction.expenses = cleanAmount(transaction.expenses);\n      }\n\n      transactions.push(transaction);\n    }\n  });\n\n  return transactions;\n}\n\n/**\n * Clean and validate monetary amounts\n * @param {string} amount - Amount to clean\n * @returns {string} Cleaned amount\n */\nfunction cleanAmount(amount) {\n  if (!amount) return \"\";\n\n  // Remove currency symbols and extra spaces\n  let cleaned = String(amount).replace(/[$Γé¼┬ú┬ÑΓé¬,\\s]/g, \"\");\n\n  // Parse as float to validate\n  const num = parseFloat(cleaned);\n  if (isNaN(num)) return \"\";\n\n  return num.toString();\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\exports\\exportManager.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":12,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":12,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[329,377],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":123,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":123,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3868,3917],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":209,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":209,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6561,6607],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Move from src/exports/exportManager.js\n\n// Update imports\nimport { AppState } from \"../core/appState.js\";\nimport { showToast } from \"../ui/uiManager.js\";\nimport { formatDateToDDMMYYYY } from \"../utils/dateUtils.js\";\n\n/**\n * Export transactions as CSV with improved formatting\n */\nexport function exportTransactionsAsCSV() {\n  console.log(\"Exporting transactions as CSV...\");\n\n  // FIXED: Use filtered and sorted transactions from transaction manager\n  let transactions;\n  // Import the transaction manager to get filtered/sorted data\n  import(\"../ui/transactionManager.js\")\n    .then((module) => {\n      if (module.getFilteredAndSortedTransactions) {\n        transactions = module.getFilteredAndSortedTransactions();\n      } else {\n        // Fallback to AppState if function not available\n        transactions = AppState.transactions || [];\n      }\n\n      processCSVExport(transactions);\n    })\n    .catch((error) => {\n      console.warn(\n        \"Could not import transaction manager, using AppState directly:\",\n        error\n      );\n      transactions = AppState.transactions || [];\n      processCSVExport(transactions);\n    });\n}\n\n/**\n * FIXED: Process CSV export with the provided transactions\n */\nfunction processCSVExport(transactions) {\n  if (transactions.length === 0) {\n    showToast(\"No transactions to export\", \"warning\");\n    return;\n  }\n\n  try {\n    // ENHANCED: Include original data columns for edited transactions\n    const headers = [\n      \"Date\",\n      \"Description\",\n      \"Category\",\n      \"Income\",\n      \"Expenses\",\n      \"Currency\",\n      \"File Name\",\n      \"Original Date\",\n      \"Original Description\",\n      \"Original Income\",\n      \"Original Expenses\",\n      \"Is Edited\",\n    ];\n\n    // Create CSV content with improved data handling and original data columns\n    const csvRows = [\n      headers.join(\",\"),\n      ...transactions.map((tx) => {\n        // FIXED: Format date to dd/mm/yyyy for export\n        const formattedDate = tx.date ? formatDateToDDMMYYYY(tx.date) : \"\";\n\n        // Clean description for export\n        const cleanDescription = (tx.description || \"\").trim();\n\n        // Get original data if available\n        const originalData = tx.originalData || {};\n        const isEdited = tx.edited || false;\n\n        // Format original date if available\n        const originalDate = originalData.date\n          ? formatDateToDDMMYYYY(originalData.date)\n          : \"\";\n        const originalDescription = (originalData.description || \"\").trim();\n\n        return [\n          formattedDate,\n          `\"${cleanDescription.replace(/\"/g, '\"\"')}\"`, // Proper CSV escaping\n          `\"${(tx.category || \"Uncategorized\").replace(/\"/g, '\"\"')}\"`,\n          (parseFloat(tx.income) || 0).toFixed(2),\n          (parseFloat(tx.expenses) || 0).toFixed(2),\n          tx.currency || \"USD\",\n          `\"${(tx.fileName || \"Unknown\").replace(/\"/g, '\"\"')}\"`,\n          // Original data columns\n          originalDate,\n          `\"${originalDescription.replace(/\"/g, '\"\"')}\"`,\n          (parseFloat(originalData.income) || 0).toFixed(2),\n          (parseFloat(originalData.expenses) || 0).toFixed(2),\n          isEdited ? \"Yes\" : \"No\",\n        ].join(\",\");\n      }),\n    ];\n\n    // CRITICAL FIX: Add UTF-8 BOM for proper Hebrew encoding\n    const csvContent = \"\\uFEFF\" + csvRows.join(\"\\n\");\n\n    // Create and download file with dd/mm/yyyy in filename\n    const currentDate = formatDateToDDMMYYYY(new Date()).replace(/\\//g, \"-\");\n    downloadFile(\n      csvContent,\n      `transactions_${currentDate}.csv`,\n      \"text/csv;charset=utf-8\"\n    );\n    showToast(`Exported ${transactions.length} transactions to CSV`, \"success\");\n  } catch (error) {\n    console.error(\"Error exporting CSV:\", error);\n    showToast(\"Error exporting transactions\", \"error\");\n  }\n}\n\n/**\n * Export transactions as JSON\n */\nexport function exportTransactionsAsJSON() {\n  console.log(\"Exporting transactions as JSON...\");\n\n  // FIXED: Use filtered and sorted transactions from transaction manager\n  let transactions;\n\n  // Import the transaction manager to get filtered/sorted data\n  import(\"../ui/transactionManager.js\")\n    .then((module) => {\n      if (module.getFilteredAndSortedTransactions) {\n        transactions = module.getFilteredAndSortedTransactions();\n      } else {\n        // Fallback to AppState if function not available\n        transactions = AppState.transactions || [];\n      }\n\n      processJSONExport(transactions);\n    })\n    .catch((error) => {\n      console.warn(\n        \"Could not import transaction manager, using AppState directly:\",\n        error\n      );\n      transactions = AppState.transactions || [];\n      processJSONExport(transactions);\n    });\n}\n\n/**\n * FIXED: Process JSON export with the provided transactions\n */\nfunction processJSONExport(transactions) {\n  if (transactions.length === 0) {\n    showToast(\"No transactions to export\", \"warning\");\n    return;\n  }\n\n  try {\n    // ENHANCED: Include original data for edited transactions in JSON export\n    const formattedTransactions = transactions.map((tx) => {\n      const baseData = {\n        date: tx.date ? formatDateToDDMMYYYY(tx.date) : \"\",\n        description: (tx.description || \"\").trim(),\n        category: tx.category || \"Uncategorized\",\n        income: parseFloat(tx.income) || 0,\n        expenses: parseFloat(tx.expenses) || 0,\n        currency: tx.currency || \"USD\",\n        fileName: tx.fileName || \"Unknown\",\n        isEdited: tx.edited || false,\n      };\n\n      // Add original data if transaction was edited\n      if (tx.originalData && Object.keys(tx.originalData).length > 0) {\n        baseData.originalData = {\n          date: tx.originalData.date\n            ? formatDateToDDMMYYYY(tx.originalData.date)\n            : \"\",\n          description: (tx.originalData.description || \"\").trim(),\n          income: parseFloat(tx.originalData.income) || 0,\n          expenses: parseFloat(tx.originalData.expenses) || 0,\n        };\n      }\n\n      return baseData;\n    });\n\n    const jsonContent = JSON.stringify(formattedTransactions, null, 2);\n    const currentDate = formatDateToDDMMYYYY(new Date()).replace(/\\//g, \"-\");\n    downloadFile(\n      jsonContent,\n      `transactions_${currentDate}.json`,\n      \"application/json;charset=utf-8\"\n    );\n    showToast(\n      `Exported ${transactions.length} transactions to JSON`,\n      \"success\"\n    );\n  } catch (error) {\n    console.error(\"Error exporting JSON:\", error);\n    showToast(\"Error exporting transactions\", \"error\");\n  }\n}\n\n/**\n * Export merged files data\n */\nexport function exportMergedFilesAsCSV() {\n  console.log(\"Exporting merged files data...\");\n\n  const mergedFiles = AppState.mergedFiles || [];\n\n  if (mergedFiles.length === 0) {\n    showToast(\"No merged files to export\", \"warning\");\n    return;\n  }\n\n  try {\n    // Create CSV header\n    const headers = [\n      \"File Name\",\n      \"Currency\",\n      \"Transaction Count\",\n      \"Import Date\",\n      \"Signature\",\n    ];\n\n    // Create CSV content\n    const csvContent = [\n      headers.join(\",\"),\n      ...mergedFiles.map((file) =>\n        [\n          `\"${file.fileName || \"Unknown\"}\"`,\n          file.currency || \"USD\",\n          file.transactions ? file.transactions.length : 0,\n          file.mergedAt || \"Unknown\",\n          `\"${file.signature || \"None\"}\"`,\n        ].join(\",\")\n      ),\n    ].join(\"\\n\");\n\n    downloadFile(\n      csvContent,\n      `merged_files_${new Date().toISOString().split(\"T\")[0]}.csv`,\n      \"text/csv\"\n    );\n    showToast(\n      `Exported ${mergedFiles.length} merged files info to CSV`,\n      \"success\"\n    );\n  } catch (error) {\n    console.error(\"Error exporting merged files CSV:\", error);\n    showToast(\"Error exporting merged files\", \"error\");\n  }\n}\n\n/**\n * Download file helper function\n */\nfunction downloadFile(content, filename, mimeType) {\n  // FIXED: Ensure proper encoding for Hebrew text\n  const blob = new Blob([content], { type: mimeType });\n  const link = document.createElement(\"a\");\n\n  if (link.download !== undefined) {\n    const url = URL.createObjectURL(blob);\n    link.setAttribute(\"href\", url);\n    link.setAttribute(\"download\", filename);\n    link.style.visibility = \"hidden\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  } else {\n    throw new Error(\"Download not supported\");\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\main.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[0,58],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":20,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":20,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[635,689],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":24,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":24,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[737,783],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":40,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":40,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1211,1258],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":44,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":44,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1321,1374],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":48,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":48,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1517,1578],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":54,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":54,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1729,1782],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":61,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":61,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1903,1961],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":77,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":77,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2399,2470],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":92,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":92,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2797,2835],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":95,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":95,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2938,2985],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":99,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":99,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3147,3263],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":105,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":105,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3445,3551],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":109,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":109,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3575,3645],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":113,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":113,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3684,3760],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":122,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":122,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3944,4003],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":129,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":129,"endColumn":24},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":132,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":132,"endColumn":24},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":140,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":140,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4548,4610],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'error' is defined but never used. Allowed unused args must match /^_/u.","line":155,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":155,"endColumn":39},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":250,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":250,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7841,7901],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":267,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":267,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8403,8463],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":279,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":279,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8793,8846],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"console.log(\"Executing main.js - Version: 2025-06-29_02\");\n\n// Import only JavaScript modules - all CSS is loaded via HTML\nimport { AppState, loadAppState } from \"./core/appState.js\";\nimport { initializeFileUpload } from \"./ui/fileUpload.js\";\nimport { setupSidebarManager } from \"./ui/sidebarManager.js\";\nimport { initializeTransactionManager } from \"./ui/transactionManager.js\";\n\n// FIXED: Global chart initialization state to prevent multiple loads\nlet chartInitializationState = {\n  initialized: false,\n  initializing: false,\n  hasData: false,\n};\n\n/**\n * Initialize the entire application\n */\nasync function initializeMainApp() {\n  console.log(\"Starting application initialization...\");\n\n  try {\n    // Initialize app state first\n    console.log(\"CRITICAL: Loading app state...\");\n    await loadAppState();\n\n    // Initialize theme from localStorage (inline instead of themeManager)\n    const isDarkMode = localStorage.getItem(\"darkMode\") === \"true\";\n    const isDebugMode = localStorage.getItem(\"debugMode\") === \"true\";\n\n    if (isDarkMode) {\n      document.body.classList.add(\"dark-mode\");\n    }\n\n    if (isDebugMode) {\n      document.body.classList.add(\"debug-mode\");\n    }\n\n    // Initialize sidebar\n    console.log(\"CRITICAL: Setting up sidebar...\");\n    setupSidebarManager();\n\n    // Initialize file upload\n    console.log(\"CRITICAL: Initializing file upload...\");\n    initializeFileUpload();\n\n    // Initialize transaction manager (this will create the section and render data WITHOUT updating charts)\n    console.log(\"CRITICAL: Initializing transaction manager...\");\n    initializeTransactionManager();\n\n    // FIXED: Initialize charts LAST and update them ONCE if we have data\n    await initializeChartsOnce();\n\n    console.log(\"CRITICAL: App initialization complete\");\n\n    // Mark initialization as complete\n    if (window.AppState) {\n      window.AppState.initialized = true;\n    }\n\n    console.log(\"Γ£à Expense Tracker initialized successfully\");\n  } catch (error) {\n    console.error(\"CRITICAL ERROR: App initialization failed:\", error);\n    // Don't throw the error, just log it to prevent unhandled promise rejection\n  }\n}\n\n/**\n * FIXED: Initialize charts only once with proper loading indicators\n */\nasync function initializeChartsOnce() {\n  // Prevent multiple initialization\n  if (\n    chartInitializationState.initialized ||\n    chartInitializationState.initializing\n  ) {\n    console.log(\"Charts already initialized or initializing, skipping...\");\n    return;\n  }\n\n  chartInitializationState.initializing = true;\n\n  try {\n    const chartsModule = await Promise.race([\n      import(\"./ui/charts.js\"),\n      new Promise((_, reject) =>\n        setTimeout(() => reject(new Error(\"Charts import timeout\")), 2000)\n      ),\n    ]);\n\n    if (chartsModule?.initializeCharts) {\n      console.log(\"Initializing charts...\");\n      await chartsModule.initializeCharts();\n      chartInitializationState.initialized = true;\n      console.log(\"Charts initialized successfully\");\n\n      // FIXED: Only update charts ONCE if we have data - prevent double updates\n      if (AppState.transactions && AppState.transactions.length > 0) {\n        console.log(\n          `Performing SINGLE chart update with ${AppState.transactions.length} transactions`\n        );\n        // Update charts immediately without delay - DOM should be ready by this point\n        chartsModule.updateCharts();\n        chartInitializationState.hasData = true;\n        console.log(\n          \"Charts updated with existing transaction data - SINGLE UPDATE COMPLETE\"\n        );\n      } else {\n        console.log(\"No transaction data available for initial chart update\");\n      }\n    }\n  } catch (error) {\n    console.log(\"Charts not available or failed to initialize:\", error.message);\n  } finally {\n    chartInitializationState.initializing = false;\n  }\n}\n\n// FIXED: Improved initialization with proper error handling\nasync function safeInitialization() {\n  try {\n    console.log(\"DOM loaded, initializing expense tracker...\");\n\n    // FIXED: Load debug utilities with timeout and error handling\n    try {\n      await Promise.race([\n        Promise.all([\n          import(\"./utils/debug.js\").catch(() =>\n            console.log(\"Debug utils not available\")\n          ),\n          import(\"./utils/console-logger.js\").catch(() =>\n            console.log(\"Console logger not available\")\n          ),\n        ]),\n        new Promise((_, reject) =>\n          setTimeout(() => reject(new Error(\"Debug utilities timeout\")), 3000)\n        ),\n      ]);\n    } catch (error) {\n      console.log(\"Debug utilities failed to load:\", error.message);\n    }\n\n    // Then initialize the main application\n    await initializeMainApp();\n\n    // Initialization complete message is already logged in initializeMainApp\n  } catch (error) {\n    console.error(\"Γ¥î Failed to initialize Expense Tracker:\", error);\n    // Show user-friendly error message\n    showInitializationError(error);\n  }\n}\n\n// FIXED: Show initialization error to user\nfunction showInitializationError(error) {\n  const mainContent = document.getElementById(\"mainContent\");\n  if (mainContent) {\n    mainContent.innerHTML = `\n      <div style=\"padding: 40px; text-align: center; color: #dc3545;\">\n        <h2>ΓÜá∩╕Å Application Initialization Error</h2>\n        <p>There was an error starting the expense tracker.</p>\n        <p>Please refresh the page or check the browser console for details.</p>\n        <button onclick=\"location.reload()\" style=\"\n          padding: 12px 24px;\n          background: #007bff;\n          color: white;\n          border: none;\n          border-radius: 6px;\n          cursor: pointer;\n          font-size: 16px;\n          margin-top: 20px;\n        \">Refresh Page</button>\n      </div>\n    `;\n  }\n}\n\n// FIXED: Initialize the application when DOM is ready with proper event handling\nif (document.readyState === \"loading\") {\n  document.addEventListener(\"DOMContentLoaded\", safeInitialization);\n} else {\n  // DOM is already ready\n  setTimeout(safeInitialization, 0);\n}\n\n// FIXED: Track cleanup functions for proper memory management\nconst cleanupFunctions = [];\n\n// FIXED: Register cleanup functions\nfunction registerCleanup(cleanupFn) {\n  cleanupFunctions.push(cleanupFn);\n}\n\n// FIXED: Initialize cleanup handlers\nfunction initializeCleanupHandlers() {\n  // Register cleanup functions for various modules\n  const cleanupModules = [\n    { module: \"./ui/chartManager.js\", cleanup: \"cleanupAllCharts\" },\n    { module: \"./ui/modalManager.js\", cleanup: \"cleanupAllModals\" },\n    {\n      module: \"./ui/transactionManager.js\",\n      cleanup: \"cleanupTransactionManager\",\n    },\n    { module: \"./ui/fileUpload.js\", cleanup: \"cleanupFileUpload\" },\n  ];\n\n  cleanupModules.forEach(({ module, cleanup }) => {\n    registerCleanup(() => {\n      import(module)\n        .then((moduleInstance) => {\n          if (moduleInstance[cleanup]) {\n            moduleInstance[cleanup]();\n          }\n        })\n        .catch((error) => {\n          console.warn(`Cleanup failed for ${module}:`, error);\n        });\n    });\n  });\n}\n\n// Initialize cleanup handlers\ninitializeCleanupHandlers();\n\n// FIXED: Cleanup on page unload with error handling\nwindow.addEventListener(\"beforeunload\", () => {\n  cleanupFunctions.forEach((cleanup) => {\n    try {\n      cleanup();\n    } catch (error) {\n      console.error(\"Error during cleanup:\", error);\n    }\n  });\n});\n\n// Make AppState available globally for debugging\nwindow.AppState = AppState;\n\n// FIXED: Add improved error handlers\nwindow.addEventListener(\"unhandledrejection\", (event) => {\n  console.error(\"Unhandled promise rejection:\", event.reason);\n\n  // Check if it's a browser extension related error\n  if (\n    event.reason?.message?.includes(\"message channel closed\") ||\n    event.reason?.message?.includes(\n      \"listener indicated an asynchronous response\"\n    )\n  ) {\n    console.log(\"Browser extension related error, ignoring...\");\n    event.preventDefault();\n  } else {\n    // Prevent default browser error handling for other errors too\n    event.preventDefault();\n  }\n});\n\n// FIXED: Add error handler for general JavaScript errors\nwindow.addEventListener(\"error\", (event) => {\n  console.error(\"JavaScript error:\", event.error);\n\n  // Check if it's a browser extension related error\n  if (\n    event.error?.message?.includes(\"Extension context invalidated\") ||\n    event.error?.message?.includes(\"message channel closed\")\n  ) {\n    console.log(\"Browser extension related error, ignoring...\");\n    event.preventDefault();\n  }\n});\n\n// FIXED: Add a safety timeout to ensure initialization doesn't hang\nsetTimeout(() => {\n  if (!window.AppState?.initialized) {\n    console.warn(\"Application may not have initialized properly\");\n\n    // Try to initialize again as a fallback\n    if (document.readyState === \"complete\") {\n      console.log(\"Attempting fallback initialization...\");\n      safeInitialization().catch((error) => {\n        console.error(\"Fallback initialization also failed:\", error);\n      });\n    }\n  }\n}, 5000);\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\mappings\\mappingsManager.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":8,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":8,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[171,212],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":27,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":27,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[679,729],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":235,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":235,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6520,6631],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":272,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":272,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7686,7760],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":276,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":276,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7839,7940],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":283,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":283,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8026,8089],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":297,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":297,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8368,8430],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":311,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":311,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8751,8883],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":321,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":321,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8974,9098],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":330,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":330,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9236,9307],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":338,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":338,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9604,9698],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":350,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":350,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10128,10255],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":361,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":361,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10503,10642],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":364,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":364,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10649,10760],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":371,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":371,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10896,10964],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":406,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":406,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12112,12217],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { showModal } from \"../ui/modalManager.js\";\nimport { showToast } from \"../ui/uiManager.js\";\n\n/**\n * Show mappings modal\n */\nexport function showMappingsModal() {\n  console.log(\"Opening mappings modal...\");\n\n  const modalContent = document.createElement(\"div\");\n  modalContent.className = \"mappings-content\";\n\n  // Build the content\n  modalContent.innerHTML = buildMappingsContent();\n\n  // Create the modal\n  const modal = showModal({\n    title: \"Format Mappings\",\n    content: modalContent,\n    size: \"large\",\n    closeOnClickOutside: true, // FIXED: Enable click outside to close\n  });\n\n  // Attach event listeners\n  attachMappingsEventListeners(modalContent, modal);\n\n  console.log(\"Mappings modal opened successfully\");\n}\n\n/**\n * Build the mappings content HTML\n */\nfunction buildMappingsContent() {\n  const mappings = JSON.parse(\n    localStorage.getItem(\"fileFormatMappings\") || \"[]\"\n  );\n\n  if (mappings.length === 0) {\n    return `\n      <div class=\"empty-state\">\n        <p>No format mappings found.</p>\n        <p class=\"info-text\">Mappings are created automatically when you upload files with different formats.</p>\n      </div>\n      <div class=\"modal-footer\">\n        <button class=\"button secondary-btn\" id=\"closeMappingsBtn\">Close</button>\n      </div>\n    `;\n  }\n\n  let html = `\n    <div class=\"mappings-list\">\n      <h3>Saved Format Mappings (${mappings.length})</h3>\n      <p class=\"info-text\">These mappings help automatically recognize file formats you've used before.</p>\n  `;\n\n  mappings.forEach((mapping, index) => {\n    const createdDate = mapping.createdAt\n      ? new Date(mapping.createdAt).toLocaleDateString()\n      : \"Unknown\";\n    const fieldsCount = Object.keys(mapping.headerMapping || {}).length;\n\n    html += `\n      <div class=\"mapping-item\" data-index=\"${index}\">\n        <div class=\"mapping-info\">\n          <div class=\"mapping-icon\">≡ƒùé∩╕Å</div>\n          <div class=\"mapping-details\">\n            <div class=\"mapping-signature\">${\n              mapping.signature || \"Unknown Format\"\n            }</div>\n            <div class=\"mapping-stats\">${fieldsCount} fields mapped ΓÇó Created: ${createdDate}</div>\n          </div>\n        </div>\n        <div class=\"mapping-actions\">\n          <button class=\"view-mapping-btn\" data-index=\"${index}\" title=\"View mapping details\">≡ƒæü∩╕Å</button>\n          <button class=\"remove-mapping-btn\" data-index=\"${index}\" title=\"Remove mapping\">≡ƒùæ∩╕Å</button>\n        </div>\n      </div>\n    `;\n  });\n\n  html += `\n    </div>\n    <div class=\"modal-footer\">\n      <button class=\"button danger-btn\" id=\"clearAllMappingsBtn\">Clear All Mappings</button>\n      <button class=\"button secondary-btn\" id=\"closeMappingsBtn\">Close</button>\n    </div>\n  `;\n\n  return html;\n}\n\n/**\n * Attach event listeners to the mappings content\n */\nfunction attachMappingsEventListeners(container, modal) {\n  // Close button\n  const closeBtn = container.querySelector(\"#closeMappingsBtn\");\n  if (closeBtn) {\n    closeBtn.addEventListener(\"click\", () => {\n      modal.close();\n    });\n  }\n\n  // Clear all mappings button\n  const clearAllBtn = container.querySelector(\"#clearAllMappingsBtn\");\n  if (clearAllBtn) {\n    clearAllBtn.addEventListener(\"click\", () => {\n      handleClearAllMappings(container, modal);\n    });\n  }\n\n  // Remove mapping buttons\n  container.querySelectorAll(\".remove-mapping-btn\").forEach((btn) => {\n    btn.addEventListener(\"click\", (e) => {\n      const index = parseInt(e.target.getAttribute(\"data-index\"));\n      handleRemoveMapping(index, container, modal);\n    });\n  });\n\n  // View mapping buttons\n  container.querySelectorAll(\".view-mapping-btn\").forEach((btn) => {\n    btn.addEventListener(\"click\", (e) => {\n      const index = parseInt(e.target.getAttribute(\"data-index\"));\n      handleViewMapping(index);\n    });\n  });\n}\n\n/**\n * Handle removing a single mapping\n */\nfunction handleRemoveMapping(index, container, modal) {\n  const mappings = JSON.parse(\n    localStorage.getItem(\"fileFormatMappings\") || \"[]\"\n  );\n  const mapping = mappings[index];\n\n  if (!mapping) return;\n\n  if (confirm(`Are you sure you want to remove this mapping?`)) {\n    // Remove the mapping\n    mappings.splice(index, 1);\n\n    // Save back to localStorage\n    try {\n      localStorage.setItem(\"fileFormatMappings\", JSON.stringify(mappings));\n      showToast(\"Mapping removed successfully\", \"success\");\n\n      // Refresh the modal content\n      container.innerHTML = buildMappingsContent();\n      attachMappingsEventListeners(container, modal);\n    } catch (error) {\n      console.error(\"Error removing mapping:\", error);\n      showToast(\"Error removing mapping\", \"error\");\n    }\n  }\n}\n\n/**\n * Handle clearing all mappings\n */\nfunction handleClearAllMappings(container, modal) {\n  if (\n    confirm(\n      \"Are you sure you want to clear ALL format mappings? This cannot be undone.\"\n    )\n  ) {\n    try {\n      localStorage.removeItem(\"fileFormatMappings\");\n      showToast(\"All mappings cleared successfully\", \"success\");\n\n      // Refresh the modal content\n      container.innerHTML = buildMappingsContent();\n      attachMappingsEventListeners(container, modal);\n    } catch (error) {\n      console.error(\"Error clearing mappings:\", error);\n      showToast(\"Error clearing mappings\", \"error\");\n    }\n  }\n}\n\n/**\n * Handle viewing mapping details\n */\nfunction handleViewMapping(index) {\n  const mappings = JSON.parse(\n    localStorage.getItem(\"fileFormatMappings\") || \"[]\"\n  );\n  const mapping = mappings[index];\n\n  if (!mapping) return;\n\n  // Create a details modal\n  const detailsContent = document.createElement(\"div\");\n  detailsContent.className = \"mapping-details-view\";\n  detailsContent.innerHTML = `\n    <h4>Mapping Details</h4>\n    <p><strong>Signature:</strong> ${mapping.signature || \"Unknown\"}</p>\n    <p><strong>Created:</strong> ${\n      mapping.createdAt\n        ? new Date(mapping.createdAt).toLocaleString()\n        : \"Unknown\"\n    }</p>\n\n    <h5>Field Mappings:</h5>\n    <div class=\"field-mappings\">\n      ${Object.entries(mapping.headerMapping || {})\n        .map(\n          ([field, column]) =>\n            `<div class=\"field-mapping\"><strong>${field}:</strong> Column \"${column}\"</div>`\n        )\n        .join(\"\")}\n    </div>\n  `;\n\n  showModal({\n    title: \"Mapping Details\",\n    content: detailsContent,\n    size: \"medium\",\n  });\n}\n\n/**\n * Save headers and format mapping for future use\n */\nexport function saveHeadersAndFormat(\n  signature,\n  headerMapping,\n  fileName = null,\n  headerRowIndex = 0,\n  dataRowIndex = 1,\n  currency = \"USD\"\n) {\n  try {\n    console.log(\"CRITICAL: Saving format mapping:\", {\n      signature,\n      headerMapping,\n      fileName,\n    });\n\n    const mappings = JSON.parse(\n      localStorage.getItem(\"fileFormatMappings\") || \"[]\"\n    );\n\n    // CRITICAL FIX: Don't overwrite existing mapping, just update lastUsed\n    const existingIndex = mappings.findIndex((m) => m.signature === signature);\n\n    const mappingData = {\n      signature,\n      mapping: headerMapping,\n      fileName:\n        fileName ||\n        (existingIndex !== -1 ? mappings[existingIndex].fileName : \"Unknown\"),\n      headerRowIndex,\n      dataRowIndex,\n      currency,\n      created:\n        existingIndex !== -1\n          ? mappings[existingIndex].created\n          : new Date().toISOString(),\n      lastUsed: new Date().toISOString(),\n    };\n\n    if (existingIndex !== -1) {\n      // Update existing mapping but keep original fileName and created date\n      mappings[existingIndex] = {\n        ...mappings[existingIndex],\n        ...mappingData,\n        fileName: mappings[existingIndex].fileName, // Keep original fileName\n        created: mappings[existingIndex].created, // Keep original created date\n      };\n      console.log(\"CRITICAL: Updated existing mapping at index\", existingIndex);\n    } else {\n      // Add new mapping\n      mappings.push(mappingData);\n      console.log(\n        \"CRITICAL: Added new mapping, total mappings:\",\n        mappings.length\n      );\n    }\n\n    localStorage.setItem(\"fileFormatMappings\", JSON.stringify(mappings));\n    console.log(\"CRITICAL: Saved format mappings to localStorage\");\n  } catch (error) {\n    console.error(\"CRITICAL ERROR: Failed to save format mapping:\", error);\n  }\n}\n\n/**\n * Get all saved mappings\n */\nexport function getMappings() {\n  try {\n    const mappings = JSON.parse(\n      localStorage.getItem(\"fileFormatMappings\") || \"[]\"\n    );\n    console.log(\"CRITICAL: Retrieved mappings:\", mappings.length);\n    return mappings;\n  } catch (error) {\n    console.error(\"CRITICAL ERROR: Failed to retrieve mappings:\", error);\n    return [];\n  }\n}\n\n/**\n * FIXED: Find mapping by signature with structure-based fallback matching\n */\nexport function findMappingBySignature(signature) {\n  try {\n    const mappings = getMappings();\n    console.log(\n      \"CRITICAL: Searching for signature:\",\n      signature,\n      \"in\",\n      mappings.length,\n      \"mappings\"\n    );\n\n    // Log all signatures for debugging\n    mappings.forEach((mapping, index) => {\n      console.log(\n        `CRITICAL: Mapping ${index}: signature=\"${mapping.signature}\", fileName=\"${mapping.fileName}\"`\n      );\n    });\n\n    // First try exact signature match\n    let found = mappings.find((m) => m.signature === signature);\n\n    if (found) {\n      console.log(\"CRITICAL: Found EXACT mapping for signature:\", signature);\n      // Update last used timestamp\n      found.lastUsed = new Date().toISOString();\n      localStorage.setItem(\"fileFormatMappings\", JSON.stringify(mappings));\n      return found;\n    }\n\n    // CRITICAL FIX: If no exact match, don't automatically apply similar mappings from different files\n    console.log(\n      \"CRITICAL: No exact match found, checking for similar structures...\"\n    );\n\n    // Find mappings with similar structure patterns\n    const candidateMappings = mappings.filter((mapping) => {\n      // Check if signatures share similar structure patterns\n      const currentSigParts = signature.split(\"_\");\n      const mappingSigParts = mapping.signature.split(\"_\");\n\n      // Both should be structure-based signatures\n      if (currentSigParts[0] === \"struct\" && mappingSigParts[0] === \"struct\") {\n        console.log(\n          `CRITICAL: Comparing structure signatures: current=${signature}, stored=${mapping.signature}`\n        );\n        // CRITICAL FIX: Only consider truly similar structures, not just any struct-based ones\n        return areStructuresSimilar(signature, mapping.signature);\n      }\n\n      return false;\n    });\n\n    if (candidateMappings.length > 0) {\n      console.log(\n        `CRITICAL: Found ${candidateMappings.length} candidate mappings but will NOT auto-apply from different files`\n      );\n      console.log(\n        \"CRITICAL: User should manually map this file or confirm to use existing mapping\"\n      );\n      // CRITICAL FIX: Don't automatically apply mappings from different files without user confirmation\n      return null;\n    }\n\n    console.log(\"CRITICAL: No mapping found for signature:\", signature);\n    return null;\n  } catch (error) {\n    console.error(\"CRITICAL ERROR: Failed to find mapping:\", error);\n    return null;\n  }\n}\n\n/**\n * FIXED: Check if two signatures represent truly similar file structures\n * @param {string} sig1 - First signature\n * @param {string} sig2 - Second signature\n * @returns {boolean} True if structures are truly similar enough to share mappings\n */\nfunction areStructuresSimilar(sig1, sig2) {\n  try {\n    // Exact match\n    if (sig1 === sig2) return true;\n\n    // Both must be structure-based signatures\n    const sig1Parts = sig1.split(\"_\");\n    const sig2Parts = sig2.split(\"_\");\n\n    if (sig1Parts[0] !== \"struct\" || sig2Parts[0] !== \"struct\") {\n      return false;\n    }\n\n    // CRITICAL FIX: For now, don't consider ANY structure signatures as similar\n    // unless they are exactly the same. This prevents auto-applying mappings\n    // from completely different file types (Excel vs XML, etc.)\n\n    // In the future, this could be enhanced to decode the structure hash\n    // and compare actual column counts, data patterns, etc., but for now\n    // we prioritize user control over automatic convenience\n\n    console.log(\n      `CRITICAL: Structure comparison - signatures are different: ${sig1} != ${sig2}`\n    );\n    return false;\n  } catch (error) {\n    console.error(\"Error comparing structures:\", error);\n    return false;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\mappings\\modalManager.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\parsers\\excelParser.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'importStar' is assigned a value but never used.","line":22,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":17},{"ruleId":"no-unused-vars","severity":1,"message":"'headerRowIndex' is assigned a value but never used.","line":159,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":159,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":172,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":172,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4813,4916],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Moved from src/parser/excelParser.js\n// No functional changes\n\"use strict\";\n\n// Modern ES6 module approach without problematic \"this\" bindings\nconst createBinding = (target, source, key, key2) => {\n  if (key2 === undefined) key2 = key;\n  let desc = Object.getOwnPropertyDescriptor(source, key);\n  if (\n    !desc ||\n    (\"get\" in desc ? !source.__esModule : desc.writable || desc.configurable)\n  ) {\n    desc = { enumerable: true, get: () => source[key] };\n  }\n  Object.defineProperty(target, key2, desc);\n};\n\nconst setModuleDefault = (target, value) => {\n  Object.defineProperty(target, \"default\", { enumerable: true, value: value });\n};\n\nconst importStar = (mod) => {\n  // Use Object.hasOwn instead of Object.prototype.hasOwnProperty.call\n  const getOwnKeys = (obj) => {\n    return Object.getOwnPropertyNames(obj);\n  };\n\n  if (mod?.__esModule) return mod;\n  const result = {};\n  if (mod != null) {\n    const keys = getOwnKeys(mod);\n    for (const key of keys) {\n      if (key !== \"default\") createBinding(result, mod, key);\n    }\n  }\n  setModuleDefault(result, mod);\n  return result;\n};\n\n// Modern dynamic import approach\nlet XLSX;\nlet uuid;\n\n// Initialize dependencies\nconst initializeDependencies = async () => {\n  try {\n    if (typeof window !== \"undefined\") {\n      // Browser environment - assume XLSX is loaded globally\n      XLSX = window.XLSX;\n\n      // Generate UUID without external dependency\n      uuid = {\n        v4: () => {\n          return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(\n            /[xy]/g,\n            function (c) {\n              const r = (Math.random() * 16) | 0;\n              const v = c == \"x\" ? r : (r & 0x3) | 0x8;\n              return v.toString(16);\n            }\n          );\n        },\n      };\n    } else {\n      // Node.js environment\n      const xlsxModule = await import(\"xlsx\");\n      XLSX = xlsxModule.default || xlsxModule;\n\n      const uuidModule = await import(\"uuid\");\n      uuid = uuidModule;\n    }\n  } catch (error) {\n    console.error(\"Error initializing Excel parser dependencies:\", error);\n    throw new Error(\"Failed to load required dependencies for Excel parsing\");\n  }\n};\n\nclass ExcelParser {\n  constructor() {\n    this.initialized = false;\n  }\n\n  async ensureInitialized() {\n    if (!this.initialized) {\n      await initializeDependencies();\n      this.initialized = true;\n    }\n  }\n\n  async parse(fileContent) {\n    try {\n      await this.ensureInitialized();\n\n      if (!XLSX) {\n        throw new Error(\"XLSX library not available\");\n      }\n\n      // Parse the Excel file\n      const workbook = XLSX.read(fileContent, { type: \"string\" });\n\n      if (!workbook.SheetNames || workbook.SheetNames.length === 0) {\n        throw new Error(\"No worksheets found in Excel file\");\n      }\n\n      const sheetName = workbook.SheetNames[0];\n      const sheet = workbook.Sheets[sheetName];\n\n      if (!sheet) {\n        throw new Error(\"Could not access worksheet data\");\n      }\n\n      // Convert sheet to JSON with error handling\n      let rawData;\n      try {\n        rawData = XLSX.utils.sheet_to_json(sheet, { header: 1, raw: false });\n      } catch (jsonError) {\n        throw new Error(\n          \"Failed to convert Excel data to JSON: \" + jsonError.message\n        );\n      }\n\n      if (!Array.isArray(rawData) || rawData.length === 0) {\n        throw new Error(\n          \"Excel file appears to be empty or has no readable data\"\n        );\n      }\n\n      // Return raw data as 2D array for header mapping\n      return rawData;\n    } catch (error) {\n      console.error(\"Error parsing Excel data:\", error);\n\n      // Provide more specific error messages\n      if (error.message.includes(\"Unsupported file\")) {\n        throw new Error(\n          \"Unsupported Excel file format. Please save as .xlsx or .xls\"\n        );\n      } else if (error.message.includes(\"Cannot read property\")) {\n        throw new Error(\n          \"Excel file appears to be corrupted or has invalid structure\"\n        );\n      }\n\n      throw new Error(`Excel parsing failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Parse Excel file for transaction data with header mapping\n   * @param {string|ArrayBuffer} fileContent - The file content\n   * @param {Array<string>} headerMapping - Array mapping columns to fields\n   * @param {number} headerRowIndex - Index of header row (0-based)\n   * @param {number} dataRowIndex - Index of first data row (0-based)\n   * @returns {Promise<Array>} Array of transaction objects\n   */\n  async parseWithMapping(\n    fileContent,\n    headerMapping,\n    headerRowIndex = 0,\n    dataRowIndex = 1\n  ) {\n    try {\n      const rawData = await this.parse(fileContent);\n      this.validateRawData(rawData, dataRowIndex);\n\n      const transactions = this.processDataRows(\n        rawData,\n        headerMapping,\n        dataRowIndex\n      );\n\n      console.log(\n        `Successfully parsed ${transactions.length} transactions from Excel file`\n      );\n      return transactions;\n    } catch (error) {\n      console.error(\"Error parsing Excel with mapping:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Validate raw data has sufficient rows\n   * @param {Array} rawData - Raw Excel data\n   * @param {number} dataRowIndex - Index of first data row\n   */\n  validateRawData(rawData, dataRowIndex) {\n    if (!rawData || rawData.length <= dataRowIndex) {\n      throw new Error(\"Insufficient data rows in Excel file\");\n    }\n  }\n\n  /**\n   * Process data rows and convert to transactions\n   * @param {Array} rawData - Raw Excel data\n   * @param {Array<string>} headerMapping - Header mapping array\n   * @param {number} dataRowIndex - Index of first data row\n   * @returns {Array} Array of transaction objects\n   */\n  processDataRows(rawData, headerMapping, dataRowIndex) {\n    const transactions = [];\n\n    for (let rowIndex = dataRowIndex; rowIndex < rawData.length; rowIndex++) {\n      const row = rawData[rowIndex];\n\n      if (this.isEmptyRow(row)) continue;\n\n      const transaction = this.createTransactionFromRow(\n        row,\n        headerMapping,\n        rowIndex\n      );\n\n      if (transaction.date) {\n        transactions.push(transaction);\n      }\n    }\n\n    return transactions;\n  }\n\n  /**\n   * Check if a row is empty\n   * @param {Array} row - Excel row data\n   * @returns {boolean} True if row is empty\n   */\n  isEmptyRow(row) {\n    return !row || row.length === 0;\n  }\n\n  /**\n   * Create transaction object from Excel row\n   * @param {Array} row - Excel row data\n   * @param {Array<string>} headerMapping - Header mapping array\n   * @param {number} rowIndex - Current row index\n   * @returns {Object} Transaction object\n   */\n  createTransactionFromRow(row, headerMapping, rowIndex) {\n    const transaction = {\n      id: uuid.v4(),\n      fileName: \"excel-import\",\n      sourceRow: rowIndex + 1,\n    };\n\n    this.mapRowToTransaction(row, headerMapping, transaction);\n    return transaction;\n  }\n\n  /**\n   * Map Excel row data to transaction fields\n   * @param {Array} row - Excel row data\n   * @param {Array<string>} headerMapping - Header mapping array\n   * @param {Object} transaction - Transaction object to populate\n   */\n  mapRowToTransaction(row, headerMapping, transaction) {\n    for (\n      let colIndex = 0;\n      colIndex < headerMapping.length && colIndex < row.length;\n      colIndex++\n    ) {\n      const fieldName = headerMapping[colIndex];\n      const cellValue = row[colIndex];\n\n      if (this.isValidFieldValue(fieldName, cellValue)) {\n        transaction[fieldName.toLowerCase()] = this.convertCellValue(\n          fieldName,\n          cellValue\n        );\n      }\n    }\n  }\n\n  /**\n   * Check if field name and cell value are valid\n   * @param {string} fieldName - Field name from header mapping\n   * @param {any} cellValue - Cell value from Excel\n   * @returns {boolean} True if valid\n   */\n  isValidFieldValue(fieldName, cellValue) {\n    return (\n      fieldName &&\n      fieldName !== \"ΓÇô\" &&\n      cellValue !== null &&\n      cellValue !== undefined\n    );\n  }\n\n  /**\n   * Convert cell value based on field type\n   * @param {string} fieldName - Field name\n   * @param {any} cellValue - Cell value\n   * @returns {string} Converted value\n   */\n  convertCellValue(fieldName, cellValue) {\n    if (fieldName.toLowerCase() === \"date\" && this.isExcelDate(cellValue)) {\n      return this.convertExcelDate(cellValue);\n    }\n    return String(cellValue).trim();\n  }\n\n  /**\n   * Check if a value is an Excel date serial number\n   * @param {any} value - Value to check\n   * @returns {boolean} True if it appears to be an Excel date\n   */\n  isExcelDate(value) {\n    const num = parseFloat(value);\n    if (isNaN(num)) return false;\n\n    // FIXED: Only convert numbers that are actual Excel dates\n    // Use the same range as the centralized dateUtils\n    return num >= 25000 && num <= 100000 && Number.isInteger(num);\n  }\n\n  /**\n   * Convert Excel date serial number to ISO date string\n   * @param {number} excelDate - Excel date serial number\n   * @returns {string} ISO date string (YYYY-MM-DD)\n   */\n  convertExcelDate(excelDate) {\n    try {\n      const num = parseFloat(excelDate);\n      if (isNaN(num)) return String(excelDate);\n\n      // FIXED: Use the correct Excel epoch and calculation\n      // Excel's epoch is January 1, 1900, but Excel incorrectly considers 1900 a leap year\n      const excelEpoch = new Date(1900, 0, 1); // January 1, 1900\n      const msPerDay = 24 * 60 * 60 * 1000;\n\n      // FIXED: Use (excelDate - 1) instead of (excelDate - 2) for correct date calculation\n      const jsDate = new Date(\n        excelEpoch.getTime() + (excelDate - 1) * msPerDay\n      );\n\n      if (isNaN(jsDate.getTime())) {\n        return String(excelDate); // Return original if conversion fails\n      }\n\n      // Return ISO date string (YYYY-MM-DD)\n      return jsDate.toISOString().split(\"T\")[0];\n    } catch (error) {\n      console.error(\"Error converting Excel date:\", error);\n      return String(excelDate);\n    }\n  }\n\n  /**\n   * Get sheet names from Excel file\n   * @param {string|ArrayBuffer} fileContent - The file content\n   * @returns {Promise<Array<string>>} Array of sheet names\n   */\n  async getSheetNames(fileContent) {\n    try {\n      await this.ensureInitialized();\n\n      if (!XLSX) {\n        throw new Error(\"XLSX library not available\");\n      }\n\n      const workbook = XLSX.read(fileContent, { type: \"string\" });\n      return workbook.SheetNames || [];\n    } catch (error) {\n      console.error(\"Error getting sheet names:\", error);\n      return [];\n    }\n  }\n\n  /**\n   * Parse specific sheet by name\n   * @param {string|ArrayBuffer} fileContent - The file content\n   * @param {string} sheetName - Name of the sheet to parse\n   * @returns {Promise<Array>} 2D array of sheet data\n   */\n  async parseSheet(fileContent, sheetName) {\n    try {\n      await this.ensureInitialized();\n\n      if (!XLSX) {\n        throw new Error(\"XLSX library not available\");\n      }\n\n      const workbook = XLSX.read(fileContent, { type: \"string\" });\n\n      if (!workbook.Sheets[sheetName]) {\n        throw new Error(`Sheet '${sheetName}' not found`);\n      }\n\n      const sheet = workbook.Sheets[sheetName];\n      const rawData = XLSX.utils.sheet_to_json(sheet, {\n        header: 1,\n        raw: false,\n      });\n\n      return rawData;\n    } catch (error) {\n      console.error(\"Error parsing specific sheet:\", error);\n      throw error;\n    }\n  }\n}\n\n// Export for both CommonJS and ES modules\nconst excelParser = new ExcelParser();\n\nif (typeof module !== \"undefined\" && module.exports) {\n  module.exports = ExcelParser;\n  module.exports.default = ExcelParser;\n  module.exports.excelParser = excelParser;\n} else if (typeof window !== \"undefined\") {\n  window.ExcelParser = ExcelParser;\n  window.excelParser = excelParser;\n}\n\n// ES6 export\nexport default ExcelParser;\nexport { excelParser };\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\parsers\\fileHandler.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":12,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":12,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[287,366],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'validateFileData' is defined but never used.","line":15,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":26},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":71,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":71,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1866,1911],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":112,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":112,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2872,2919],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":158,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":158,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4168,4267],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":190,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":190,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5085,5132],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'mapping' is assigned a value but never used.","line":275,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":275,"endColumn":10},{"ruleId":"no-unused-vars","severity":1,"message":"'currency' is assigned a value but never used.","line":276,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":276,"endColumn":11},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":323,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":323,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8756,8923],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'createContentSignature' is defined but never used.","line":401,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":401,"endColumn":32},{"ruleId":"no-unused-vars","severity":1,"message":"'createFormatSignature' is defined but never used.","line":451,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":451,"endColumn":31},{"ruleId":"no-unused-vars","severity":1,"message":"'createMappingSignature' is defined but never used.","line":458,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":458,"endColumn":32},{"ruleId":"no-unused-vars","severity":1,"message":"'createSignatureFromStructure' is defined but never used.","line":467,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":467,"endColumn":38},{"ruleId":"no-unused-vars","severity":1,"message":"'createSignatureFromMapping' is defined but never used.","line":482,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":482,"endColumn":36},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used. Allowed unused args must match /^_/u.","line":482,"column":62,"nodeType":"Identifier","messageId":"unusedVar","endLine":482,"endColumn":66},{"ruleId":"no-unused-vars","severity":1,"message":"'getOption' is defined but never used.","line":604,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":604,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":625,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":625,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17444,17492],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Directory: /src/parsers/fileHandler.js\n\n// Update imports\nimport { AppState } from \"../core/appState.js\";\nimport {\n  isExcelDate,\n  excelDateToJSDate,\n  validateAndNormalizeDate,\n} from \"../utils/dateUtils.js\";\n\n// Guarded log to avoid ReferenceError in non-browser/test environments\nconsole.log(\"XLSX object:\", typeof XLSX !== \"undefined\" ? XLSX : \"not loaded\");\n\n// Add better file validation\nfunction validateFileData(data) {\n  if (!Array.isArray(data)) {\n    throw new Error(\"Invalid file format: Data must be an array.\");\n  }\n\n  if (data.length < 2) {\n    throw new Error(\n      \"File must contain at least one header row and one data row.\"\n    );\n  }\n\n  // Clean up data - remove empty rows and empty cells at the beginning\n  const cleanedData = data.filter(\n    (row) =>\n      Array.isArray(row) &&\n      row.length > 0 &&\n      row.some(\n        (cell) =>\n          cell !== null && cell !== undefined && cell.toString().trim() !== \"\"\n      )\n  );\n\n  if (cleanedData.length === 0) {\n    throw new Error(\"File contains no valid data rows.\");\n  }\n\n  // Find the first non-empty row to use as headers\n  const headerIndex = cleanedData.findIndex((row) =>\n    row.some(\n      (cell) =>\n        cell !== null && cell !== undefined && cell.toString().trim() !== \"\"\n    )\n  );\n\n  if (headerIndex === -1) {\n    throw new Error(\"File must contain a valid header row.\");\n  }\n\n  // Make sure there's at least one data row after the header\n  if (cleanedData.length <= headerIndex + 1) {\n    throw new Error(\n      \"File must contain at least one data row after the header.\"\n    );\n  }\n\n  return cleanedData;\n}\n\n// Add more robust error handling for file operations\n\n/**\n * Handles all file uploads and parsing\n * @param {File} file - The file to handle\n * @returns {Promise<Array<Array>>} Parsed data as a 2D array\n */\nexport async function handleFileUpload(file) {\n  console.log(`Processing file: ${file.name}`);\n\n  if (!file) {\n    throw new Error(\"No file provided\");\n  }\n\n  const fileExtension = file.name.split(\".\").pop().toLowerCase();\n\n  switch (fileExtension) {\n    case \"csv\":\n      return await parseCSV(file);\n    case \"xlsx\":\n    case \"xls\":\n      return await parseExcel(file);\n    case \"xml\":\n      return await parseXML(file);\n    default:\n      throw new Error(`Unsupported file type: ${fileExtension}`);\n  }\n}\n\n/**\n * Parse CSV file\n * @param {File} file - The CSV file\n * @returns {Promise<Array<Array>>} Parsed data\n */\nasync function parseCSV(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onload = function (e) {\n      try {\n        const text = e.target.result;\n        const rows = text\n          .split(\"\\n\")\n          .map((row) => {\n            // Simple CSV parsing - handles quoted fields\n            return parseCSVRow(row);\n          })\n          .filter((row) => row.length > 0);\n\n        console.log(`Parsed CSV: ${rows.length} rows`);\n        resolve(rows);\n      } catch (error) {\n        reject(new Error(`CSV parsing error: ${error.message}`));\n      }\n    };\n\n    reader.onerror = () => reject(new Error(\"Failed to read CSV file\"));\n    reader.readAsText(file);\n  });\n}\n\n/**\n * Parse Excel file using SheetJS\n * @param {File} file - The Excel file\n * @returns {Promise<Array<Array>>} Parsed data\n */\nasync function parseExcel(file) {\n  // Check if XLSX library is available\n  if (typeof XLSX === \"undefined\") {\n    // Try to load XLSX dynamically\n    try {\n      await loadXLSXLibrary();\n    } catch (error) {\n      console.error(\"Failed to load XLSX library:\", error);\n      throw new Error(\n        `Excel parsing requires XLSX library. Load failed: ${error.message}`\n      );\n    }\n  }\n\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onload = function (e) {\n      try {\n        const data = e.target.result;\n        const workbook = XLSX.read(data, { type: \"array\" });\n\n        // Get first worksheet\n        const sheetName = workbook.SheetNames[0];\n        const worksheet = workbook.Sheets[sheetName];\n\n        // Convert to array of arrays\n        const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n\n        console.log(\n          `Parsed Excel: ${jsonData.length} rows from sheet \"${sheetName}\"`\n        );\n        resolve(jsonData);\n      } catch (error) {\n        reject(new Error(`Excel parsing error: ${error.message}`));\n      }\n    };\n\n    reader.onerror = () => reject(new Error(\"Failed to read Excel file\"));\n    reader.readAsArrayBuffer(file);\n  });\n}\n\n/**\n * Parse XML file\n * @param {File} file - The XML file\n * @returns {Promise<Array<Array>>} Parsed data\n */\nasync function parseXML(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onload = function (e) {\n      try {\n        const text = e.target.result;\n        const parser = new DOMParser();\n        const xmlDoc = parser.parseFromString(text, \"text/xml\");\n\n        // Basic XML parsing - you might need to customize this based on your XML structure\n        const rows = parseXMLToRows(xmlDoc);\n\n        console.log(`Parsed XML: ${rows.length} rows`);\n        resolve(rows);\n      } catch (error) {\n        reject(new Error(`XML parsing error: ${error.message}`));\n      }\n    };\n\n    reader.onerror = () => reject(new Error(\"Failed to read XML file\"));\n    reader.readAsText(file);\n  });\n}\n\n/**\n * Parse a single CSV row handling quoted fields\n * @param {string} row - CSV row string\n * @returns {Array<string>} Parsed fields\n */\nfunction parseCSVRow(row) {\n  const result = [];\n  let current = \"\";\n  let inQuotes = false;\n  let i = 0;\n\n  while (i < row.length) {\n    const char = row[i];\n\n    if (char === '\"') {\n      if (inQuotes && row[i + 1] === '\"') {\n        // Escaped quote\n        current += '\"';\n        i += 2; // Skip both quotes\n      } else {\n        // Toggle quote state\n        inQuotes = !inQuotes;\n        i++;\n      }\n    } else if (char === \",\" && !inQuotes) {\n      // Field separator\n      result.push(current.trim());\n      current = \"\";\n      i++;\n    } else {\n      current += char;\n      i++;\n    }\n  }\n\n  // Add last field\n  result.push(current.trim());\n\n  return result.filter((field) => field !== \"\");\n}\n\n/**\n * Parse XML document to rows\n * @param {Document} xmlDoc - Parsed XML document\n * @returns {Array<Array>} Parsed rows\n */\nfunction parseXMLToRows(xmlDoc) {\n  // This is a basic implementation - customize based on your XML structure\n  const rows = [];\n  const elements = xmlDoc.getElementsByTagName(\"*\");\n\n  // Simple approach: treat each element as a potential row\n  for (const element of elements) {\n    if (element.children.length === 0 && element.textContent.trim()) {\n      // Leaf element with text content\n      rows.push([element.tagName, element.textContent.trim()]);\n    }\n  }\n\n  return rows;\n}\n\n/**\n * FIXED: Generate structure-based signature that ignores file format\n * @param {string} fileName - The file name\n * @param {Array<Array>} data - File data as 2D array\n * @param {Array<string>} [mapping] - Optional column mapping\n * @param {string} currency - File currency (optional)\n * @returns {string} File signature\n */\nexport function generateFileSignature(\n  fileName,\n  data,\n  mapping = null,\n  currency = null\n) {\n  if (!data?.[0]) {\n    return \"empty-file\";\n  }\n\n  try {\n    // CRITICAL FIX: Create signature based on file STRUCTURE only, not format\n    const columnCount = data[0] ? data[0].length : 0;\n\n    // FIXED: Include header content in signature for better uniqueness, normalized\n    const headerContent = data[0]\n      ? data[0]\n          .map((cell) => {\n            if (!cell) return \"\";\n            return String(cell)\n              .toLowerCase()\n              .replace(/[^a-z0-9]/g, \"\") // Remove special chars\n              .substring(0, 10); // Limit length\n          })\n          .join(\"|\")\n      : \"\";\n\n    // FIXED: Analyze data patterns to create structure fingerprint\n    const dataPatterns = analyzeDataPatterns(data);\n\n    // CRITICAL FIX: Create signature based ONLY on structure, not file extension\n    const structureData = {\n      columnCount: columnCount,\n      headerContent: headerContent,\n      hasSecondRow: data.length > 1,\n      rowCount: Math.min(data.length, 5), // First 5 rows for pattern\n      dataPatterns: dataPatterns,\n      // REMOVED: file extension completely from signature\n    };\n\n    const structureString = JSON.stringify(structureData);\n\n    // Create a consistent hash\n    let hash = 0;\n    for (let i = 0; i < structureString.length; i++) {\n      const char = structureString.charCodeAt(i);\n      hash = (hash << 5) - hash + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n\n    const signature = `struct_${Math.abs(hash).toString(36)}`;\n    console.log(\n      \"CRITICAL: Generated STRUCTURE-BASED signature:\",\n      signature,\n      \"for file:\",\n      fileName,\n      \"structure:\",\n      structureData\n    );\n\n    return signature;\n  } catch (error) {\n    console.error(\"CRITICAL ERROR: Error generating signature:\", error);\n    return `fallback_${Date.now()}`;\n  }\n}\n\n/**\n * FIXED: Analyze data patterns for better structure matching\n * @param {Array<Array>} data - File data\n * @returns {Object} Data patterns analysis\n */\nfunction analyzeDataPatterns(data) {\n  if (!data || data.length < 2) {\n    return { hasData: false };\n  }\n\n  try {\n    // Analyze first few data rows (skip header)\n    const sampleRows = data.slice(1, Math.min(4, data.length));\n    const patterns = {\n      hasData: true,\n      columnTypes: [],\n      nonEmptyColumns: 0,\n    };\n\n    // Analyze each column's data type pattern\n    for (let colIndex = 0; colIndex < (data[0]?.length || 0); colIndex++) {\n      const columnValues = sampleRows\n        .map((row) => row[colIndex])\n        .filter((val) => val !== null && val !== undefined && val !== \"\");\n\n      if (columnValues.length === 0) {\n        patterns.columnTypes[colIndex] = \"empty\";\n        continue;\n      }\n\n      patterns.nonEmptyColumns++;\n\n      // Determine column type based on content\n      const hasNumbers = columnValues.some((val) => !isNaN(parseFloat(val)));\n      const hasText = columnValues.some(\n        (val) => isNaN(parseFloat(val)) && String(val).length > 2\n      );\n      const hasDates = columnValues.some((val) => {\n        return isExcelDate(val) || !isNaN(Date.parse(val));\n      });\n\n      if (hasDates) {\n        patterns.columnTypes[colIndex] = \"date\";\n      } else if (hasNumbers && !hasText) {\n        patterns.columnTypes[colIndex] = \"number\";\n      } else if (hasText) {\n        patterns.columnTypes[colIndex] = \"text\";\n      } else {\n        patterns.columnTypes[colIndex] = \"mixed\";\n      }\n    }\n\n    return patterns;\n  } catch (error) {\n    console.error(\"Error analyzing data patterns:\", error);\n    return { hasData: false, error: true };\n  }\n}\n\n/**\n * Creates a signature based on content to detect duplicates\n */\nfunction createContentSignature(data) {\n  if (!data || data.length < 2) return \"empty\";\n\n  try {\n    // Use the first few data rows for the signature\n    const sampleSize = Math.min(3, data.length - 1);\n    const samples = [];\n\n    for (let i = 1; i <= sampleSize; i++) {\n      if (data[i]) {\n        // Take the first few cells from each row\n        const rowSample = data[i].slice(0, Math.min(3, data[i].length));\n        samples.push(rowSample.join(\"|\"));\n      }\n    }\n\n    return samples.join(\"::\");\n  } catch (error) {\n    console.error(\"Error creating content signature:\", error);\n    return \"error\";\n  }\n}\n\n// Helper to get signature as string\nexport function getSignatureString(signature) {\n  if (!signature) return \"\";\n\n  if (typeof signature === \"string\") {\n    return signature;\n  }\n\n  // Use toString if available (for our new signature objects)\n  if (\n    typeof signature.toString === \"function\" &&\n    signature.toString !== Object.prototype.toString\n  ) {\n    return signature.toString();\n  }\n\n  // Otherwise extract one of the signatures\n  return (\n    signature.mappingSig ||\n    signature.formatSig ||\n    signature.contentSig ||\n    signature.structureSig ||\n    JSON.stringify(signature)\n  );\n}\n\n// Format signature - based purely on column count and file type\nfunction createFormatSignature(fileName, data) {\n  const fileFormat = fileName.split(\".\").pop().toLowerCase();\n  const columnCount = data[0]?.length || 0;\n  return simpleHash(`${fileFormat}:${columnCount}:format`);\n}\n\n// Mapping signature - based on user-defined header mapping\nfunction createMappingSignature(fileName, headerMapping) {\n  const fileFormat = fileName.split(\".\").pop().toLowerCase();\n  const filterMapping = headerMapping.filter((h) => h !== \"ΓÇô\");\n  const mappingString = filterMapping.join(\"|\");\n  return simpleHash(`${fileFormat}:${mappingString}:mapping`);\n}\n\n// Update the signature generation for XML files\n\nfunction createSignatureFromStructure(fileName, data) {\n  const fileFormat = fileName.split(\".\").pop().toLowerCase();\n\n  // For XML files, use a more consistent approach\n  if (fileFormat === \"xml\") {\n    // Focus on column count and pattern rather than specific content\n    const columnCount = data[0]?.length || 0;\n\n    // Create a signature based on column count and file extension\n    return simpleHash(`xml:${columnCount}:columns`);\n  }\n\n  // Rest of the function for other file types...\n}\n\nfunction createSignatureFromMapping(fileName, headerMapping, data) {\n  const fileFormat = fileName.split(\".\").pop().toLowerCase();\n  const filterMapping = headerMapping.filter((h) => h !== \"ΓÇô\");\n  const mappingString = filterMapping.join(\"|\");\n\n  // Create a signature that includes both structure and user-defined mapping\n  const mappingSignature = `${fileFormat}:${filterMapping.length}:${mappingString}`;\n  return simpleHash(mappingSignature);\n}\n\nfunction simpleHash(str) {\n  let hash = 0;\n  for (const char of str) {\n    const charCode = char.charCodeAt(0);\n    hash = (hash << 5) - hash + charCode;\n    hash = hash & hash;\n  }\n  return Math.abs(hash).toString(36).substring(0, 12);\n}\n\n/**\n * Helper function to check if a value is a potential Excel date\n * @deprecated Use isExcelDate from dateUtils instead\n */\nexport function isExcelDateLocal(value) {\n  console.warn(\n    \"fileHandler.isExcelDateLocal is deprecated. Use isExcelDate from dateUtils instead.\"\n  );\n  return isExcelDate(value);\n}\n\n/**\n * Helper function to be used in transactionManager.js\n */\nexport function convertExcelDates(transactions) {\n  return transactions.map((tx) => {\n    if (tx.date) {\n      const dateValidation = validateAndNormalizeDate(tx.date);\n      if (dateValidation.isValid) {\n        tx.date = dateValidation.normalizedDate;\n      }\n    }\n    return tx;\n  });\n}\n\n/**\n * Export the excelDateToJSDate function for use in transactionManager.js\n * @deprecated Use excelDateToISOString from dateUtils instead\n */\nexport function excelDateToJSDateLocal(excelDate) {\n  console.warn(\n    \"fileHandler.excelDateToJSDateLocal is deprecated. Use excelDateToISOString from dateUtils instead.\"\n  );\n  return excelDateToJSDate(excelDate);\n}\n\n// Update the isDuplicateFile function\n\n/**\n * Checks if a file is already in the merged files list\n * @param {String} fileName - The name of the file\n * @param {Object|String} signature - The file signature\n * @returns {Object|null} - The duplicate file or null\n */\nexport function isDuplicateFile(fileName, signature) {\n  // First check by exact file name\n  const duplicateByName = AppState.mergedFiles.find(\n    (f) => f.fileName === fileName\n  );\n  if (duplicateByName) return duplicateByName;\n\n  // Next check by signature\n  const duplicateBySig = AppState.mergedFiles.find((f) => {\n    // Normalizing signatures for comparison\n    const fileSig =\n      typeof f.signature === \"object\"\n        ? f.signature.formatSig ||\n          f.signature.structureSig ||\n          f.signature.mappingSig\n        : f.signature;\n\n    const checkSig =\n      typeof signature === \"object\"\n        ? signature.formatSig || signature.structureSig || signature.mappingSig\n        : signature;\n\n    return fileSig === checkSig;\n  });\n\n  return duplicateBySig || null;\n}\n\n/**\n * Ensure all transactions have unique IDs\n * @param {Array} transactions - Array of transactions to process\n * @returns {Array} Transactions with guaranteed unique IDs\n */\nexport function ensureTransactionIds(transactions) {\n  if (!Array.isArray(transactions)) return [];\n\n  const usedIds = new Set();\n\n  return transactions.map((tx, index) => {\n    if (!tx.id || usedIds.has(tx.id)) {\n      // Generate new unique ID\n      let newId;\n      do {\n        newId = `tx_${Date.now()}_${Math.random()\n          .toString(36)\n          .substring(2, 11)}_${index}`;\n      } while (usedIds.has(newId));\n\n      tx.id = newId;\n    }\n\n    usedIds.add(tx.id);\n    return tx;\n  });\n}\n\n// Utility: safely read option with default\nfunction getOption(options, name, defaultValue) {\n  return options && options[name] !== undefined ? options[name] : defaultValue;\n}\n\n/**\n * Load XLSX library dynamically\n * @returns {Promise} Promise that resolves when library is loaded\n */\nasync function loadXLSXLibrary() {\n  return new Promise((resolve, reject) => {\n    // Check if already loaded\n    if (typeof XLSX !== \"undefined\") {\n      resolve();\n      return;\n    }\n\n    // Create script element\n    const script = document.createElement(\"script\");\n    script.src =\n      \"https://cdn.sheetjs.com/xlsx-0.20.1/package/dist/xlsx.full.min.js\";\n    script.onload = () => {\n      console.log(\"XLSX library loaded successfully\");\n      resolve();\n    };\n    script.onerror = () => {\n      reject(new Error(\"Failed to load XLSX library\"));\n    };\n\n    document.head.appendChild(script);\n  });\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\parsers\\xmlParser.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":12,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":12,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[251,289],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":54,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":54,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1419,1488],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":55,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":55,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1493,1558],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":66,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":66,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1889,1938],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":73,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":73,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2066,2126],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":84,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":84,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2422,2496],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":85,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":85,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2501,2555],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":86,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":86,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2560,2608],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * XML Parser for transaction data\n */\n\n/**\n * Parse XML content to extract transaction data\n * @param {string} xmlContent - Raw XML content\n * @returns {Array<Array>} 2D array of parsed data\n */\nexport function parseXML(xmlContent) {\n  try {\n    console.log(\"Parsing XML content...\");\n\n    const parser = new DOMParser();\n    const xmlDoc = parser.parseFromString(xmlContent, \"text/xml\");\n\n    // Check for parsing errors\n    const parseError = xmlDoc.querySelector(\"parsererror\");\n    if (parseError) {\n      throw new Error(\"XML parsing failed: \" + parseError.textContent);\n    }\n\n    // Find transaction elements (try different common element names)\n    const transactionSelectors = [\n      \"transaction\",\n      \"Transaction\",\n      \"record\",\n      \"Record\",\n      \"row\",\n      \"Row\",\n    ];\n    let transactions = [];\n    let elementName = \"\";\n\n    for (const selector of transactionSelectors) {\n      transactions = xmlDoc.querySelectorAll(selector);\n      if (transactions.length > 0) {\n        elementName = selector;\n        break;\n      }\n    }\n\n    if (transactions.length === 0) {\n      console.warn(\n        \"No transaction elements found. Trying to parse all child elements...\"\n      );\n      const rootElement = xmlDoc.documentElement;\n      if (rootElement && rootElement.children.length > 0) {\n        transactions = rootElement.children;\n        elementName = \"child elements\";\n      }\n    }\n\n    console.log(`Found transactions using element name: ${elementName}`);\n    console.log(`Found ${transactions.length} transaction elements`);\n\n    if (transactions.length === 0) {\n      throw new Error(\"No transaction data found in XML file\");\n    }\n\n    // Extract field names from the first transaction\n    const firstTransaction = transactions[0];\n    const fieldNames = Array.from(firstTransaction.children).map((child) =>\n      child.tagName.toLowerCase()\n    );\n    console.log(`Detected field names:`, fieldNames);\n\n    // Convert transactions to 2D array format\n    const result = [];\n\n    // Add header row\n    result.push(fieldNames);\n    console.log(`Added header row: [${fieldNames.join(\", \")}]`);\n\n    // Add transaction data rows\n    for (const transaction of transactions) {\n      const row = fieldNames.map((fieldName) => {\n        const element = transaction.querySelector(fieldName);\n        return element ? element.textContent.trim() : \"\";\n      });\n      result.push(row);\n    }\n\n    console.log(`Extracted ${result.length} rows of data (including header)`);\n    console.log(`Transaction rows: ${result.length - 1}`);\n    console.log(`Sample data:`, result.slice(0, 3));\n\n    return result;\n  } catch (error) {\n    console.error(\"Error parsing XML:\", error);\n    throw new Error(`XML parsing failed: ${error.message}`);\n  }\n}\n\n/**\n * Default export for compatibility\n */\nexport default {\n  parseXML,\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\service-worker.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\tests\\final-test-check.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\tests\\real-test-execution.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\tests\\setup.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\ui\\RegexRuleEditor.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\ui\\categories\\categoryModal.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\ui\\categories\\categoryUI.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used. Allowed unused args must match /^_/u.","line":441,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":441,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AppState } from \"../../core/appState.js\";\nimport {\n  addCategory,\n  updateCategory,\n  deleteCategory,\n  addSubcategory,\n  updateSubcategory,\n  deleteSubcategory,\n} from \"../categoryManager.js\";\n\n/**\n * Render the category UI within the provided container\n */\nexport function renderCategoryUI(container) {\n  if (!container) {\n    console.error(\"No container provided for category UI\");\n    return;\n  }\n\n  // Clear existing content\n  container.innerHTML = \"\";\n\n  // Build and insert the category list HTML\n  const categoryListHTML = buildCategoryList();\n  container.innerHTML = categoryListHTML;\n\n  // Attach event listeners\n  attachCategoryEventListeners(container);\n}\n\n/**\n * Build HTML for the categories list\n */\nexport function buildCategoryList() {\n  const categories = AppState.categories || {};\n  const sortedCategories = Object.keys(categories).sort((a, b) =>\n    a.localeCompare(b)\n  );\n\n  let html = `\n    <div class=\"add-category-form\">\n      <input type=\"text\" id=\"newCategoryName\" placeholder=\"Category name\" />\n      <input type=\"color\" id=\"newCategoryColor\" value=\"#4CAF50\" />\n      <button id=\"addCategoryBtn\" class=\"button primary-btn\">Add Category</button>\n    </div>\n    <div class=\"categories-list\">\n  `;\n\n  if (sortedCategories.length === 0) {\n    html += '<p class=\"empty-state\">No categories defined yet.</p>';\n  } else {\n    sortedCategories.forEach((categoryName) => {\n      const categoryValue = categories[categoryName];\n      // Fix color format - ensure 6 digit hex\n      let color = \"#cccccc\"; // default\n      if (typeof categoryValue === \"string\") {\n        color = categoryValue;\n      } else if (typeof categoryValue === \"object\" && categoryValue.color) {\n        color = categoryValue.color;\n      }\n\n      // Ensure color is 6 digits\n      if (color.length === 4) {\n        color = color + color.slice(1); // #abc -> #aabbcc\n      }\n\n      html += `\n        <div class=\"category-edit-row\" draggable=\"true\" data-category=\"${categoryName}\">\n          <div class=\"category-drag-handle\">Γï«Γï«</div>\n          <input type=\"color\" value=\"${color}\" class=\"edit-category-color\" data-category=\"${categoryName}\">\n          <input type=\"text\" value=\"${categoryName}\" class=\"category-name-input\" data-original-name=\"${categoryName}\">\n          <button class=\"update-category-btn button secondary-btn\" data-category=\"${categoryName}\">Update</button>\n          <button class=\"delete-category-btn button danger-btn\" data-category=\"${categoryName}\">Delete</button>\n          <button class=\"toggle-subcategory-btn button\" data-category=\"${categoryName}\">\n            ${\n              typeof categoryValue === \"object\" && categoryValue.subcategories\n                ? \"Hide\"\n                : \"Show\"\n            } Subcategories\n          </button>\n        </div>\n\n        ${\n          typeof categoryValue === \"object\" && categoryValue.subcategories\n            ? `<div class=\"subcategories-container\" data-parent=\"${categoryName}\" style=\"display: block;\">\n            ${renderSubcategories(categoryName, categoryValue)}\n          </div>`\n            : `<div class=\"subcategories-container\" data-parent=\"${categoryName}\" style=\"display: none;\">\n            ${renderSubcategories(categoryName, { subcategories: {} })}\n          </div>`\n        }\n      `;\n    });\n  }\n\n  html += `\n    </div>\n    <div class=\"category-actions\">\n      <button id=\"closeCategoryManagerBtn\" class=\"button secondary-btn\">Close</button>\n    </div>\n  `;\n\n  return html;\n}\n\n/**\n * Render subcategories for a parent category\n */\nfunction renderSubcategories(parentName, parentCategory) {\n  let html = '<div style=\"margin-left: 20px;\">';\n\n  // Check if this category has subcategories\n  if (\n    typeof parentCategory === \"object\" &&\n    parentCategory.subcategories &&\n    Object.keys(parentCategory.subcategories).length > 0\n  ) {\n    // Sort subcategories alphabetically\n    const sortedSubcategories = Object.keys(parentCategory.subcategories).sort(\n      (a, b) => a.localeCompare(b)\n    );\n\n    sortedSubcategories.forEach((subName) => {\n      let subColor = parentCategory.subcategories[subName];\n      // Ensure color is 6 digits\n      if (subColor && subColor.length === 4) {\n        subColor = subColor + subColor.slice(1);\n      }\n      if (!subColor || subColor.length !== 7) {\n        subColor = \"#8bd48b\";\n      }\n\n      html += `\n        <div class=\"subcategory-edit-row\">\n          <input type=\"color\" value=\"${subColor}\"\n                 class=\"edit-subcategory-color\" data-parent=\"${parentName}\" data-subcategory=\"${subName}\">\n          <input type=\"text\" value=\"${subName}\" class=\"subcategory-name-input\"\n                 data-parent=\"${parentName}\" data-original-name=\"${subName}\">\n          <button class=\"update-subcategory-btn button secondary-btn\"\n                  data-parent=\"${parentName}\" data-subcategory=\"${subName}\">Update</button>\n          <button class=\"delete-subcategory-btn button danger-btn\"\n                  data-parent=\"${parentName}\" data-subcategory=\"${subName}\">Delete</button>\n        </div>\n      `;\n    });\n  } else {\n    html +=\n      '<p style=\"font-style: italic; color: #666;\">No subcategories yet</p>';\n  }\n\n  // Add form to create new subcategory\n  html += `\n    <div class=\"add-subcategory-form\" style=\"margin-top: 10px;\">\n      <input type=\"color\" class=\"new-subcategory-color\" value=\"#8bd48b\" data-parent=\"${parentName}\">\n      <input type=\"text\" class=\"new-subcategory-name\" placeholder=\"New Subcategory\" data-parent=\"${parentName}\">\n      <button class=\"add-subcategory-btn button primary-btn\" data-parent=\"${parentName}\">Add</button>\n    </div>\n  `;\n\n  html += \"</div>\";\n  return html;\n}\n\n/**\n * Attach event listeners to category UI elements\n */\nfunction attachCategoryEventListeners(container) {\n  // Add category button\n  const addCategoryBtn = container.querySelector(\"#addCategoryBtn\");\n  if (addCategoryBtn) {\n    addCategoryBtn.addEventListener(\"click\", () => {\n      const nameInput = container.querySelector(\"#newCategoryName\");\n      const colorInput = container.querySelector(\"#newCategoryColor\");\n\n      if (!nameInput || !colorInput) return;\n\n      const name = nameInput.value.trim();\n      const color = colorInput.value;\n\n      if (!name) {\n        import(\"../uiManager.js\").then((module) => {\n          module.showToast(\"Please enter a category name\", \"error\");\n        });\n        return;\n      }\n\n      if (addCategory(name, color)) {\n        // Reset inputs and re-render\n        nameInput.value = \"\";\n        renderCategoryUI(container);\n\n        // Trigger update of transaction filters\n        setTimeout(() => {\n          if (window.updateTransactions) {\n            window.updateTransactions();\n          }\n        }, 100);\n      }\n    });\n  }\n\n  // Close modal button\n  const closeBtn = container.querySelector(\"#closeCategoryManagerBtn\");\n  if (closeBtn) {\n    closeBtn.addEventListener(\"click\", () => {\n      // Close the modal by finding and clicking the modal close button\n      const modalClose = document.querySelector(\".modal-close\");\n      if (modalClose) {\n        modalClose.click();\n      }\n    });\n  }\n\n  // Toggle subcategories buttons\n  container.querySelectorAll(\".toggle-subcategory-btn\").forEach((btn) => {\n    btn.addEventListener(\"click\", (e) => {\n      const categoryName = e.target.getAttribute(\"data-category\");\n      const subcategoriesContainer = container.querySelector(\n        `.subcategories-container[data-parent=\"${categoryName}\"]`\n      );\n\n      if (subcategoriesContainer) {\n        const isVisible = subcategoriesContainer.style.display !== \"none\";\n        subcategoriesContainer.style.display = isVisible ? \"none\" : \"block\";\n        e.target.textContent = isVisible\n          ? \"Show Subcategories\"\n          : \"Hide Subcategories\";\n      }\n    });\n  });\n\n  // Update category buttons\n  container.querySelectorAll(\".update-category-btn\").forEach((btn) => {\n    btn.addEventListener(\"click\", (e) => {\n      const categoryName = e.target.getAttribute(\"data-category\");\n      const colorInput = container.querySelector(\n        `.edit-category-color[data-category=\"${categoryName}\"]`\n      );\n      const nameInput = container.querySelector(\n        `.category-name-input[data-original-name=\"${categoryName}\"]`\n      );\n\n      if (!colorInput || !nameInput) return;\n\n      const newColor = colorInput.value;\n      const newName = nameInput.value.trim();\n\n      if (!newName) {\n        import(\"../uiManager.js\").then((module) => {\n          module.showToast(\"Category name cannot be empty\", \"error\");\n        });\n        return;\n      }\n\n      if (updateCategory(categoryName, newName, newColor)) {\n        renderCategoryUI(container);\n\n        // Trigger update of transaction filters\n        setTimeout(() => {\n          if (window.updateTransactions) {\n            window.updateTransactions();\n          }\n        }, 100);\n      }\n    });\n  });\n\n  // Delete category buttons\n  container.querySelectorAll(\".delete-category-btn\").forEach((btn) => {\n    btn.addEventListener(\"click\", (e) => {\n      const categoryName = e.target.getAttribute(\"data-category\");\n\n      if (\n        !confirm(\n          `Are you sure you want to delete the category \"${categoryName}\"?`\n        )\n      ) {\n        return;\n      }\n\n      if (deleteCategory(categoryName)) {\n        renderCategoryUI(container);\n\n        // Trigger update of transaction filters\n        setTimeout(() => {\n          if (window.updateTransactions) {\n            window.updateTransactions();\n          }\n        }, 100);\n      }\n    });\n  });\n\n  // Add subcategory buttons\n  container.querySelectorAll(\".add-subcategory-btn\").forEach((btn) => {\n    btn.addEventListener(\"click\", (e) => {\n      const parentName = e.target.getAttribute(\"data-parent\");\n      const colorInput = container.querySelector(\n        `.new-subcategory-color[data-parent=\"${parentName}\"]`\n      );\n      const nameInput = container.querySelector(\n        `.new-subcategory-name[data-parent=\"${parentName}\"]`\n      );\n\n      if (!colorInput || !nameInput) return;\n\n      const subName = nameInput.value.trim();\n      const subColor = colorInput.value;\n\n      if (!subName) {\n        import(\"../uiManager.js\").then((module) => {\n          module.showToast(\"Please enter a subcategory name\", \"error\");\n        });\n        return;\n      }\n\n      if (addSubcategory(parentName, subName, subColor)) {\n        // Clear input and re-render\n        nameInput.value = \"\";\n        renderCategoryUI(container);\n\n        // Show subcategories container\n        const subcategoriesContainer = container.querySelector(\n          `.subcategories-container[data-parent=\"${parentName}\"]`\n        );\n        if (subcategoriesContainer) {\n          subcategoriesContainer.style.display = \"block\";\n        }\n      }\n    });\n  });\n\n  // Update subcategory buttons\n  container.querySelectorAll(\".update-subcategory-btn\").forEach((btn) => {\n    btn.addEventListener(\"click\", (e) => {\n      const parentName = e.target.getAttribute(\"data-parent\");\n      const subName = e.target.getAttribute(\"data-subcategory\");\n      const colorInput = container.querySelector(\n        `.edit-subcategory-color[data-parent=\"${parentName}\"][data-subcategory=\"${subName}\"]`\n      );\n      const nameInput = container.querySelector(\n        `.subcategory-name-input[data-parent=\"${parentName}\"][data-original-name=\"${subName}\"]`\n      );\n\n      if (!colorInput || !nameInput) return;\n\n      const newSubColor = colorInput.value;\n      const newSubName = nameInput.value.trim();\n\n      if (!newSubName) {\n        import(\"../uiManager.js\").then((module) => {\n          module.showToast(\"Subcategory name cannot be empty\", \"error\");\n        });\n        return;\n      }\n\n      if (updateSubcategory(parentName, subName, newSubName, newSubColor)) {\n        renderCategoryUI(container);\n      }\n    });\n  });\n\n  // Delete subcategory buttons\n  container.querySelectorAll(\".delete-subcategory-btn\").forEach((btn) => {\n    btn.addEventListener(\"click\", (e) => {\n      const parentName = e.target.getAttribute(\"data-parent\");\n      const subName = e.target.getAttribute(\"data-subcategory\");\n\n      if (\n        !confirm(\n          `Are you sure you want to delete the subcategory \"${subName}\"?`\n        )\n      ) {\n        return;\n      }\n\n      if (deleteSubcategory(parentName, subName)) {\n        renderCategoryUI(container);\n      }\n    });\n  });\n\n  // Initialize drag and drop for category reordering\n  initializeCategoryDragAndDrop(container);\n}\n\n/**\n * Initialize drag and drop functionality for categories\n */\nfunction initializeCategoryDragAndDrop(container) {\n  const categoryRows = container.querySelectorAll(\n    '.category-edit-row[draggable=\"true\"]'\n  );\n\n  categoryRows.forEach((row) => {\n    row.addEventListener(\"dragstart\", handleDragStart);\n    row.addEventListener(\"dragover\", handleDragOver);\n    row.addEventListener(\"drop\", handleDrop);\n    row.addEventListener(\"dragend\", handleDragEnd);\n  });\n}\n\nlet draggedElement = null;\n\nfunction handleDragStart(e) {\n  draggedElement = this;\n  this.style.opacity = \"0.5\";\n  e.dataTransfer.effectAllowed = \"move\";\n  e.dataTransfer.setData(\"text/html\", this.outerHTML);\n}\n\nfunction handleDragOver(e) {\n  if (e.preventDefault) {\n    e.preventDefault();\n  }\n  e.dataTransfer.dropEffect = \"move\";\n  return false;\n}\n\nfunction handleDrop(e) {\n  if (e.stopPropagation) {\n    e.stopPropagation();\n  }\n\n  if (draggedElement !== this) {\n    const draggedCategory = draggedElement.getAttribute(\"data-category\");\n    const targetCategory = this.getAttribute(\"data-category\");\n\n    // Reorder categories in AppState\n    reorderCategories(draggedCategory, targetCategory);\n\n    // Re-render the UI\n    const container = this.closest(\".category-manager-content\");\n    if (container) {\n      renderCategoryUI(container);\n    }\n  }\n  return false;\n}\n\nfunction handleDragEnd(e) {\n  this.style.opacity = \"1\";\n  draggedElement = null;\n}\n\nfunction reorderCategories(draggedCategory, targetCategory) {\n  const categories = AppState.categories || {};\n  const categoryKeys = Object.keys(categories);\n\n  const draggedIndex = categoryKeys.indexOf(draggedCategory);\n  const targetIndex = categoryKeys.indexOf(targetCategory);\n\n  if (draggedIndex > -1 && targetIndex > -1) {\n    // Remove dragged category\n    const [draggedKey] = categoryKeys.splice(draggedIndex, 1);\n\n    // Insert at new position\n    categoryKeys.splice(targetIndex, 0, draggedKey);\n\n    // Rebuild categories object with new order\n    const reorderedCategories = {};\n    categoryKeys.forEach((key) => {\n      reorderedCategories[key] = categories[key];\n    });\n\n    AppState.categories = reorderedCategories;\n\n    // Save to localStorage\n    localStorage.setItem(\"categories\", JSON.stringify(AppState.categories));\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\ui\\categoryManager.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'rgbToHex' is defined but never used.","line":8,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":18},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":42,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":42,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1216,1279],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":50,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":50,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1450,1499],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'modal' is defined but never used. Allowed unused args must match /^_/u.","line":726,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":726,"endColumn":51},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":755,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":755,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25509,25574],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used. Allowed unused args must match /^_/u.","line":758,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":758,"endColumn":40},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":772,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":772,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[26089,26115],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":834,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":834,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[28177,28213],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":840,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":840,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[28424,28549],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'saveCategoryChanges' is defined but never used.","line":970,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":970,"endColumn":29},{"ruleId":"no-unused-vars","severity":1,"message":"'saveSubcategoryChanges' is defined but never used.","line":1001,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":1001,"endColumn":32},{"ruleId":"no-unused-vars","severity":1,"message":"'container' is defined but never used. Allowed unused args must match /^_/u.","line":1001,"column":66,"nodeType":"Identifier","messageId":"unusedVar","endLine":1001,"endColumn":75},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1003,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1003,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[33464,33540],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1053,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1053,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[35067,35199],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1079,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1079,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[35895,35946],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1082,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1082,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[35995,36058],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1101,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1101,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[36474,36533],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'categoryData' is defined but never used. Allowed unused args must match /^_/u.","line":1301,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":1301,"endColumn":57},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1325,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1325,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[43692,43754],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1328,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1328,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[43809,43872],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'filter' is defined but never used. Allowed unused args must match /^_/u.","line":1363,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":1363,"endColumn":34},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1381,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1381,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[45383,45443],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1384,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1384,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[45480,45549],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1407,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1407,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[46208,46261],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1410,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1410,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[46298,46361],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1862,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1862,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[58371,58417],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AppState } from \"../core/appState.js\";\nimport { showModal } from \"./modalManager.js\";\nimport { showToast } from \"./uiManager.js\";\n\n/**\n * Utility function to convert RGB color to hex format\n */\nfunction rgbToHex(rgb) {\n  if (!rgb || rgb === \"transparent\") return \"#000000\";\n\n  // If it's already hex, return as is\n  if (rgb.startsWith(\"#\")) return rgb;\n\n  // Parse rgb() or rgba() format\n  const rgbRegex = /rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)/;\n  const match = rgbRegex.exec(rgb);\n  if (match) {\n    const r = parseInt(match[1]);\n    const g = parseInt(match[2]);\n    const b = parseInt(match[3]);\n    return \"#\" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n  }\n\n  return \"#000000\"; // fallback\n}\n\n/**\n * Ensure category modal uses singleton pattern:\n */\nlet categoryManagerModalInstance = null;\n\n/**\n * Show the category manager modal\n */\nexport function showCategoryManagerModal() {\n  // FIXED: Check if modal is actually visible before preventing multiple modals\n  if (categoryManagerModalInstance) {\n    const modalElement = document.querySelector(\n      \".modal-overlay .category-manager-content\"\n    );\n    if (modalElement?.closest(\".modal-overlay\")?.style.display !== \"none\") {\n      console.log(\"Category manager modal already open and visible\");\n      return categoryManagerModalInstance;\n    } else {\n      // Modal reference exists but not visible, reset it\n      categoryManagerModalInstance = null;\n    }\n  }\n\n  console.log(\"Opening category manager modal...\");\n\n  const modalContent = document.createElement(\"div\");\n  modalContent.className = \"category-manager-content\";\n  modalContent.innerHTML = buildCategoryManagerHTML();\n\n  const modal = showModal({\n    title: \"Category Manager\", // Fixed: Use the modal title properly\n    content: modalContent,\n    size: \"large\",\n    closeOnClickOutside: false,\n  });\n\n  // Store reference and override close method\n  categoryManagerModalInstance = modal;\n  const originalClose = modal.close;\n  modal.close = function () {\n    categoryManagerModalInstance = null;\n    originalClose.call(this);\n  };\n\n  attachCategoryManagerEventListeners(modalContent, modal);\n\n  return modal;\n}\n\nfunction buildCategoryManagerHTML() {\n  const categories = AppState.categories || {};\n\n  return (\n    \"\" +\n    '<div class=\"add-category-section\">' +\n    '<div class=\"add-section-header\">' +\n    '<h4><span class=\"section-icon\">Γ£¿</span> Add New Category</h4>' +\n    '<p class=\"section-description\">Create a new category with custom color and name</p>' +\n    \"</div>\" +\n    '<div class=\"add-category-card\">' +\n    '<div class=\"input-group\" role=\"group\" aria-label=\"Add new category form\">' +\n    '<div class=\"input-wrapper\">' +\n    '<label for=\"newCategoryName\" class=\"input-label\">Category Name</label>' +\n    '<input type=\"text\" id=\"newCategoryName\" placeholder=\"e.g., Groceries, Entertainment\" class=\"form-input\" aria-required=\"true\" aria-describedby=\"categoryNameHelp\" />' +\n    '<small id=\"categoryNameHelp\" class=\"sr-only\">Enter a unique name for the category</small>' +\n    \"</div>\" +\n    '<div class=\"input-wrapper\">' +\n    '<label for=\"newCategoryColor\" class=\"input-label\">Color</label>' +\n    '<div class=\"color-picker-wrapper\">' +\n    '<input type=\"color\" id=\"newCategoryColor\" value=\"#3498db\" class=\"color-picker\" aria-describedby=\"colorHelp\" />' +\n    '<div class=\"color-preview\" id=\"colorPreview\" role=\"img\" aria-label=\"Color preview\"></div>' +\n    '<small id=\"colorHelp\" class=\"sr-only\">Choose a color for the category</small>' +\n    \"</div>\" +\n    \"</div>\" +\n    '<div class=\"input-wrapper\">' +\n    '<button class=\"btn btn-primary btn-add\" id=\"addCategoryBtn\" type=\"button\" aria-describedby=\"addBtnHelp\">' +\n    '<span class=\"btn-icon\" aria-hidden=\"true\">+</span>' +\n    '<span class=\"btn-text\">Add Category</span>' +\n    \"</button>\" +\n    '<small id=\"addBtnHelp\" class=\"sr-only\">Click to add the new category</small>' +\n    \"</div>\" +\n    \"</div>\" +\n    \"</div>\" +\n    \"</div>\" +\n    '<div class=\"categories-section\">' +\n    '<div class=\"section-header\">' +\n    '<div class=\"header-left\">' +\n    '<h4><span class=\"section-icon\">≡ƒÅ╖∩╕Å</span> Manage Categories</h4>' +\n    '<div class=\"category-count-badge\" role=\"status\" aria-live=\"polite\">' +\n    Object.keys(categories).length +\n    \"</div>\" +\n    \"</div>\" +\n    '<div class=\"header-actions\">' +\n    '<div class=\"search-wrapper\">' +\n    '<input type=\"text\" id=\"categorySearch\" placeholder=\"Search categories...\" class=\"search-input\" role=\"search\" aria-label=\"Search categories\" />' +\n    '<span class=\"search-icon\" aria-hidden=\"true\">≡ƒöì</span>' +\n    \"</div>\" +\n    '<button class=\"btn btn-warning btn-reset\" id=\"resetCategoriesBtn\" title=\"Reset to default categories\" type=\"button\" aria-describedby=\"resetBtnHelp\">' +\n    '<span class=\"btn-icon\" aria-hidden=\"true\">≡ƒöä</span>' +\n    '<span class=\"btn-text\">Reset</span>' +\n    \"</button>\" +\n    '<small id=\"resetBtnHelp\" class=\"sr-only\">Reset all categories to default values</small>' +\n    \"</div>\" +\n    \"</div>\" +\n    (Object.keys(categories).length === 0\n      ? buildEmptyState()\n      : buildCategoriesGrid(categories)) +\n    \"</div>\" +\n    '<div class=\"modal-footer\">' +\n    '<div class=\"footer-content\">' +\n    '<div class=\"footer-info\">' +\n    '<span class=\"info-text\">≡ƒÆí Tip: Drag categories to reorder them</span>' +\n    \"</div>\" +\n    '<button class=\"btn btn-secondary btn-close\" id=\"closeCategoryManagerBtn\" type=\"button\" aria-label=\"Close category manager\">' +\n    '<span class=\"btn-icon\" aria-hidden=\"true\">Γ£ò</span>' +\n    '<span class=\"btn-text\">Close</span>' +\n    \"</button>\" +\n    \"</div>\" +\n    \"</div>\"\n  );\n}\n\nfunction buildEmptyState() {\n  return (\n    \"\" +\n    '<div class=\"empty-state-container\">' +\n    '<div class=\"empty-state-icon\">≡ƒôé</div>' +\n    '<h3 class=\"empty-state-title\">No Categories Yet</h3>' +\n    '<p class=\"empty-state-description\">Create your first category to start organizing your expenses</p>' +\n    '<div class=\"empty-state-suggestions\">' +\n    \"<h4>Popular categories:</h4>\" +\n    '<div class=\"suggestion-chips\">' +\n    '<button class=\"suggestion-chip\" data-name=\"Food & Dining\" data-color=\"#e74c3c\">≡ƒìò Food & Dining</button>' +\n    '<button class=\"suggestion-chip\" data-name=\"Transportation\" data-color=\"#3498db\">≡ƒÜù Transportation</button>' +\n    '<button class=\"suggestion-chip\" data-name=\"Entertainment\" data-color=\"#9b59b6\">≡ƒÄ¼ Entertainment</button>' +\n    '<button class=\"suggestion-chip\" data-name=\"Shopping\" data-color=\"#f39c12\">≡ƒ¢Æ Shopping</button>' +\n    '<button class=\"suggestion-chip\" data-name=\"Bills & Utilities\" data-color=\"#2ecc71\">≡ƒÆí Bills & Utilities</button>' +\n    '<button class=\"suggestion-chip\" data-name=\"Healthcare\" data-color=\"#e67e22\">ΓÜò∩╕Å Healthcare</button>' +\n    \"</div>\" +\n    \"</div>\" +\n    \"</div>\"\n  );\n}\n\nfunction buildCategoriesGrid(categories) {\n  // Get sorted categories by order\n  const sortedCategories = Object.entries(categories).sort(([, a], [, b]) => {\n    const orderA =\n      typeof a === \"object\" && a?.order !== undefined ? a.order : 999;\n    const orderB =\n      typeof b === \"object\" && b?.order !== undefined ? b.order : 999;\n    return orderA - orderB;\n  });\n\n  let html = '<div class=\"categories-grid\" id=\"categoriesGrid\">';\n\n  sortedCategories.forEach(([categoryName, categoryData], index) => {\n    const order =\n      typeof categoryData === \"object\" && categoryData?.order !== undefined\n        ? categoryData.order\n        : index;\n    const color =\n      typeof categoryData === \"string\"\n        ? categoryData\n        : categoryData?.color || \"#cccccc\";\n    const subcategories =\n      typeof categoryData === \"object\" && categoryData?.subcategories\n        ? categoryData.subcategories\n        : {};\n    const subCount = Object.keys(subcategories).length;\n\n    html +=\n      '<div class=\"category-card\" data-category=\"' +\n      categoryName +\n      '\" data-order=\"' +\n      order +\n      '\" draggable=\"true\">' +\n      '<div class=\"category-card-header\">' +\n      '<div class=\"category-visual\">' +\n      '<div class=\"category-color-display\" style=\"background-color: ' +\n      color +\n      '\"></div>' +\n      '<div class=\"drag-handle\">Γï«Γï«</div>' +\n      \"</div>\" +\n      '<div class=\"category-info\">' +\n      '<h5 class=\"category-name-display\">' +\n      categoryName +\n      \"</h5>\" +\n      '<span class=\"category-order\">Order: ' +\n      order +\n      \"</span>\" +\n      \"</div>\" +\n      '<div class=\"category-actions\">' +\n      '<button class=\"btn-icon-small btn-edit\" title=\"Edit category\" data-category=\"' +\n      categoryName +\n      '\">' +\n      \"Γ£Å∩╕Å\" +\n      \"</button>\" +\n      '<button class=\"btn-icon-small btn-delete\" title=\"Delete category\" data-category=\"' +\n      categoryName +\n      '\">' +\n      \"≡ƒùæ∩╕Å\" +\n      \"</button>\" +\n      \"</div>\" +\n      \"</div>\" +\n      '<div class=\"category-card-body\">' +\n      '<div class=\"category-stats\">' +\n      '<div class=\"stat\">' +\n      '<span class=\"card-stat-label\">Subcategories</span>' +\n      '<span class=\"stat-value\">' +\n      subCount +\n      \"</span>\" +\n      \"</div>\" +\n      \"</div>\" +\n      (subCount > 0\n        ? '<button class=\"btn-subcategories\" data-category=\"' +\n          categoryName +\n          '\">' +\n          '<span class=\"subcategory-icon\">≡ƒôü</span>' +\n          \"<span>Manage \" +\n          subCount +\n          \" subcategories</span>\" +\n          '<span class=\"expand-icon\">Γû╝</span>' +\n          \"</button>\"\n        : '<button class=\"btn-add-subcategory\" data-category=\"' +\n          categoryName +\n          '\">' +\n          '<span class=\"add-icon\">+</span>' +\n          \"<span>Add subcategory</span>\" +\n          \"</button>\") +\n      \"</div>\" +\n      \"<!-- Edit Form (hidden by default) -->\" +\n      '<div class=\"category-edit-form\" style=\"display: none;\">' +\n      '<div class=\"edit-form-header\">' +\n      \"<h6>Edit Category</h6>\" +\n      '<button class=\"btn-close-edit\" data-category=\"' +\n      categoryName +\n      '\">Γ£ò</button>' +\n      \"</div>\" +\n      '<div class=\"edit-form-body\">' +\n      '<div class=\"input-group-inline\">' +\n      '<div class=\"input-wrapper-small\">' +\n      \"<label>Name</label>\" +\n      '<input type=\"text\" class=\"edit-name-input\" value=\"' +\n      categoryName +\n      '\" data-category=\"' +\n      categoryName +\n      '\">' +\n      \"</div>\" +\n      '<div class=\"input-wrapper-small\">' +\n      \"<label>Color</label>\" +\n      '<input type=\"color\" class=\"edit-color-input\" value=\"' +\n      color +\n      '\" data-category=\"' +\n      categoryName +\n      '\">' +\n      \"</div>\" +\n      '<div class=\"input-wrapper-small\">' +\n      \"<label>Order</label>\" +\n      '<input type=\"number\" class=\"edit-order-input\" value=\"' +\n      order +\n      '\" data-category=\"' +\n      categoryName +\n      '\" min=\"0\" max=\"999\">' +\n      \"</div>\" +\n      \"</div>\" +\n      '<div class=\"edit-form-actions\">' +\n      '<button class=\"btn btn-success btn-sm btn-save-edit\" data-category=\"' +\n      categoryName +\n      '\">' +\n      '<span class=\"btn-icon\">≡ƒÆ╛</span> Save' +\n      \"</button>\" +\n      '<button class=\"btn btn-secondary btn-sm btn-cancel-edit\" data-category=\"' +\n      categoryName +\n      '\">' +\n      \"Cancel\" +\n      \"</button>\" +\n      \"</div>\" +\n      \"</div>\" +\n      \"</div>\" +\n      \"<!-- Subcategories Section (hidden by default) -->\" +\n      '<div class=\"subcategories-section\" style=\"display: none;\" data-category=\"' +\n      categoryName +\n      '\">' +\n      buildSubcategoriesSection(categoryName, subcategories) +\n      \"</div>\" +\n      \"</div>\";\n  });\n\n  html += \"</div>\";\n  return html;\n}\n\nfunction buildSubcategoriesSection(categoryName, subcategories) {\n  let html =\n    \"\" +\n    '<div class=\"subcategories-header\">' +\n    '<h5><span class=\"subcategory-icon\">≡ƒôü</span> Subcategories for ' +\n    categoryName +\n    \"</h5>\" +\n    '<button class=\"btn-close-subcategories\" data-category=\"' +\n    categoryName +\n    '\" title=\"Close subcategories\">Γ£ò</button>' +\n    \"</div>\" +\n    '<div class=\"add-subcategory-form\">' +\n    '<div class=\"subcategory-form-row\">' +\n    '<div class=\"input-wrapper-small\">' +\n    \"<label>Name</label>\" +\n    '<input type=\"text\"' +\n    ' class=\"subname-input\"' +\n    ' placeholder=\"Subcategory name\"' +\n    ' data-parent=\"' +\n    categoryName +\n    '\">' +\n    \"</div>\" +\n    '<div class=\"input-wrapper-small\">' +\n    \"<label>Color</label>\" +\n    '<input type=\"color\"' +\n    ' class=\"subcolor-input\"' +\n    ' value=\"#e74c3c\"' +\n    ' data-parent=\"' +\n    categoryName +\n    '\">' +\n    \"</div>\" +\n    '<div class=\"input-wrapper-small\">' +\n    '<button class=\"btn btn-success btn-sm add-subcategory-btn\" data-parent=\"' +\n    categoryName +\n    '\">' +\n    '<span class=\"btn-icon\">+</span>' +\n    '<span class=\"btn-text\">Add</span>' +\n    \"</button>\" +\n    \"</div>\" +\n    \"</div>\" +\n    \"</div>\";\n\n  if (Object.keys(subcategories).length > 0) {\n    html += '<div class=\"subcategories-grid\">';\n\n    Object.entries(subcategories).forEach(function ([subName, subColor]) {\n      html +=\n        \"\" +\n        '<div class=\"subcategory-card\" data-parent=\"' +\n        categoryName +\n        '\" data-subcategory=\"' +\n        subName +\n        '\">' +\n        '<div class=\"subcategory-header\">' +\n        '<div class=\"subcategory-color\" style=\"background-color: ' +\n        subColor +\n        '\"></div>' +\n        '<span class=\"subcategory-name\">' +\n        subName +\n        \"</span>\" +\n        '<div class=\"subcategory-actions\">' +\n        '<button class=\"btn-icon-mini btn-edit-subcategory\" ' +\n        'title=\"Edit subcategory\"' +\n        ' data-parent=\"' +\n        categoryName +\n        '\" ' +\n        ' data-subcategory=\"' +\n        subName +\n        '\">Γ£Å∩╕Å</button>' +\n        '<button class=\"btn-icon-mini btn-delete-subcategory\" ' +\n        'title=\"Delete subcategory\"' +\n        ' data-parent=\"' +\n        categoryName +\n        '\" ' +\n        ' data-subcategory=\"' +\n        subName +\n        '\">≡ƒùæ∩╕Å</button>' +\n        \"</div>\" +\n        \"</div>\" +\n        \"<!-- Edit form for subcategory (hidden by default) -->\" +\n        '<div class=\"subcategory-edit-form\" style=\"display: none;\">' +\n        '<div class=\"edit-inputs\">' +\n        '<input type=\"text\"' +\n        ' class=\"edit-subname-input\"' +\n        ' value=\"' +\n        subName +\n        '\"' +\n        ' data-parent=\"' +\n        categoryName +\n        '\"' +\n        ' data-subcategory=\"' +\n        subName +\n        '\">' +\n        '<input type=\"color\"' +\n        ' class=\"edit-subcolor-input\"' +\n        ' value=\"' +\n        subColor +\n        '\"' +\n        ' data-parent=\"' +\n        categoryName +\n        '\"' +\n        ' data-subcategory=\"' +\n        subName +\n        '\">' +\n        \"</div>\" +\n        '<div class=\"edit-actions\">' +\n        '<button class=\"btn-icon-mini btn-save-subcategory\" ' +\n        ' data-parent=\"' +\n        categoryName +\n        '\" ' +\n        ' data-subcategory=\"' +\n        subName +\n        '\">≡ƒÆ╛</button>' +\n        '<button class=\"btn-icon-mini btn-cancel-subcategory\" ' +\n        ' data-parent=\"' +\n        categoryName +\n        '\" ' +\n        ' data-subcategory=\"' +\n        subName +\n        '\">Γ£ò</button>' +\n        \"</div>\" +\n        \"</div>\" +\n        \"</div>\";\n    });\n\n    html += \"</div>\";\n  } else {\n    html +=\n      \"\" +\n      '<div class=\"subcategories-empty\">' +\n      \"<p>No subcategories yet. Add one above to get started.</p>\" +\n      \"</div>\";\n  }\n\n  return html;\n}\n\nfunction attachCategoryManagerEventListeners(container, modal) {\n  // Add category button\n  const addCategoryBtn = container.querySelector(\"#addCategoryBtn\");\n  if (addCategoryBtn) {\n    addCategoryBtn.addEventListener(\"click\", () => {\n      const nameInput = container.querySelector(\"#newCategoryName\");\n      const colorInput = container.querySelector(\"#newCategoryColor\");\n\n      if (nameInput.value.trim()) {\n        if (addCategory(nameInput.value.trim(), colorInput.value)) {\n          // Clear inputs and refresh the modal content\n          nameInput.value = \"\";\n          colorInput.value = \"#3498db\";\n          container.innerHTML = buildCategoryManagerHTML();\n          attachCategoryManagerEventListeners(container, modal);\n        }\n      }\n    });\n  }\n\n  // Reset to default categories button\n  const resetCategoriesBtn = container.querySelector(\"#resetCategoriesBtn\");\n  if (resetCategoriesBtn) {\n    resetCategoriesBtn.addEventListener(\"click\", () => {\n      if (\n        confirm(\n          \"Are you sure you want to reset all categories to defaults? This will remove all your custom categories and cannot be undone.\"\n        )\n      ) {\n        resetToDefaultCategories();\n        // Refresh the modal content\n        container.innerHTML = buildCategoryManagerHTML();\n        attachCategoryManagerEventListeners(container, modal);\n      }\n    });\n  }\n\n  // FIXED: Add search functionality with proper selector\n  const searchInput = container.querySelector(\"#categorySearch\");\n  if (searchInput) {\n    searchInput.addEventListener(\"input\", (e) => {\n      const searchTerm = e.target.value.toLowerCase().trim();\n      const categoryCards = container.querySelectorAll(\".category-card\");\n\n      categoryCards.forEach((card) => {\n        // Fix: Use the correct selector for category name\n        const categoryNameElement = card.querySelector(\n          \".category-name-display\"\n        );\n        const categoryName =\n          categoryNameElement?.textContent?.toLowerCase() || \"\";\n        const shouldShow = !searchTerm || categoryName.includes(searchTerm);\n        card.style.display = shouldShow ? \"block\" : \"none\";\n      });\n\n      // Update category count\n      const visibleCount = Array.from(categoryCards).filter(\n        (card) => card.style.display !== \"none\"\n      ).length;\n      const countBadge = container.querySelector(\".category-count-badge\");\n      if (countBadge) {\n        countBadge.textContent = visibleCount;\n      }\n    });\n  }\n\n  // Close button\n  const closeBtn = container.querySelector(\"#closeCategoryManagerBtn\");\n  if (closeBtn) {\n    closeBtn.addEventListener(\"click\", () => {\n      modal.close();\n    });\n  }\n\n  // Suggestion chips for empty state\n  container.querySelectorAll(\".suggestion-chip\").forEach((chip) => {\n    chip.addEventListener(\"click\", (e) => {\n      const name = e.target.dataset.name;\n      const color = e.target.dataset.color;\n      if (name && color) {\n        addCategory(name, color);\n        // Refresh the modal content\n        container.innerHTML = buildCategoryManagerHTML();\n        attachCategoryManagerEventListeners(container, modal);\n      }\n    });\n  });\n\n  // Edit category buttons (new card layout)\n  container.querySelectorAll(\".btn-edit\").forEach((btn) => {\n    btn.addEventListener(\"click\", (e) => {\n      const categoryCard = e.target.closest(\".category-card\");\n      const editForm = categoryCard.querySelector(\".category-edit-form\");\n\n      if (editForm) {\n        // Toggle edit form visibility\n        const isVisible = editForm.style.display !== \"none\";\n        editForm.style.display = isVisible ? \"none\" : \"block\";\n      }\n    });\n  });\n\n  // Delete category buttons (new card layout)\n  container.querySelectorAll(\".btn-delete\").forEach((btn) => {\n    btn.addEventListener(\"click\", (e) => {\n      const categoryName = e.target.dataset.category;\n      if (confirm('Delete category \"' + categoryName + '\"?')) {\n        if (deleteCategory(categoryName)) {\n          container.innerHTML = buildCategoryManagerHTML();\n          attachCategoryManagerEventListeners(container, modal);\n        }\n      }\n    });\n  });\n\n  // Save edit buttons\n  container.querySelectorAll(\".btn-save-edit\").forEach((btn) => {\n    btn.addEventListener(\"click\", (e) => {\n      const categoryName = e.target.dataset.category;\n      const categoryCard = e.target.closest(\".category-card\");\n      const nameInput = categoryCard.querySelector(\".edit-name-input\");\n      const colorInput = categoryCard.querySelector(\".edit-color-input\");\n      const orderInput = categoryCard.querySelector(\".edit-order-input\");\n\n      if (nameInput?.value && colorInput?.value) {\n        const newName = nameInput.value.trim();\n        const newColor = colorInput.value;\n        const newOrder = parseInt(orderInput.value) || 0;\n\n        if (newName) {\n          // Update the category\n          const oldData = AppState.categories[categoryName];\n          const updatedData = {\n            ...oldData,\n            color: newColor,\n            order: newOrder,\n          };\n\n          // If name changed, need to handle rename\n          if (newName !== categoryName) {\n            delete AppState.categories[categoryName];\n            AppState.categories[newName] = updatedData;\n          } else {\n            AppState.categories[categoryName] = updatedData;\n          }\n\n          // Save to localStorage\n          localStorage.setItem(\n            \"categories\",\n            JSON.stringify(AppState.categories)\n          );\n\n          // Update category UI in transaction areas\n          refreshCategoryDropdowns();\n\n          // Refresh modal content\n          container.innerHTML = buildCategoryManagerHTML();\n          attachCategoryManagerEventListeners(container, modal);\n\n          import(\"./uiManager.js\").then((module) => {\n            module.showToast(\n              'Category \"' + newName + '\" updated successfully',\n              \"success\"\n            );\n          });\n        }\n      }\n    });\n  });\n\n  // Cancel edit buttons\n  container.querySelectorAll(\".btn-cancel-edit\").forEach((btn) => {\n    btn.addEventListener(\"click\", (e) => {\n      const categoryCard = e.target.closest(\".category-card\");\n      const editForm = categoryCard.querySelector(\".category-edit-form\");\n      if (editForm) {\n        editForm.style.display = \"none\";\n      }\n    });\n  });\n\n  // Close edit buttons\n  container.querySelectorAll(\".btn-close-edit\").forEach((btn) => {\n    btn.addEventListener(\"click\", (e) => {\n      const categoryCard = e.target.closest(\".category-card\");\n      const editForm = categoryCard.querySelector(\".category-edit-form\");\n      if (editForm) {\n        editForm.style.display = \"none\";\n      }\n    });\n  });\n\n  // Subcategory management buttons\n  container.querySelectorAll(\".btn-subcategories\").forEach((btn) => {\n    btn.addEventListener(\"click\", (e) => {\n      const categoryCard = e.target.closest(\".category-card\");\n      const subcategoriesSection = categoryCard.querySelector(\n        \".subcategories-section\"\n      );\n\n      if (subcategoriesSection) {\n        const isVisible = subcategoriesSection.style.display !== \"none\";\n        subcategoriesSection.style.display = isVisible ? \"none\" : \"block\";\n\n        // Update button text\n        const expandIcon = btn.querySelector(\".expand-icon\");\n        if (expandIcon) {\n          expandIcon.textContent = isVisible ? \"Γû╝\" : \"Γû▓\";\n        }\n\n        if (!isVisible) {\n          // Attach subcategory listeners when showing\n          attachSubcategoryEventListeners(\n            subcategoriesSection,\n            container,\n            modal\n          );\n        }\n      }\n    });\n  });\n\n  // Add subcategory buttons\n  container.querySelectorAll(\".btn-add-subcategory\").forEach((btn) => {\n    btn.addEventListener(\"click\", (e) => {\n      const categoryCard = e.target.closest(\".category-card\");\n      const subcategoriesSection = categoryCard.querySelector(\n        \".subcategories-section\"\n      );\n\n      if (subcategoriesSection) {\n        subcategoriesSection.style.display = \"block\";\n        // Focus on the subcategory name input\n        const nameInput = subcategoriesSection.querySelector(\".subname-input\");\n        if (nameInput) {\n          nameInput.focus();\n        }\n        attachSubcategoryEventListeners(subcategoriesSection, container, modal);\n      }\n    });\n  });\n\n  // FIXED: Add close subcategories functionality\n  container.querySelectorAll(\".btn-close-subcategories\").forEach((btn) => {\n    btn.addEventListener(\"click\", (e) => {\n      const categoryCard = e.target.closest(\".category-card\");\n      const subcategoriesSection = categoryCard.querySelector(\n        \".subcategories-section\"\n      );\n      if (subcategoriesSection) {\n        subcategoriesSection.style.display = \"none\";\n\n        // Update expand icon\n        const expandBtn = categoryCard.querySelector(\".btn-subcategories\");\n        const expandIcon = expandBtn?.querySelector(\".expand-icon\");\n        if (expandIcon) {\n          expandIcon.textContent = \"Γû╝\";\n        }\n      }\n    });\n  });\n\n  // FIXED: Add drag and drop functionality for categories\n  setupCategoryDragAndDrop(container, modal);\n}\n\n/**\n * Setup drag and drop functionality for category reordering\n */\nfunction setupCategoryDragAndDrop(container, modal) {\n  const categoriesGrid = container.querySelector(\"#categoriesGrid\");\n  if (!categoriesGrid) return;\n\n  let draggedElement = null;\n  let dropTarget = null;\n\n  // FIXED: Remove existing event listeners to prevent duplicates\n  container.querySelectorAll(\".category-card\").forEach((card) => {\n    // Clone the element to remove all event listeners\n    const newCard = card.cloneNode(true);\n    card.parentNode.replaceChild(newCard, card);\n  });\n\n  // FIXED: Re-query the updated cards and add fresh event listeners\n  container.querySelectorAll(\".category-card\").forEach((card) => {\n    // Make sure the card is draggable\n    card.draggable = true;\n\n    card.addEventListener(\"dragstart\", (e) => {\n      draggedElement = card;\n      card.classList.add(\"dragging\");\n      e.dataTransfer.effectAllowed = \"move\";\n      e.dataTransfer.setData(\"text/html\", card.outerHTML);\n\n      // FIXED: Add opacity to dragged element\n      card.style.opacity = \"0.5\";\n\n      // Store category name for debugging\n      console.log(\"Drag started for category:\", card.dataset.category);\n    });\n\n    card.addEventListener(\"dragend\", (e) => {\n      card.classList.remove(\"dragging\");\n      card.style.opacity = \"1\"; // FIXED: Reset opacity\n      draggedElement = null;\n      dropTarget = null;\n\n      // Remove all drop indicators and drag-over classes\n      container.querySelectorAll(\".drop-indicator\").forEach((indicator) => {\n        indicator.remove();\n      });\n      container.querySelectorAll(\".drag-over\").forEach((element) => {\n        element.classList.remove(\"drag-over\");\n      });\n\n      console.log(\"Drag ended\");\n    });\n\n    card.addEventListener(\"dragover\", (e) => {\n      e.preventDefault();\n      e.dataTransfer.dropEffect = \"move\";\n\n      const currentCard = e.target.closest(\".category-card\");\n      if (currentCard && currentCard !== draggedElement) {\n        dropTarget = currentCard;\n\n        // Add visual drop indicator\n        const rect = dropTarget.getBoundingClientRect();\n        const midpoint = rect.top + rect.height / 2;\n        const isAfter = e.clientY > midpoint;\n\n        // Remove existing indicators\n        container.querySelectorAll(\".drop-indicator\").forEach((indicator) => {\n          indicator.remove();\n        });\n\n        // Add new indicator\n        const indicator = document.createElement(\"div\");\n        indicator.className = \"drop-indicator\";\n        indicator.style.cssText =\n          \"\" +\n          \"height: 4px;\" +\n          \"background: linear-gradient(90deg, #6366f1, #8b5cf6);\" +\n          \"margin: 8px 0;\" +\n          \"border-radius: 4px;\" +\n          \"opacity: 0.9;\" +\n          \"box-shadow: 0 2px 8px rgba(99, 102, 241, 0.4);\" +\n          \"animation: pulse-indicator 1s ease-in-out infinite;\";\n\n        if (isAfter) {\n          dropTarget.parentNode.insertBefore(indicator, dropTarget.nextSibling);\n        } else {\n          dropTarget.parentNode.insertBefore(indicator, dropTarget);\n        }\n      }\n    });\n\n    // FIXED: Add drag enter and leave events for better visual feedback\n    card.addEventListener(\"dragenter\", (e) => {\n      e.preventDefault();\n      const currentCard = e.target.closest(\".category-card\");\n      if (currentCard && currentCard !== draggedElement) {\n        currentCard.classList.add(\"drag-over\");\n      }\n    });\n\n    card.addEventListener(\"dragleave\", (e) => {\n      const currentCard = e.target.closest(\".category-card\");\n      if (currentCard && !currentCard.contains(e.relatedTarget)) {\n        currentCard.classList.remove(\"drag-over\");\n      }\n    });\n\n    // FIXED: Single drop event listener with proper logic\n    card.addEventListener(\"drop\", (e) => {\n      e.preventDefault();\n\n      console.log(\"Drop event triggered\");\n\n      if (draggedElement && dropTarget && draggedElement !== dropTarget) {\n        const draggedCategory = draggedElement.dataset.category;\n        const targetCategory = dropTarget.dataset.category;\n\n        console.log(\n          \"Reordering:\",\n          draggedCategory,\n          \"relative to\",\n          targetCategory\n        );\n\n        // Calculate drop position\n        const rect = dropTarget.getBoundingClientRect();\n        const midpoint = rect.top + rect.height / 2;\n        const isAfter = e.clientY > midpoint;\n\n        // Reorder categories in AppState\n        reorderCategories(draggedCategory, targetCategory, isAfter);\n\n        // FIXED: Get modal reference from the container's parent modal\n        const modalElement = container.closest(\".modal-overlay\");\n        const modalInstance = modalElement\n          ? modalElement.modalInstance || categoryManagerModalInstance\n          : categoryManagerModalInstance;\n\n        // FIXED: Refresh the modal but preserve the open state of any expanded sections\n        const openSubcategories = [];\n        container\n          .querySelectorAll('.subcategories-section[style*=\"block\"]')\n          .forEach((section) => {\n            openSubcategories.push(section.dataset.category);\n          });\n\n        // Rebuild and reattach\n        container.innerHTML = buildCategoryManagerHTML();\n        attachCategoryManagerEventListeners(container, modalInstance);\n\n        // FIXED: Restore open subcategory sections\n        openSubcategories.forEach((categoryName) => {\n          const categoryCard = container.querySelector(\n            '[data-category=\"' + categoryName + '\"]'\n          );\n          if (categoryCard) {\n            const subcategoriesSection = categoryCard.querySelector(\n              \".subcategories-section\"\n            );\n            if (subcategoriesSection) {\n              subcategoriesSection.style.display = \"block\";\n              const expandBtn = categoryCard.querySelector(\n                \".btn-subcategories .expand-icon\"\n              );\n              if (expandBtn) expandBtn.textContent = \"Γû▓\";\n              attachSubcategoryEventListeners(\n                subcategoriesSection,\n                container,\n                modalInstance\n              );\n            }\n          }\n        });\n\n        // Show success message\n        import(\"./uiManager.js\").then((module) => {\n          module.showToast(\"Categories reordered successfully! ≡ƒÄë\", \"success\");\n        });\n      }\n\n      // Clean up\n      draggedElement = null;\n      dropTarget = null;\n    });\n  });\n}\n\n/**\n * Reorder categories by updating their order values\n */\nfunction reorderCategories(\n  draggedCategoryName,\n  targetCategoryName,\n  insertAfter\n) {\n  const categories = AppState.categories || {};\n\n  // Get current orders\n  const categoryEntries = Object.entries(categories)\n    .map(([name, data]) => ({\n      name,\n      data,\n      order:\n        typeof data === \"object\" && data.order !== undefined ? data.order : 999,\n    }))\n    .sort((a, b) => a.order - b.order);\n\n  // Find dragged and target positions\n  const draggedIndex = categoryEntries.findIndex(\n    (cat) => cat.name === draggedCategoryName\n  );\n  const targetIndex = categoryEntries.findIndex(\n    (cat) => cat.name === targetCategoryName\n  );\n\n  if (draggedIndex === -1 || targetIndex === -1) return;\n\n  // Remove dragged item\n  const [draggedItem] = categoryEntries.splice(draggedIndex, 1);\n\n  // Insert at new position\n  const newTargetIndex =\n    draggedIndex < targetIndex ? targetIndex - 1 : targetIndex;\n  const insertIndex = insertAfter ? newTargetIndex + 1 : newTargetIndex;\n  categoryEntries.splice(insertIndex, 0, draggedItem);\n\n  // Update orders\n  categoryEntries.forEach((item, index) => {\n    if (typeof item.data === \"object\") {\n      item.data.order = index + 1;\n    } else {\n      // Convert string to object format\n      AppState.categories[item.name] = {\n        color: item.data,\n        order: index + 1,\n        subcategories: {},\n      };\n    }\n  });\n\n  // Save to localStorage\n  localStorage.setItem(\"categories\", JSON.stringify(AppState.categories));\n\n  // Update all category UI elements\n  refreshCategoryDropdowns();\n}\n\nfunction saveCategoryChanges(categoryName, container) {\n  const row = container.querySelector('[data-category=\"' + categoryName + '\"]');\n  if (!row) return;\n\n  const orderInput = row.querySelector(\".order-input\");\n  const colorInput = row.querySelector(\".color-input\");\n  const nameInput = row.querySelector(\".name-input\");\n\n  const newOrder = parseInt(orderInput.value) || 0;\n  const newColor = colorInput.value;\n  const newName = nameInput.value.trim();\n\n  if (!newName) {\n    import(\"./uiManager.js\").then((module) => {\n      module.showToast(\"Category name cannot be empty\", \"error\");\n    });\n    return;\n  }\n\n  updateCategory(categoryName, newName, newColor);\n\n  // Update order if it's different\n  if (\n    AppState.categories[newName] &&\n    typeof AppState.categories[newName] === \"object\"\n  ) {\n    AppState.categories[newName].order = newOrder;\n    localStorage.setItem(\"categories\", JSON.stringify(AppState.categories));\n  }\n}\n\nfunction saveSubcategoryChanges(parentCategory, subcategoryName, container) {\n  // Implementation for saving subcategory changes\n  console.log(\"Saving subcategory changes:\", parentCategory, subcategoryName);\n}\n\n/**\n * Reset to default categories\n */\nexport function resetToDefaultCategories() {\n  // Import default categories\n  import(\"../constants/categories.js\")\n    .then((categoriesModule) => {\n      // Clear existing categories\n      AppState.categories = {};\n\n      // Set default categories\n      AppState.categories = { ...categoriesModule.DEFAULT_CATEGORIES };\n\n      // Save to localStorage\n      localStorage.setItem(\"categories\", JSON.stringify(AppState.categories));\n\n      // FIXED: Clear invalid category selections from transactions\n      if (AppState.transactions) {\n        const validCategories = Object.keys(AppState.categories);\n        AppState.transactions.forEach((transaction) => {\n          if (\n            transaction.category &&\n            !validCategories.includes(transaction.category)\n          ) {\n            transaction.category = \"\"; // Clear invalid category\n            transaction.subcategory = \"\"; // Clear subcategory too\n          }\n        });\n\n        // Save updated transactions\n        localStorage.setItem(\n          \"transactions\",\n          JSON.stringify(AppState.transactions)\n        );\n      }\n\n      // Clear any existing category mappings\n      import(\"./categoryMapping.js\")\n        .then((mappingModule) => {\n          if (mappingModule.resetCategoryMappingsForDefaults) {\n            mappingModule.resetCategoryMappingsForDefaults();\n          }\n        })\n        .catch((error) => {\n          console.warn(\"Could not reset category mappings:\", error);\n        });\n\n      console.log(\n        \"Reset: Loaded \" +\n          Object.keys(AppState.categories).length +\n          \" default categories\"\n      );\n\n      // Update all category UI elements\n      refreshCategoryDropdowns();\n\n      // Update transaction manager to render fresh data\n      import(\"./transactionManager.js\")\n        .then((module) => {\n          if (module.renderTransactions) {\n            module.renderTransactions(AppState.transactions || [], false);\n          }\n        })\n        .catch((error) => {\n          console.warn(\"Could not update transaction UI:\", error);\n        });\n\n      // FIXED: Update charts after reset\n      setTimeout(async () => {\n        try {\n          const chartsModule = await import(\"./charts.js\");\n          if (chartsModule?.updateCharts) {\n            chartsModule.updateCharts();\n            console.log(\"Charts updated after category reset\");\n          }\n        } catch (error) {\n          console.log(\"Charts not available for update:\", error.message);\n        }\n      }, 300);\n\n      import(\"./uiManager.js\").then((module) => {\n        if (module.showToast) {\n          module.showToast(\"Categories reset to defaults\", \"success\");\n        }\n      });\n    })\n    .catch((error) => {\n      console.error(\"Error loading default categories:\", error);\n    });\n}\n\n/**\n * Handle managing subcategories for a category\n */\nfunction handleManageSubcategories(categoryName) {\n  console.log(\"Managing subcategories for: \" + categoryName);\n\n  const categories = AppState.categories || {};\n  const categoryData = categories[categoryName] || {};\n  const subcategories = categoryData.subcategories || {};\n\n  const modalContent = document.createElement(\"div\");\n  modalContent.className = \"subcategory-manager-content\";\n\n  let html =\n    '<div class=\"subcategory-header\">' +\n    \"<h3>Manage Subcategories for: \" +\n    categoryName +\n    \"</h3>\" +\n    \"<p>Organize your transactions with more specific subcategories.</p>\" +\n    \"</div>\" +\n    '<div class=\"add-subcategory-section\">' +\n    \"<h4>Add New Subcategory</h4>\" +\n    '<div class=\"subcategory-form\">' +\n    '<input type=\"text\" id=\"newSubcategoryName\" placeholder=\"Subcategory name\" maxlength=\"50\">' +\n    '<input type=\"color\" id=\"newSubcategoryColor\" value=\"#3498db\" title=\"Choose color\">' +\n    '<button id=\"addSubcategoryBtn\" class=\"button primary-btn\">Add Subcategory</button>' +\n    \"</div>\" +\n    \"</div>\" +\n    '<div class=\"existing-subcategories-section\">' +\n    \"<h4>Existing Subcategories (\" +\n    Object.keys(subcategories).length +\n    \")</h4>\" +\n    '<div id=\"subcategoriesList\" class=\"subcategories-list\">';\n\n  if (Object.keys(subcategories).length === 0) {\n    html +=\n      '<div class=\"empty-subcategories\">' +\n      \"<p>No subcategories yet. Add some above!</p>\" +\n      \"</div>\";\n  } else {\n    Object.entries(subcategories).forEach(([subName, subColor]) => {\n      html +=\n        '<div class=\"subcategory-item\" data-subcategory=\"' +\n        subName +\n        '\">' +\n        '<div class=\"subcategory-info\">' +\n        '<span class=\"subcategory-color\" style=\"background-color: ' +\n        subColor +\n        ';\"></span>' +\n        '<span class=\"subcategory-name\">' +\n        subName +\n        \"</span>\" +\n        \"</div>\" +\n        '<div class=\"subcategory-actions\">' +\n        '<input type=\"color\" class=\"subcategory-color-picker\" value=\"' +\n        subColor +\n        '\" data-subcategory=\"' +\n        subName +\n        '\" title=\"Change color\">' +\n        '<button class=\"remove-subcategory-btn\" data-subcategory=\"' +\n        subName +\n        '\" title=\"Remove subcategory\">≡ƒùæ∩╕Å</button>' +\n        \"</div>\" +\n        \"</div>\";\n    });\n  }\n\n  html +=\n    \"</div>\" +\n    \"</div>\" +\n    '<div class=\"subcategory-actions-footer\">' +\n    '<button id=\"closeSubcategoryModal\" class=\"button secondary-btn\">Close</button>' +\n    \"</div>\";\n\n  modalContent.innerHTML = html;\n\n  const subcategoryModal = showModal({\n    title: \"Subcategories: \" + categoryName,\n    content: modalContent,\n    size: \"medium\",\n    closeOnClickOutside: false,\n  });\n\n  // Attach event listeners\n  attachSubcategoryModalEventListeners(\n    modalContent,\n    subcategoryModal,\n    categoryName\n  );\n}\n\n/**\n * Attach event listeners for subcategory management modal\n */\nfunction attachSubcategoryModalEventListeners(container, modal, categoryName) {\n  // Add subcategory button\n  const addBtn = container.querySelector(\"#addSubcategoryBtn\");\n  if (addBtn) {\n    addBtn.addEventListener(\"click\", () => {\n      const nameInput = container.querySelector(\"#newSubcategoryName\");\n      const colorInput = container.querySelector(\"#newSubcategoryColor\");\n\n      const name = nameInput.value.trim();\n      const color = colorInput.value;\n\n      if (!name) {\n        showToast(\"Please enter a subcategory name\", \"warning\");\n        return;\n      }\n\n      // Add subcategory\n      if (!AppState.categories[categoryName]) {\n        AppState.categories[categoryName] = {};\n      }\n      if (!AppState.categories[categoryName].subcategories) {\n        AppState.categories[categoryName].subcategories = {};\n      }\n\n      AppState.categories[categoryName].subcategories[name] = color;\n\n      // Save to localStorage\n      localStorage.setItem(\"categories\", JSON.stringify(AppState.categories));\n\n      showToast('Subcategory \"' + name + '\" added successfully', \"success\");\n\n      // Refresh the modal\n      modal.close();\n      setTimeout(() => handleManageSubcategories(categoryName), 100);\n    });\n  }\n\n  // Remove subcategory buttons\n  container.querySelectorAll(\".remove-subcategory-btn\").forEach((btn) => {\n    btn.addEventListener(\"click\", (e) => {\n      const subcategoryName = e.target.getAttribute(\"data-subcategory\");\n\n      if (\n        confirm(\n          'Are you sure you want to remove the subcategory \"' +\n            subcategoryName +\n            '\"?'\n        )\n      ) {\n        delete AppState.categories[categoryName].subcategories[subcategoryName];\n\n        // Save to localStorage\n        localStorage.setItem(\"categories\", JSON.stringify(AppState.categories));\n\n        showToast('Subcategory \"' + subcategoryName + '\" removed', \"success\");\n\n        // Refresh the modal\n        modal.close();\n        setTimeout(() => handleManageSubcategories(categoryName), 100);\n      }\n    });\n  });\n\n  // Color picker changes\n  container.querySelectorAll(\".subcategory-color-picker\").forEach((picker) => {\n    picker.addEventListener(\"change\", (e) => {\n      const subcategoryName = e.target.getAttribute(\"data-subcategory\");\n      const newColor = e.target.value;\n\n      AppState.categories[categoryName].subcategories[subcategoryName] =\n        newColor;\n\n      // Save to localStorage\n      localStorage.setItem(\"categories\", JSON.stringify(AppState.categories));\n\n      // Update the color display\n      const colorSpan = e.target\n        .closest(\".subcategory-item\")\n        .querySelector(\".subcategory-color\");\n      colorSpan.style.backgroundColor = newColor;\n\n      showToast('Color updated for \"' + subcategoryName + '\"', \"success\");\n    });\n  });\n\n  // Close button\n  const closeBtn = container.querySelector(\"#closeSubcategoryModal\");\n  if (closeBtn) {\n    closeBtn.addEventListener(\"click\", () => {\n      modal.close();\n    });\n  }\n}\n\n/**\n * Refresh category dropdowns in the transaction area\n */\nfunction refreshCategoryDropdowns() {\n  // Update category dropdowns in all transaction rows\n  const categorySelects = document.querySelectorAll(\n    'select[data-field=\"category\"], .category-select'\n  );\n  categorySelects.forEach((select) => {\n    const currentValue = select.value;\n\n    // Regenerate the dropdown options\n    const categories = AppState.categories || {};\n    const categoryEntries = Object.entries(categories);\n\n    let options = '<option value=\"\">Select Category</option>';\n    categoryEntries.forEach(([categoryName, categoryData]) => {\n      const selected = categoryName === currentValue ? \"selected\" : \"\";\n      options +=\n        '<option value=\"' +\n        categoryName +\n        '\" ' +\n        selected +\n        \">\" +\n        categoryName +\n        \"</option>\";\n    });\n\n    select.innerHTML = options;\n\n    // FIXED: Add change event listener to update charts in real time\n    if (!select.hasAttribute(\"data-chart-listener\")) {\n      select.setAttribute(\"data-chart-listener\", \"true\");\n      select.addEventListener(\"change\", () => {\n        // FIXED: Update charts immediately when category selection changes\n        setTimeout(async () => {\n          try {\n            const chartsModule = await import(\"./charts.js\");\n            if (chartsModule?.updateCharts) {\n              chartsModule.updateCharts();\n              console.log(\"Charts updated after category selection change\");\n            }\n          } catch (error) {\n            console.log(\"Charts not available for update:\", error.message);\n          }\n        }, 100);\n      });\n    }\n  });\n\n  // Update bulk category select dropdowns\n  const bulkCategorySelects = document.querySelectorAll(\"#bulkCategorySelect\");\n  bulkCategorySelects.forEach((select) => {\n    const currentValue = select.value;\n    const categories = AppState.categories || {};\n\n    let options = '<option value=\"\">Choose Category</option>';\n    Object.keys(categories)\n      .sort((a, b) => a.localeCompare(b))\n      .forEach((categoryName) => {\n        const selected = categoryName === currentValue ? \"selected\" : \"\";\n        options +=\n          '<option value=\"' +\n          categoryName +\n          '\" ' +\n          selected +\n          \">\" +\n          categoryName +\n          \"</option>\";\n      });\n\n    select.innerHTML = options;\n  });\n\n  // Also refresh advanced filters\n  const categoryFilters = document.querySelectorAll(\n    \"#categoryFilter, .category-select-btn\"\n  );\n  categoryFilters.forEach((filter) => {\n    // Trigger a refresh of the advanced filters if they exist\n    if (\n      window.refreshAdvancedFilters &&\n      typeof window.refreshAdvancedFilters === \"function\"\n    ) {\n      window.refreshAdvancedFilters();\n    }\n  });\n\n  // Update advanced filters category dropdown specifically\n  setTimeout(async () => {\n    try {\n      const advancedFiltersModule = await import(\n        \"./filters/advancedFilters.js\"\n      );\n      if (advancedFiltersModule.updateCategoryFilterOptions) {\n        advancedFiltersModule.updateCategoryFilterOptions();\n        console.log(\"Γ£à Advanced filters category dropdown updated\");\n      }\n    } catch (error) {\n      console.log(\"Advanced filters module not available:\", error.message);\n    }\n  }, 50);\n\n  // Update transaction manager to render fresh dropdowns\n  setTimeout(() => {\n    import(\"./transactionManager.js\")\n      .then((module) => {\n        if (module.renderTransactions && AppState.transactions) {\n          module.renderTransactions(AppState.transactions, false);\n        }\n      })\n      .catch((error) => {\n        console.warn(\"Could not refresh transaction manager:\", error);\n      });\n  }, 100);\n\n  // FIXED: Update charts when categories change\n  setTimeout(async () => {\n    try {\n      const chartsModule = await import(\"./charts.js\");\n      if (chartsModule?.updateCharts) {\n        chartsModule.updateCharts();\n        console.log(\"Charts updated after category changes\");\n      }\n    } catch (error) {\n      console.log(\"Charts not available for update:\", error.message);\n    }\n  }, 200);\n}\n\n/**\n * Add a new category\n */\nexport function addCategory(name, color) {\n  if (!name?.trim()) {\n    import(\"./uiManager.js\").then((module) => {\n      module.showToast(\"Category name cannot be empty\", \"error\");\n    });\n    return false;\n  }\n\n  name = name.trim();\n\n  if (AppState.categories[name]) {\n    import(\"./uiManager.js\").then((module) => {\n      module.showToast(\"Category already exists\", \"error\");\n    });\n    return false;\n  }\n\n  // Get next order number\n  const existingOrders = Object.values(AppState.categories)\n    .map((cat) =>\n      typeof cat === \"object\" && cat.order !== undefined ? cat.order : 999\n    )\n    .sort((a, b) => a - b);\n\n  const nextOrder =\n    existingOrders.length > 0 ? Math.max(...existingOrders) + 1 : 1;\n\n  AppState.categories[name] = {\n    color: color || \"#3498db\",\n    order: nextOrder,\n    subcategories: {},\n  };\n\n  localStorage.setItem(\"categories\", JSON.stringify(AppState.categories));\n  refreshCategoryDropdowns();\n\n  import(\"./uiManager.js\").then((module) => {\n    module.showToast('Category \"' + name + '\" added successfully', \"success\");\n  });\n\n  return true;\n}\n\n/**\n * Delete a category\n */\nexport function deleteCategory(name) {\n  if (!name || !AppState.categories[name]) {\n    import(\"./uiManager.js\").then((module) => {\n      module.showToast(\"Category not found\", \"error\");\n    });\n    return false;\n  }\n\n  delete AppState.categories[name];\n  localStorage.setItem(\"categories\", JSON.stringify(AppState.categories));\n\n  // Clear category from transactions\n  if (AppState.transactions) {\n    AppState.transactions.forEach((transaction) => {\n      if (transaction.category === name) {\n        transaction.category = \"\";\n        transaction.subcategory = \"\";\n      }\n    });\n    localStorage.setItem(\"transactions\", JSON.stringify(AppState.transactions));\n  }\n\n  refreshCategoryDropdowns();\n\n  import(\"./uiManager.js\").then((module) => {\n    module.showToast('Category \"' + name + '\" deleted', \"success\");\n  });\n\n  return true;\n}\n\n/**\n * Update a category\n */\nexport function updateCategory(oldName, newName, newColor) {\n  if (!oldName || !AppState.categories[oldName]) {\n    import(\"./uiManager.js\").then((module) => {\n      module.showToast(\"Category not found\", \"error\");\n    });\n    return false;\n  }\n\n  if (!newName?.trim()) {\n    import(\"./uiManager.js\").then((module) => {\n      module.showToast(\"Category name cannot be empty\", \"error\");\n    });\n    return false;\n  }\n\n  newName = newName.trim();\n\n  if (newName !== oldName && AppState.categories[newName]) {\n    import(\"./uiManager.js\").then((module) => {\n      module.showToast(\"Category name already exists\", \"error\");\n    });\n    return false;\n  }\n\n  const categoryData = AppState.categories[oldName];\n\n  if (newName !== oldName) {\n    // Update transactions that use this category\n    if (AppState.transactions) {\n      AppState.transactions.forEach((transaction) => {\n        if (transaction.category === oldName) {\n          transaction.category = newName;\n        }\n      });\n      localStorage.setItem(\n        \"transactions\",\n        JSON.stringify(AppState.transactions)\n      );\n    }\n\n    // Delete old and create new\n    delete AppState.categories[oldName];\n  }\n\n  AppState.categories[newName] = {\n    ...categoryData,\n    color: newColor,\n  };\n\n  localStorage.setItem(\"categories\", JSON.stringify(AppState.categories));\n  refreshCategoryDropdowns();\n\n  import(\"./uiManager.js\").then((module) => {\n    module.showToast(\n      'Category \"' + newName + '\" updated successfully',\n      \"success\"\n    );\n  });\n\n  return true;\n}\n\n/**\n * Add a subcategory\n */\nexport function addSubcategory(parentName, subName, subColor) {\n  // FIXED: Better error handling and parent category validation\n  if (!parentName?.trim()) {\n    import(\"./uiManager.js\").then((module) => {\n      module.showToast(\"Parent category name is required\", \"error\");\n    });\n    return false;\n  }\n\n  parentName = parentName.trim();\n\n  // FIXED: Initialize categories if not exists\n  if (!AppState.categories) {\n    AppState.categories = {};\n  }\n\n  // FIXED: Check if parent category exists, if not create it\n  if (!AppState.categories[parentName]) {\n    import(\"./uiManager.js\").then((module) => {\n      module.showToast(\n        'Parent category \"' +\n          parentName +\n          '\" not found. Please create it first.',\n        \"error\"\n      );\n    });\n    return false;\n  }\n\n  if (!subName?.trim()) {\n    import(\"./uiManager.js\").then((module) => {\n      module.showToast(\"Subcategory name cannot be empty\", \"error\");\n    });\n    return false;\n  }\n\n  subName = subName.trim();\n\n  // FIXED: Ensure parent category has proper structure\n  if (typeof AppState.categories[parentName] === \"string\") {\n    AppState.categories[parentName] = {\n      color: AppState.categories[parentName],\n      order: 999,\n      subcategories: {},\n    };\n  }\n\n  if (!AppState.categories[parentName].subcategories) {\n    AppState.categories[parentName].subcategories = {};\n  }\n\n  if (AppState.categories[parentName].subcategories[subName]) {\n    import(\"./uiManager.js\").then((module) => {\n      module.showToast(\"Subcategory already exists\", \"error\");\n    });\n    return false;\n  }\n\n  AppState.categories[parentName].subcategories[subName] =\n    subColor || \"#e74c3c\";\n  localStorage.setItem(\"categories\", JSON.stringify(AppState.categories));\n  refreshCategoryDropdowns();\n\n  import(\"./uiManager.js\").then((module) => {\n    module.showToast(\n      'Subcategory \"' + subName + '\" added successfully',\n      \"success\"\n    );\n  });\n\n  return true;\n}\n\n/**\n * Update a subcategory\n */\nexport function updateSubcategory(\n  parentName,\n  oldSubName,\n  newSubName,\n  newSubColor\n) {\n  if (\n    !parentName ||\n    !AppState.categories[parentName]?.subcategories?.[oldSubName]\n  ) {\n    import(\"./uiManager.js\").then((module) => {\n      module.showToast(\"Subcategory not found\", \"error\");\n    });\n    return false;\n  }\n\n  if (!newSubName?.trim()) {\n    import(\"./uiManager.js\").then((module) => {\n      module.showToast(\"Subcategory name cannot be empty\", \"error\");\n    });\n    return false;\n  }\n\n  newSubName = newSubName.trim();\n\n  if (\n    newSubName !== oldSubName &&\n    AppState.categories[parentName].subcategories[newSubName]\n  ) {\n    import(\"./uiManager.js\").then((module) => {\n      module.showToast(\"Subcategory name already exists\", \"error\");\n    });\n    return false;\n  }\n\n  if (newSubName !== oldSubName) {\n    // Update transactions that use this subcategory\n    if (AppState.transactions) {\n      AppState.transactions.forEach((transaction) => {\n        if (\n          transaction.category === parentName &&\n          transaction.subcategory === oldSubName\n        ) {\n          transaction.subcategory = newSubName;\n        }\n      });\n      localStorage.setItem(\n        \"transactions\",\n        JSON.stringify(AppState.transactions)\n      );\n    }\n\n    // Delete old and create new\n    delete AppState.categories[parentName].subcategories[oldSubName];\n  }\n\n  AppState.categories[parentName].subcategories[newSubName] = newSubColor;\n  localStorage.setItem(\"categories\", JSON.stringify(AppState.categories));\n  refreshCategoryDropdowns();\n\n  import(\"./uiManager.js\").then((module) => {\n    module.showToast(\n      'Subcategory \"' + newSubName + '\" updated successfully',\n      \"success\"\n    );\n  });\n\n  return true;\n}\n\n/**\n * Delete a subcategory\n */\nexport function deleteSubcategory(parentName, subName) {\n  if (\n    !parentName ||\n    !AppState.categories[parentName]?.subcategories?.[subName]\n  ) {\n    import(\"./uiManager.js\").then((module) => {\n      module.showToast(\"Subcategory not found\", \"error\");\n    });\n    return false;\n  }\n\n  delete AppState.categories[parentName].subcategories[subName];\n  localStorage.setItem(\"categories\", JSON.stringify(AppState.categories));\n\n  // Clear subcategory from transactions\n  if (AppState.transactions) {\n    AppState.transactions.forEach((transaction) => {\n      if (\n        transaction.category === parentName &&\n        transaction.subcategory === subName\n      ) {\n        transaction.subcategory = \"\";\n      }\n    });\n    localStorage.setItem(\"transactions\", JSON.stringify(AppState.transactions));\n  }\n\n  refreshCategoryDropdowns();\n\n  import(\"./uiManager.js\").then((module) => {\n    module.showToast('Subcategory \"' + subName + '\" deleted', \"success\");\n  });\n\n  return true;\n}\n\n/**\n * Attach event listeners for subcategory sections\n */\nfunction attachSubcategoryEventListeners(\n  subcategoriesSection,\n  container,\n  modal\n) {\n  if (!subcategoriesSection) return;\n\n  // Add subcategory button\n  const addBtn = subcategoriesSection.querySelector(\".add-subcategory-btn\");\n  if (addBtn) {\n    addBtn.addEventListener(\"click\", (e) => {\n      const parentName = e.target.getAttribute(\"data-parent\");\n      const nameInput = subcategoriesSection.querySelector(\".subname-input\");\n      const colorInput = subcategoriesSection.querySelector(\".subcolor-input\");\n\n      if (nameInput && colorInput) {\n        const name = nameInput.value.trim();\n        const color = colorInput.value;\n\n        if (name && addSubcategory(parentName, name, color)) {\n          nameInput.value = \"\";\n          colorInput.value = \"#e74c3c\";\n\n          // Refresh the modal content\n          container.innerHTML = buildCategoryManagerHTML();\n          attachCategoryManagerEventListeners(container, modal);\n        }\n      }\n    });\n  }\n\n  // Edit subcategory buttons\n  subcategoriesSection\n    .querySelectorAll(\".btn-edit-subcategory\")\n    .forEach((btn) => {\n      btn.addEventListener(\"click\", (e) => {\n        const subcategoryCard = e.target.closest(\".subcategory-card\");\n        const editForm = subcategoryCard.querySelector(\n          \".subcategory-edit-form\"\n        );\n\n        if (editForm) {\n          const isVisible = editForm.style.display !== \"none\";\n          editForm.style.display = isVisible ? \"none\" : \"block\";\n        }\n      });\n    });\n\n  // Save subcategory buttons\n  subcategoriesSection\n    .querySelectorAll(\".btn-save-subcategory\")\n    .forEach((btn) => {\n      btn.addEventListener(\"click\", (e) => {\n        const parentName = e.target.getAttribute(\"data-parent\");\n        const oldSubName = e.target.getAttribute(\"data-subcategory\");\n        const subcategoryCard = e.target.closest(\".subcategory-card\");\n        const nameInput = subcategoryCard.querySelector(\".edit-subname-input\");\n        const colorInput = subcategoryCard.querySelector(\n          \".edit-subcolor-input\"\n        );\n\n        if (nameInput && colorInput) {\n          const newSubName = nameInput.value.trim();\n          const newSubColor = colorInput.value;\n\n          if (\n            newSubName &&\n            updateSubcategory(parentName, oldSubName, newSubName, newSubColor)\n          ) {\n            // Refresh the modal content\n            container.innerHTML = buildCategoryManagerHTML();\n            attachCategoryManagerEventListeners(container, modal);\n          }\n        }\n      });\n    });\n\n  // Cancel subcategory buttons\n  subcategoriesSection\n    .querySelectorAll(\".btn-cancel-subcategory\")\n    .forEach((btn) => {\n      btn.addEventListener(\"click\", (e) => {\n        const subcategoryCard = e.target.closest(\".subcategory-card\");\n        const editForm = subcategoryCard.querySelector(\n          \".subcategory-edit-form\"\n        );\n        if (editForm) {\n          editForm.style.display = \"none\";\n        }\n      });\n    });\n\n  // Delete subcategory buttons\n  subcategoriesSection\n    .querySelectorAll(\".btn-delete-subcategory\")\n    .forEach((btn) => {\n      btn.addEventListener(\"click\", (e) => {\n        const parentName = e.target.getAttribute(\"data-parent\");\n        const subName = e.target.getAttribute(\"data-subcategory\");\n\n        if (confirm('Delete subcategory \"' + subName + '\"?')) {\n          if (deleteSubcategory(parentName, subName)) {\n            // Refresh the modal content\n            container.innerHTML = buildCategoryManagerHTML();\n            attachCategoryManagerEventListeners(container, modal);\n          }\n        }\n      });\n    });\n}\n\nconsole.log(\"Category manager module loaded\");\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\ui\\categoryMapping.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":15,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":15,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[369,504],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":22,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":22,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[551,623],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":45,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":45,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1093,1227],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":83,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":83,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1981,2049],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":158,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":158,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4054,4127],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":190,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":190,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4950,5053],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":223,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":223,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5739,5851],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":243,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":243,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6162,6207],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":251,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":251,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6332,6383],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":261,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":261,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6627,6689],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Category mapping from transaction descriptions to categories\nexport const descriptionCategoryMap = {\n  map: {},\n  isInitialized: false,\n\n  // Initialize if needed\n  init() {\n    if (this.isInitialized) {\n      return this;\n    }\n    try {\n      const saved = localStorage.getItem(\"categoryMappings\");\n      if (saved) {\n        this.map = JSON.parse(saved);\n        console.log(\n          `Loaded ${\n            Object.keys(this.map).length\n          } category mappings from localStorage.`\n        );\n      } else {\n        this.map = {};\n        console.log(\"No saved category mappings found, initialized empty map.\");\n      }\n    } catch (e) {\n      console.error(\"Error loading category mappings:\", e);\n      this.map = {};\n    }\n    this.isInitialized = true;\n    return this;\n  },\n};\n\n/**\n * Saves category mappings to local storage\n */\nexport function saveCategoryMappings() {\n  if (!descriptionCategoryMap.isInitialized) {\n    descriptionCategoryMap.init();\n  }\n  try {\n    localStorage.setItem(\n      \"categoryMappings\",\n      JSON.stringify(descriptionCategoryMap.map)\n    );\n    console.log(\n      `Saved ${\n        Object.keys(descriptionCategoryMap.map).length\n      } category mappings to localStorage.`\n    );\n  } catch (e) {\n    console.error(\"Error saving category mappings:\", e);\n  }\n}\n\n/**\n * Add or update a transaction description to category mapping.\n */\nexport function learnOrUpdateMapping(\n  description,\n  category,\n  subcategory = null,\n  isRegex = false\n) {\n  if (!description || !category) {\n    console.warn(\n      \"learnOrUpdateMapping: Description and category are required.\"\n    );\n    return;\n  }\n\n  descriptionCategoryMap.init();\n\n  const mappingValue = subcategory ? `${category}:${subcategory}` : category;\n  const key = isRegex ? description.trim() : description.trim().toLowerCase();\n\n  if (descriptionCategoryMap.map[key] === mappingValue) {\n    return;\n  }\n\n  descriptionCategoryMap.map[key] = mappingValue;\n  saveCategoryMappings();\n\n  console.log(`Learned/Updated mapping: \"${key}\" -> ${mappingValue}`);\n}\n\n/**\n * Get category for a transaction description\n */\nexport function getCategoryForDescription(description) {\n  if (!description) return null;\n\n  descriptionCategoryMap.init();\n\n  const normalizedDescription = description.trim().toLowerCase();\n\n  // Direct match\n  if (descriptionCategoryMap.map[normalizedDescription]) {\n    return descriptionCategoryMap.map[normalizedDescription];\n  }\n\n  // Try regex patterns\n  for (const pattern in descriptionCategoryMap.map) {\n    const isLikelyRegex =\n      pattern.startsWith(\"^\") ||\n      pattern.endsWith(\"$\") ||\n      pattern.includes(\"*\") ||\n      pattern.includes(\"(\") ||\n      pattern.includes(\"[\");\n\n    if (isLikelyRegex) {\n      try {\n        const regex = new RegExp(pattern, \"i\");\n        if (regex.test(normalizedDescription) || regex.test(description)) {\n          return descriptionCategoryMap.map[pattern];\n        }\n      } catch (e) {\n        console.warn(`Invalid regex pattern: ${pattern}`, e);\n      }\n    }\n  }\n\n  return null;\n}\n\n/**\n * Apply category mappings to transactions\n */\nexport function applyCategoryMappings(transactions) {\n  if (!Array.isArray(transactions)) {\n    console.warn(\"applyCategoryMappings: transactions must be an array\");\n    return 0;\n  }\n\n  descriptionCategoryMap.init();\n  let appliedCount = 0;\n\n  transactions.forEach((transaction) => {\n    // Only apply if transaction doesn't already have a category\n    if (!transaction.category || transaction.category === \"\") {\n      const suggestedCategory = getCategoryForDescription(\n        transaction.description\n      );\n      if (suggestedCategory) {\n        // Handle category:subcategory format\n        if (suggestedCategory.includes(\":\")) {\n          const [category, subcategory] = suggestedCategory.split(\":\");\n          transaction.category = category;\n          transaction.subcategory = subcategory;\n        } else {\n          transaction.category = suggestedCategory;\n        }\n        appliedCount++;\n      }\n    }\n  });\n\n  if (appliedCount > 0) {\n    console.log(`Applied category mappings to ${appliedCount} transactions`);\n  }\n\n  return appliedCount;\n}\n\n/**\n * Update category name in all mappings when a category is renamed\n */\nexport function updateCategoryNameInMappings(oldName, newName) {\n  if (!oldName || !newName) return;\n\n  descriptionCategoryMap.init();\n  let updatedCount = 0;\n\n  for (const [description, mapping] of Object.entries(\n    descriptionCategoryMap.map\n  )) {\n    if (mapping === oldName) {\n      // Simple category mapping\n      descriptionCategoryMap.map[description] = newName;\n      updatedCount++;\n    } else if (mapping.startsWith(oldName + \":\")) {\n      // Category with subcategory\n      const subcategory = mapping.substring(oldName.length + 1);\n      descriptionCategoryMap.map[description] = `${newName}:${subcategory}`;\n      updatedCount++;\n    }\n  }\n\n  if (updatedCount > 0) {\n    saveCategoryMappings();\n    console.log(\n      `Updated ${updatedCount} category mappings from \"${oldName}\" to \"${newName}\"`\n    );\n  }\n}\n\n/**\n * Update subcategory name in mappings when a subcategory is renamed\n */\nexport function updateSubcategoryNameInMappings(\n  categoryName,\n  oldSubName,\n  newSubName\n) {\n  if (!categoryName || !oldSubName || !newSubName) return;\n\n  descriptionCategoryMap.init();\n  let updatedCount = 0;\n\n  const oldMapping = `${categoryName}:${oldSubName}`;\n  const newMapping = `${categoryName}:${newSubName}`;\n\n  for (const [description, mapping] of Object.entries(\n    descriptionCategoryMap.map\n  )) {\n    if (mapping === oldMapping) {\n      descriptionCategoryMap.map[description] = newMapping;\n      updatedCount++;\n    }\n  }\n\n  if (updatedCount > 0) {\n    saveCategoryMappings();\n    console.log(\n      `Updated ${updatedCount} subcategory mappings from \"${oldSubName}\" to \"${newSubName}\"`\n    );\n  }\n}\n\n/**\n * Get all mappings for display purposes\n */\nexport function getAllMappings() {\n  descriptionCategoryMap.init();\n  return { ...descriptionCategoryMap.map };\n}\n\n/**\n * Clear all category mappings\n */\nexport function clearAllMappings() {\n  descriptionCategoryMap.map = {};\n  saveCategoryMappings();\n  console.log(\"Cleared all category mappings\");\n}\n\n/**\n * Initialize category mapping system\n */\nexport function initCategoryMapping() {\n  descriptionCategoryMap.init();\n  console.log(\"Category mapping system initialized\");\n}\n\n/**\n * FIXED: Reset category mappings when categories are reset\n */\nexport function resetCategoryMappingsForDefaults() {\n  // Clear existing mappings when resetting to defaults\n  descriptionCategoryMap.map = {};\n  saveCategoryMappings();\n  console.log(\"Reset category mappings for default categories\");\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\ui\\categoryModal.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\ui\\chartManager.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\ui\\charts.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":26,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":26,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[579,650],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":31,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":31,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[755,793],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":47,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":47,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1172,1219],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":87,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":87,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2365,2405],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":140,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":140,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3863,3925],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":170,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":170,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4726,4786],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":201,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":201,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5548,5585],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":232,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":232,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6398,6446],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":257,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":257,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7045,7087],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":320,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":320,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8353,8408],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":344,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":344,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9009,9062],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":378,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":378,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9970,10029],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":387,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":387,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10172,10228],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":390,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":390,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10284,10357],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":393,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":393,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10398,10450],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":430,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":430,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11599,11659],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":433,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":433,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11682,11729],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":470,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":470,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12750,12814],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":491,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":491,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13381,13445],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":499,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":499,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13600,13727],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":505,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":505,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13833,13905],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":514,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":514,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14063,14160],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":519,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":519,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14209,14270],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":528,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":528,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14492,14604],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":535,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":535,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14686,14738],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":538,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":538,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14787,14838],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":541,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":541,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14886,14935],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":557,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":557,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15423,15496],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":560,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":560,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15510,15576],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":595,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":595,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16544,16594],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":649,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":649,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18117,18188],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":697,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":697,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19385,19431],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":818,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":818,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[22792,22911],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":860,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":860,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[23846,23890],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":961,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":961,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[26569,26683],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AppState } from \"../core/appState.js\";\nimport { CURRENCIES } from \"../constants/currencies.js\";\n\nlet chartInstances = {\n  category: null,\n  monthly: null,\n  trend: null,\n};\n\n// FIXED: Global chart initialization state to prevent multiple loads\nlet chartInitializationState = {\n  initialized: false,\n  initializing: false,\n  hasData: false,\n};\n\n/**\n * Initialize charts functionality\n */\nexport async function initializeCharts() {\n  // Prevent multiple initialization\n  if (\n    chartInitializationState.initialized ||\n    chartInitializationState.initializing\n  ) {\n    console.log(\"Charts already initialized or initializing, skipping...\");\n    return chartInitializationState.initialized;\n  }\n\n  chartInitializationState.initializing = true;\n  console.log(\"Initializing charts...\");\n\n  try {\n    // Create chart containers first\n    createChartContainers();\n\n    // Check if Chart.js is available\n    if (typeof Chart === \"undefined\") {\n      console.warn(\"Chart.js not loaded, charts will not be available\");\n      return false;\n    }\n\n    // Initialize individual charts\n    initializeIndividualCharts();\n\n    chartInitializationState.initialized = true;\n    console.log(\"Charts initialized successfully\");\n    return true;\n  } catch (error) {\n    console.error(\"Error initializing charts:\", error);\n    return false;\n  } finally {\n    chartInitializationState.initializing = false;\n  }\n}\n\n/**\n * Initialize individual chart canvases\n */\nfunction initializeIndividualCharts() {\n  const chartConfigs = [\n    { id: \"categoryChart\", type: \"doughnut\", key: \"category\" },\n    { id: \"monthlyChart\", type: \"bar\", key: \"monthly\" },\n    { id: \"trendChart\", type: \"line\", key: \"trend\" },\n  ];\n\n  chartConfigs.forEach((config) => {\n    const canvas = document.getElementById(config.id);\n    if (canvas) {\n      try {\n        // Destroy existing chart if any\n        if (chartInstances[config.key]) {\n          chartInstances[config.key].destroy();\n        }\n\n        // FIXED: Set proper canvas sizing for zoom responsiveness\n        setupCanvasForResponsiveZoom(canvas);\n\n        // Create empty chart\n        const ctx = canvas.getContext(\"2d\");\n        const chart = new Chart(ctx, getEmptyChartConfig(config.type));\n        chartInstances[config.key] = chart;\n\n        // FIXED: Add zoom change detection\n        addZoomChangeHandler(canvas, chart);\n\n        console.log(`Initialized ${config.id}`);\n      } catch (error) {\n        console.error(`Error initializing ${config.id}:`, error);\n      }\n    }\n  });\n\n  // Initialize chart toggle buttons\n  initializeChartToggleButtons();\n\n  // FIXED: Add global zoom handler\n  setupGlobalZoomHandler();\n}\n\n/**\n * FIXED: Setup canvas for responsive zoom behavior\n */\nfunction setupCanvasForResponsiveZoom(canvas) {\n  // Remove any fixed dimensions that might interfere with zoom\n  canvas.style.removeProperty(\"width\");\n  canvas.style.removeProperty(\"height\");\n\n  // Set responsive CSS properties\n  canvas.style.maxWidth = \"100%\";\n  canvas.style.maxHeight = \"100%\";\n  canvas.style.display = \"block\";\n\n  // Ensure container has proper constraints\n  const container = canvas.closest(\".chart-wrapper, .chart-container\");\n  if (container) {\n    container.style.maxWidth = \"100vw\";\n    container.style.overflow = \"hidden\";\n    container.style.position = \"relative\";\n  }\n}\n\n/**\n * FIXED: Add zoom change detection for individual charts\n */\nfunction addZoomChangeHandler(canvas, chart) {\n  let lastZoom = window.devicePixelRatio;\n  let resizeTimeout;\n\n  const checkZoomChange = () => {\n    const currentZoom = window.devicePixelRatio;\n    if (Math.abs(currentZoom - lastZoom) > 0.1) {\n      lastZoom = currentZoom;\n\n      clearTimeout(resizeTimeout);\n      resizeTimeout = setTimeout(() => {\n        if (chart?.canvas?.isConnected) {\n          // Force canvas to recalculate dimensions\n          chart.resize();\n          console.log(`Chart resized due to zoom change: ${canvas.id}`);\n        }\n      }, 100);\n    }\n  };\n\n  // Check on various events that might indicate zoom\n  window.addEventListener(\"resize\", checkZoomChange);\n  window.addEventListener(\"orientationchange\", checkZoomChange);\n\n  // Store handler for cleanup\n  canvas._zoomHandler = checkZoomChange;\n}\n\n/**\n * FIXED: Setup global zoom handler for all charts\n */\nfunction setupGlobalZoomHandler() {\n  let lastDevicePixelRatio = window.devicePixelRatio;\n  let zoomTimeout;\n\n  const handleZoomChange = () => {\n    const currentDevicePixelRatio = window.devicePixelRatio;\n\n    // Detect significant zoom changes\n    if (Math.abs(currentDevicePixelRatio - lastDevicePixelRatio) > 0.1) {\n      lastDevicePixelRatio = currentDevicePixelRatio;\n\n      clearTimeout(zoomTimeout);\n      zoomTimeout = setTimeout(() => {\n        console.log(\"Zoom change detected, resizing all charts...\");\n        resizeAllCharts();\n      }, 150);\n    }\n  };\n\n  // Monitor for zoom changes\n  window.addEventListener(\"resize\", handleZoomChange);\n\n  // Also monitor for zoom via media queries\n  const mediaQuery = window.matchMedia(\"(min-resolution: 1dppx)\");\n  if (mediaQuery.addEventListener) {\n    mediaQuery.addEventListener(\"change\", handleZoomChange);\n  }\n}\n\n/**\n * FIXED: Resize all charts properly\n */\nfunction resizeAllCharts() {\n  Object.keys(chartInstances).forEach((key) => {\n    const chart = chartInstances[key];\n    if (chart?.canvas?.isConnected) {\n      try {\n        // Reset canvas style dimensions\n        const canvas = chart?.canvas;\n        setupCanvasForResponsiveZoom(canvas);\n\n        // Force chart to resize\n        chart.resize();\n\n        console.log(`Resized chart: ${key}`);\n      } catch (error) {\n        console.error(`Error resizing chart ${key}:`, error);\n      }\n    }\n  });\n}\n\n/**\n * Initialize chart toggle buttons in debug mode\n */\nfunction initializeChartToggleButtons() {\n  const toggleButtons = document.querySelectorAll(\".chart-toggle-btn\");\n\n  toggleButtons.forEach((button) => {\n    // FIXED: Remove existing listeners first\n    const newButton = button.cloneNode(true);\n    button.parentNode.replaceChild(newButton, button);\n\n    newButton.addEventListener(\"click\", function () {\n      const chartType = this.getAttribute(\"data-chart\");\n      toggleChart(chartType);\n\n      // Update button state\n      document\n        .querySelectorAll(\".chart-toggle-btn\")\n        .forEach((btn) => btn.classList.remove(\"active\"));\n      this.classList.add(\"active\");\n    });\n  });\n\n  console.log(\"Chart toggle buttons initialized\");\n}\n\n/**\n * Toggle chart visibility\n */\nfunction toggleChart(chartType) {\n  const chartWrappers = {\n    expense: \"expenseChartWrapper\",\n    income: \"incomeExpenseChartWrapper\",\n    timeline: \"timelineChartWrapper\",\n  };\n\n  // Hide all charts\n  Object.values(chartWrappers).forEach((wrapperId) => {\n    const wrapper = document.getElementById(wrapperId);\n    if (wrapper) {\n      wrapper.style.display = \"none\";\n    }\n  });\n\n  // Show selected chart\n  const selectedWrapper = document.getElementById(chartWrappers[chartType]);\n  if (selectedWrapper) {\n    selectedWrapper.style.display = \"block\";\n    console.log(`Showing ${chartType} chart`);\n  }\n}\n\n/**\n * Get empty chart configuration\n */\nfunction getEmptyChartConfig(type) {\n  const isDarkMode = document.body.classList.contains(\"dark-mode\");\n\n  const baseConfig = {\n    type: type,\n    data: {\n      labels: [],\n      datasets: [],\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          labels: {\n            color: isDarkMode ? \"#e0e0e0\" : \"#333\",\n          },\n        },\n      },\n    },\n  };\n\n  if (type === \"bar\" || type === \"line\") {\n    baseConfig.options.scales = {\n      x: {\n        ticks: {\n          color: isDarkMode ? \"#e0e0e0\" : \"#666\",\n        },\n        grid: {\n          color: isDarkMode ? \"#444\" : \"#e0e0e0\",\n        },\n      },\n      y: {\n        beginAtZero: true,\n        ticks: {\n          color: isDarkMode ? \"#e0e0e0\" : \"#666\",\n        },\n        grid: {\n          color: isDarkMode ? \"#444\" : \"#e0e0e0\",\n        },\n      },\n    };\n  }\n\n  return baseConfig;\n}\n\n/**\n * Create chart containers if they don't exist\n */\nfunction createChartContainers() {\n  // FIXED: Use the existing charts section from HTML instead of creating new one\n  const existingChartsSection = document.querySelector(\n    \".section .charts-section\"\n  );\n  if (existingChartsSection) {\n    console.log(\"Using existing charts section from HTML\");\n    return;\n  }\n\n  // Only create if completely missing\n  let chartsSection = document.getElementById(\"chartsSection\");\n  if (!chartsSection) {\n    createChartsSection();\n  }\n}\n\n/**\n * Create charts section if it doesn't exist\n */\nfunction createChartsSection() {\n  const mainContent = document.querySelector(\".main-content\");\n  if (!mainContent) {\n    console.error(\"Main content not found for charts section\");\n    return null;\n  }\n\n  // FIXED: Don't create new section if charts already exist in HTML\n  const existingCharts = document.querySelector(\".charts-section\");\n  if (existingCharts) {\n    console.log(\"Charts section already exists in HTML\");\n    return existingCharts.closest(\".section\");\n  }\n\n  // If no existing section found, create new one\n  const section = document.createElement(\"div\");\n  section.id = \"chartsSection\";\n  section.className = \"section charts-section\";\n  section.innerHTML = `\n    <div class=\"section-header\">\n      <h2>≡ƒôè Charts & Analytics</h2>\n    </div>\n    <div class=\"section-content\">\n      <!-- Chart containers will be added here -->\n    </div>\n  `;\n\n  // Insert after the first section (Financial Overview)\n  const firstSection = mainContent.querySelector(\".section\");\n  if (firstSection?.nextSibling) {\n    mainContent.insertBefore(section, firstSection.nextSibling);\n  } else {\n    mainContent.appendChild(section);\n  }\n\n  return section;\n}\n\n/**\n * FIXED: Update all charts with blink effect\n */\nexport function updateCharts() {\n  // Check if charts are initialized\n  if (!chartInitializationState.initialized) {\n    console.log(\"Charts not initialized yet, skipping update\");\n    return;\n  }\n\n  if (typeof Chart === \"undefined\") {\n    console.warn(\"Chart.js not available, skipping chart updates\");\n    return;\n  }\n\n  console.log(\"Updating charts with transaction data...\");\n\n  const transactions = AppState.transactions || [];\n  console.log(`Processing ${transactions.length} transactions for charts`);\n\n  if (transactions.length === 0) {\n    console.log(\"No transactions available for charts\");\n    clearAllCharts();\n    return;\n  }\n\n  // FIXED: Show loading indicators with blink effect only for initial load\n  if (!chartInitializationState.hasData) {\n    showChartLoadingWithBlink();\n  }\n\n  // FIXED: Update charts with delay only on first load, immediate on subsequent updates\n  const updateDelay = chartInitializationState.hasData ? 0 : 1200;\n\n  setTimeout(() => {\n    try {\n      updateCategoryChart(transactions);\n      updateMonthlyChart(transactions);\n      updateTrendChart(transactions);\n\n      // FIXED: Only hide loading indicators if we showed them\n      if (!chartInitializationState.hasData) {\n        hideChartLoadingIndicators();\n      }\n\n      // Ensure all chart wrappers are visible after update\n      setTimeout(() => {\n        const chartWrappers = document.querySelectorAll(\".chart-wrapper\");\n        chartWrappers.forEach((wrapper) => {\n          wrapper.style.display = \"block\";\n          wrapper.style.visibility = \"visible\";\n        });\n\n        const expenseWrapper = document.getElementById(\"expenseChartWrapper\");\n        if (expenseWrapper) {\n          expenseWrapper.style.display = \"block\";\n        }\n\n        console.log(\"All chart containers forced to visible state\");\n      }, 100);\n\n      console.log(\"All charts updated successfully\");\n      chartInitializationState.hasData = true; // Mark as having data\n    } catch (error) {\n      console.error(\"Error updating charts:\", error);\n      if (!chartInitializationState.hasData) {\n        hideChartLoadingIndicators();\n      }\n    }\n  }, updateDelay);\n}\n\n/**\n * FIXED: Show chart loading with blink effect\n */\nfunction showChartLoadingWithBlink() {\n  import(\"./uiManager.js\")\n    .then((uiModule) => {\n      if (uiModule.showChartLoading) {\n        uiModule.showChartLoading(\n          \"expenseChartWrapper\",\n          \"Loading expense chart...\"\n        );\n        if (document.getElementById(\"incomeExpenseChartWrapper\")) {\n          uiModule.showChartLoading(\n            \"incomeExpenseChartWrapper\",\n            \"Loading income chart...\"\n          );\n        }\n        if (document.getElementById(\"timelineChartWrapper\")) {\n          uiModule.showChartLoading(\n            \"timelineChartWrapper\",\n            \"Loading timeline chart...\"\n          );\n        }\n      }\n    })\n    .catch((error) => {\n      console.log(\"Loading indicators not available:\", error.message);\n    });\n}\n\n/**\n * FIXED: Hide loading indicators\n */\nfunction hideChartLoadingIndicators() {\n  import(\"./uiManager.js\")\n    .then((uiModule) => {\n      if (uiModule.hideChartLoading) {\n        uiModule.hideChartLoading(\"expenseChartWrapper\");\n        if (document.getElementById(\"incomeExpenseChartWrapper\")) {\n          uiModule.hideChartLoading(\"incomeExpenseChartWrapper\");\n        }\n        if (document.getElementById(\"timelineChartWrapper\")) {\n          uiModule.hideChartLoading(\"timelineChartWrapper\");\n        }\n      }\n    })\n    .catch((error) => {\n      console.log(\"Loading indicators not available:\", error.message);\n    });\n}\n\n/**\n * FIXED: Update charts with filtered data - for filtering only\n */\nexport function updateChartsWithFilteredData(filteredTransactions) {\n  console.log(\n    `CRITICAL: updateChartsWithFilteredData called with ${filteredTransactions.length} filtered transactions`\n  );\n\n  // Only allow this if charts already have initial data\n  if (!chartInitializationState.hasData) {\n    console.log(\"Charts don't have initial data yet, using regular update\");\n    return updateCharts();\n  }\n\n  if (typeof Chart === \"undefined\") {\n    console.warn(\"Chart.js not available, skipping chart updates\");\n    return;\n  }\n\n  console.log(\n    `Updating charts with ${filteredTransactions.length} filtered transactions`\n  );\n\n  if (filteredTransactions.length === 0) {\n    console.log(\"No filtered transactions available for charts\");\n    clearAllCharts();\n    return;\n  }\n\n  // Check if there are multiple currencies in the filtered transactions\n  const currencies = [\n    ...new Set(filteredTransactions.map((tx) => tx.currency).filter(Boolean)),\n  ];\n  console.log(\n    `CRITICAL: Filtered transactions contain currencies: ${currencies.join(\n      \", \"\n    )}`\n  );\n\n  // Update all charts with filtered data (no loading indicators for filters)\n  console.log(\"CRITICAL: Updating category chart...\");\n  updateCategoryChart(filteredTransactions);\n\n  console.log(\"CRITICAL: Updating monthly chart...\");\n  updateMonthlyChart(filteredTransactions);\n\n  console.log(\"CRITICAL: Updating trend chart...\");\n  updateTrendChart(filteredTransactions);\n\n  // Ensure all chart wrappers are visible when we have data\n  setTimeout(() => {\n    const chartWrappers = document.querySelectorAll(\".chart-wrapper\");\n    chartWrappers.forEach((wrapper) => {\n      wrapper.style.display = \"block\";\n      wrapper.style.visibility = \"visible\";\n    });\n\n    const expenseWrapper = document.getElementById(\"expenseChartWrapper\");\n    if (expenseWrapper) {\n      expenseWrapper.style.display = \"block\";\n    }\n\n    console.log(\"All chart containers forced to visible state after filter\");\n  }, 50);\n\n  console.log(\"All charts updated with filtered data successfully\");\n}\n\n/**\n * Update category chart\n */\nfunction updateCategoryChart(transactions) {\n  const canvas = document.getElementById(\"categoryChart\");\n  if (!canvas) return;\n\n  // Destroy existing chart\n  if (chartInstances.category) {\n    chartInstances.category.destroy();\n  }\n\n  // FIXED: Process data for category chart - handle multiple currencies\n  const categoryData = {};\n  transactions.forEach((tx) => {\n    const category = tx.category || \"Uncategorized\";\n    const amount = Math.abs(parseFloat(tx.expenses) || 0);\n    const currency = tx.currency || \"USD\";\n\n    if (amount > 0) {\n      // Create category key with currency info for display\n      const displayCategory =\n        currency !== \"USD\" ? `${category} (${currency})` : category;\n      categoryData[displayCategory] =\n        (categoryData[displayCategory] || 0) + amount;\n    }\n  });\n\n  const labels = Object.keys(categoryData);\n  const data = Object.values(categoryData);\n\n  if (labels.length === 0) {\n    console.log(\"No expense data for category chart\");\n    return;\n  }\n\n  // Create chart with dark mode support\n  const ctx = canvas.getContext(\"2d\");\n  const isDarkMode = document.body.classList.contains(\"dark-mode\");\n\n  chartInstances.category = new Chart(ctx, {\n    type: \"doughnut\",\n    data: {\n      labels: labels,\n      datasets: [\n        {\n          data: data,\n          backgroundColor: generateColors(labels.length),\n        },\n      ],\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          labels: {\n            color: isDarkMode ? \"#e0e0e0\" : \"#333\",\n            font: {\n              size: 12,\n            },\n          },\n        },\n        tooltip: {\n          titleColor: isDarkMode ? \"#e0e0e0\" : \"#333\",\n          bodyColor: isDarkMode ? \"#e0e0e0\" : \"#333\",\n          backgroundColor: isDarkMode ? \"#2a2a2a\" : \"#fff\",\n          borderColor: isDarkMode ? \"#444\" : \"#ddd\",\n          borderWidth: 1,\n          callbacks: {\n            label: function (context) {\n              const value = context.parsed;\n              const label = context.label;\n              // Extract currency from label if present\n              const currencyRegex = /\\(([A-Z]{3})\\)$/;\n              const currencyMatch = currencyRegex.exec(label);\n              const currency = currencyMatch ? currencyMatch[1] : \"USD\";\n              const symbol = CURRENCIES[currency]?.symbol || \"$\";\n              return `${label}: ${symbol}${value.toFixed(2)}`;\n            },\n          },\n        },\n      },\n    },\n  });\n\n  console.log(`Category chart updated with ${labels.length} categories`);\n}\n\n/**\n * Update monthly chart\n */\nfunction updateMonthlyChart(transactions) {\n  const canvas = document.getElementById(\"monthlyChart\");\n  if (!canvas) return;\n\n  // Destroy existing chart\n  if (chartInstances.monthly) {\n    chartInstances.monthly.destroy();\n  }\n\n  // FIXED: Process data for monthly chart - group by currency and month\n  const monthlyData = {};\n  const currencies = new Set();\n\n  transactions.forEach((tx) => {\n    if (!tx.date) return;\n\n    const date = new Date(tx.date);\n    if (isNaN(date.getTime())) return;\n\n    const monthKey = `${date.getFullYear()}-${String(\n      date.getMonth() + 1\n    ).padStart(2, \"0\")}`;\n    const currency = tx.currency || \"USD\";\n\n    currencies.add(currency);\n\n    if (!monthlyData[monthKey]) {\n      monthlyData[monthKey] = {};\n    }\n    if (!monthlyData[monthKey][currency]) {\n      monthlyData[monthKey][currency] = { income: 0, expenses: 0 };\n    }\n\n    monthlyData[monthKey][currency].income += parseFloat(tx.income) || 0;\n    monthlyData[monthKey][currency].expenses += parseFloat(tx.expenses) || 0;\n  });\n\n  const sortedMonths = Object.keys(monthlyData).sort((a, b) =>\n    a.localeCompare(b)\n  );\n\n  if (sortedMonths.length === 0) {\n    console.log(\"No date data for monthly chart\");\n    return;\n  }\n\n  // Format labels for display\n  const labels = sortedMonths.map((month) => {\n    const [year, monthNum] = month.split(\"-\");\n    const date = new Date(year, monthNum - 1);\n    return date.toLocaleDateString(\"en-US\", {\n      month: \"short\",\n      year: \"numeric\",\n    });\n  });\n\n  // Create datasets for each currency\n  const datasets = [];\n  const currencyArray = Array.from(currencies).sort((a, b) =>\n    a.localeCompare(b)\n  );\n\n  currencyArray.forEach((currency, index) => {\n    const incomeData = sortedMonths.map(\n      (month) => monthlyData[month][currency]?.income || 0\n    );\n    const expenseData = sortedMonths.map(\n      (month) => monthlyData[month][currency]?.expenses || 0\n    );\n\n    // Add income dataset for this currency\n    datasets.push({\n      label: `Income (${currency})`,\n      data: incomeData,\n      backgroundColor: `rgba(40, 167, 69, ${0.8 - index * 0.2})`,\n      borderColor: `rgba(40, 167, 69, 1)`,\n      borderWidth: 1,\n    });\n\n    // Add expense dataset for this currency\n    datasets.push({\n      label: `Expenses (${currency})`,\n      data: expenseData,\n      backgroundColor: `rgba(220, 53, 69, ${0.8 - index * 0.2})`,\n      borderColor: `rgba(220, 53, 69, 1)`,\n      borderWidth: 1,\n    });\n  });\n\n  // Create chart with dark mode support\n  const ctx = canvas.getContext(\"2d\");\n  const isDarkMode = document.body.classList.contains(\"dark-mode\");\n\n  chartInstances.monthly = new Chart(ctx, {\n    type: \"bar\",\n    data: {\n      labels: labels,\n      datasets: datasets,\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          labels: {\n            color: isDarkMode ? \"#e0e0e0\" : \"#333\",\n            font: {\n              size: 12,\n            },\n          },\n        },\n        tooltip: {\n          titleColor: isDarkMode ? \"#e0e0e0\" : \"#333\",\n          bodyColor: isDarkMode ? \"#e0e0e0\" : \"#333\",\n          backgroundColor: isDarkMode ? \"#2a2a2a\" : \"#fff\",\n          borderColor: isDarkMode ? \"#444\" : \"#ddd\",\n          borderWidth: 1,\n          callbacks: {\n            label: function (context) {\n              const value = context.parsed.y;\n              const label = context.dataset.label;\n              // Extract currency from label\n              const currencyRegex = /\\(([A-Z]{3})\\)$/;\n              const currencyMatch = currencyRegex.exec(label);\n              const currency = currencyMatch ? currencyMatch[1] : \"USD\";\n              const symbol = CURRENCIES[currency]?.symbol || \"$\";\n              return `${label}: ${symbol}${value.toFixed(2)}`;\n            },\n          },\n        },\n      },\n      scales: {\n        x: {\n          ticks: {\n            color: isDarkMode ? \"#e0e0e0\" : \"#666\",\n            font: {\n              size: 11,\n            },\n          },\n          grid: {\n            color: isDarkMode ? \"#444\" : \"#e0e0e0\",\n          },\n        },\n        y: {\n          beginAtZero: true,\n          ticks: {\n            color: isDarkMode ? \"#e0e0e0\" : \"#666\",\n            font: {\n              size: 11,\n            },\n            callback: function (value) {\n              // Show values with appropriate currency symbol\n              return value.toFixed(0);\n            },\n          },\n          grid: {\n            color: isDarkMode ? \"#444\" : \"#e0e0e0\",\n          },\n        },\n      },\n    },\n  });\n\n  console.log(\n    `Monthly chart updated with ${sortedMonths.length} months and ${currencyArray.length} currencies`\n  );\n}\n\n/**\n * Update trend chart\n */\nfunction updateTrendChart(transactions) {\n  const canvas = document.getElementById(\"trendChart\");\n  if (!canvas) return;\n\n  // Destroy existing chart\n  if (chartInstances.trend) {\n    chartInstances.trend.destroy();\n  }\n\n  // FIXED: Process data for trend chart - handle multiple currencies\n  const dailyData = {};\n  const currencies = new Set();\n\n  transactions.forEach((tx) => {\n    if (!tx.date) return;\n\n    const dateKey = tx.date.split(\"T\")[0]; // Get just the date part\n    const currency = tx.currency || \"USD\";\n\n    currencies.add(currency);\n\n    if (!dailyData[dateKey]) {\n      dailyData[dateKey] = {};\n    }\n    if (!dailyData[dateKey][currency]) {\n      dailyData[dateKey][currency] = 0;\n    }\n\n    dailyData[dateKey][currency] += parseFloat(tx.expenses) || 0;\n  });\n\n  const sortedDates = Object.keys(dailyData).sort((a, b) => a.localeCompare(b));\n\n  if (sortedDates.length === 0) {\n    console.log(\"No date data for trend chart\");\n    return;\n  }\n\n  // Create datasets for each currency\n  const datasets = [];\n  const currencyArray = Array.from(currencies).sort((a, b) =>\n    a.localeCompare(b)\n  );\n  const colors = [\n    \"rgba(54, 162, 235, 1)\",\n    \"rgba(255, 99, 132, 1)\",\n    \"rgba(75, 192, 192, 1)\",\n    \"rgba(153, 102, 255, 1)\",\n  ];\n\n  currencyArray.forEach((currency, index) => {\n    const expenseData = sortedDates.map(\n      (date) => dailyData[date][currency] || 0\n    );\n\n    datasets.push({\n      label: `Daily Expenses (${currency})`,\n      data: expenseData,\n      borderColor: colors[index % colors.length],\n      backgroundColor: colors[index % colors.length].replace(\"1)\", \"0.2)\"),\n      fill: false,\n      tension: 0.1,\n    });\n  });\n\n  // Create chart with dark mode support\n  const ctx = canvas.getContext(\"2d\");\n  const isDarkMode = document.body.classList.contains(\"dark-mode\");\n\n  chartInstances.trend = new Chart(ctx, {\n    type: \"line\",\n    data: {\n      labels: sortedDates,\n      datasets: datasets,\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          labels: {\n            color: isDarkMode ? \"#e0e0e0\" : \"#333\",\n            font: {\n              size: 12,\n            },\n          },\n        },\n        tooltip: {\n          titleColor: isDarkMode ? \"#e0e0e0\" : \"#333\",\n          bodyColor: isDarkMode ? \"#e0e0e0\" : \"#333\",\n          backgroundColor: isDarkMode ? \"#2a2a2a\" : \"#fff\",\n          borderColor: isDarkMode ? \"#444\" : \"#ddd\",\n          borderWidth: 1,\n          callbacks: {\n            label: function (context) {\n              const value = context.parsed.y;\n              const label = context.dataset.label;\n              // Extract currency from label\n              const currencyRegex = /\\(([A-Z]{3})\\)$/;\n              const currencyMatch = currencyRegex.exec(label);\n              const currency = currencyMatch ? currencyMatch[1] : \"USD\";\n              const symbol = CURRENCIES[currency]?.symbol || \"$\";\n              return `${label}: ${symbol}${value.toFixed(2)}`;\n            },\n          },\n        },\n      },\n      scales: {\n        x: {\n          ticks: {\n            color: isDarkMode ? \"#e0e0e0\" : \"#666\",\n            font: {\n              size: 11,\n            },\n          },\n          grid: {\n            color: isDarkMode ? \"#444\" : \"#e0e0e0\",\n          },\n        },\n        y: {\n          beginAtZero: true,\n          ticks: {\n            color: isDarkMode ? \"#e0e0e0\" : \"#666\",\n            font: {\n              size: 11,\n            },\n          },\n          grid: {\n            color: isDarkMode ? \"#444\" : \"#e0e0e0\",\n          },\n        },\n      },\n    },\n  });\n\n  console.log(\n    `Trend chart updated with ${sortedDates.length} days and ${currencyArray.length} currencies`\n  );\n}\n\n/**\n * Generate colors for charts\n */\nfunction generateColors(count) {\n  const colors = [\n    \"#FF6384\",\n    \"#36A2EB\",\n    \"#FFCE56\",\n    \"#4BC0C0\",\n    \"#9966FF\",\n    \"#FF9F40\",\n    \"#FF6384\",\n    \"#C9CBCF\",\n  ];\n\n  const result = [];\n  for (let i = 0; i < count; i++) {\n    result.push(colors[i % colors.length]);\n  }\n  return result;\n}\n\n/**\n * Clear all charts\n */\nfunction clearAllCharts() {\n  Object.keys(chartInstances).forEach((key) => {\n    if (chartInstances[key]) {\n      try {\n        chartInstances[key].data.labels = [];\n        chartInstances[key].data.datasets = [];\n        chartInstances[key].update(\"none\");\n      } catch (error) {\n        console.error(`Error clearing chart ${key}:`, error);\n      }\n    }\n  });\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\ui\\dragAndDrop.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\ui\\enhancedCategoryManager.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":19,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":19,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[626,686],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":23,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":23,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[736,794],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":30,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":30,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1008,1108],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":62,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":62,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1948,2009],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":74,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":74,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2283,2379],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":83,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":83,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2598,2714],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":93,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":93,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2958,3074],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":114,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":114,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3826,3866],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":238,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":238,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8255,8322],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":241,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":241,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8389,8451],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":249,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":249,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8576,8674],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":261,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":261,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9012,9111],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1140,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1140,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[37646,37714],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1150,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1150,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[38006,38158],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1160,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1160,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[38389,38534],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * ≡ƒÄ¿ Enhanced Category Manager - Modern UI/UX with Advanced Functionality\n * Features: Improved design, accessibility, bulk operations, drag & drop, validation\n */\n\nimport { AppState, saveCategories } from \"../core/appState.js\";\nimport { showModal } from \"./modalManager.js\";\nimport { showToast } from \"./uiManager.js\";\n\n// Singleton pattern to ensure only one modal is open\nlet enhancedCategoryModalInstance = null;\n\n/**\n * ≡ƒÄ» Main function to show the enhanced category manager modal\n */\nexport async function showEnhancedCategoryManagerModal() {\n  // Prevent multiple modals\n  if (enhancedCategoryModalInstance) {\n    console.log(\"Enhanced category manager modal already open\");\n    return enhancedCategoryModalInstance;\n  }\n\n  console.log(\"Opening enhanced category manager modal...\");\n\n  // Ensure categories are loaded before showing the modal (now async)\n  await ensureCategoriesLoaded();\n\n  const categories = AppState.categories || {};\n  const categoryCount = Object.keys(categories).length;\n  console.log(\n    `Enhanced Category Manager: Found ${categoryCount} categories`,\n    categories\n  );\n\n  const modalContent = document.createElement(\"div\");\n  modalContent.className = \"enhanced-category-manager\";\n  modalContent.innerHTML = buildEnhancedCategoryManagerHTML();\n\n  const modal = showModal({\n    title: \"≡ƒÄ¿ Enhanced Category Manager\",\n    content: modalContent,\n    size: \"xlarge\",\n    closeOnClickOutside: false,\n  });\n\n  // Store reference and override close method\n  enhancedCategoryModalInstance = modal;\n  const originalClose = modal.close;\n  modal.close = function () {\n    enhancedCategoryModalInstance = null;\n    originalClose.call(this);\n  };\n\n  // Apply styles and attach event listeners\n  addEnhancedCategoryStyles();\n  attachEnhancedEventListeners(modalContent, modal);\n  initializeEnhancedFeatures(modalContent);\n\n  // Ensure categories are displayed properly\n  setTimeout(() => {\n    refreshCategoriesGrid();\n    console.log(\"Categories grid refreshed after modal display\");\n  }, 100);\n\n  return modal;\n}\n\n/**\n * ≡ƒöä Ensure categories are loaded and initialized\n */\nasync function ensureCategoriesLoaded() {\n  // Check if categories are empty or not properly loaded\n  if (!AppState.categories || Object.keys(AppState.categories).length === 0) {\n    console.log(\n      \"Categories not loaded, initializing from localStorage or defaults...\"\n    );\n\n    try {\n      // Try to load from localStorage first\n      const savedCategories = localStorage.getItem(\"categories\");\n      if (savedCategories) {\n        AppState.categories = JSON.parse(savedCategories);\n        console.log(\n          \"Loaded categories from localStorage:\",\n          Object.keys(AppState.categories)\n        );\n      } else {\n        // If no saved categories, initialize with defaults\n        const { DEFAULT_CATEGORIES } = await import(\n          \"../constants/categories.js\"\n        );\n        AppState.categories = { ...DEFAULT_CATEGORIES };\n        console.log(\n          \"Initialized with default categories:\",\n          Object.keys(AppState.categories)\n        );\n\n        // Save to localStorage for future use\n        localStorage.setItem(\"categories\", JSON.stringify(AppState.categories));\n      }\n    } catch (error) {\n      console.error(\"Error loading categories:\", error);\n\n      // Fallback to a basic set of categories\n      AppState.categories = {\n        \"Food & Dining\": { color: \"#FF6B6B\", subcategories: {} },\n        Transportation: { color: \"#4ECDC4\", subcategories: {} },\n        Shopping: { color: \"#45B7D1\", subcategories: {} },\n        \"Bills & Utilities\": { color: \"#FFEAA7\", subcategories: {} },\n        Entertainment: { color: \"#96CEB4\", subcategories: {} },\n        Healthcare: { color: \"#FD79A8\", subcategories: {} },\n        Income: { color: \"#6C5CE7\", subcategories: {} },\n      };\n      console.log(\"Used fallback categories\");\n    }\n  }\n}\n\n/**\n * ≡ƒÅù∩╕Å Build the enhanced HTML structure\n */\nfunction buildEnhancedCategoryManagerHTML() {\n  const categories = AppState.categories || {};\n  const categoryCount = Object.keys(categories).length;\n\n  return `\n    <div class=\"enhanced-category-container\">\n      <!-- Header Section -->\n      <div class=\"enhanced-header\">\n        <div class=\"header-content\">\n          <div class=\"header-text\">\n            <h2>Category Management</h2>\n            <p>Organize and customize your expense categories</p>\n          </div>\n          <div class=\"header-stats\">\n            <div class=\"stat-item\">\n              <span class=\"stat-number\">${categoryCount}</span>\n              <span class=\"stat-label\">Categories</span>\n            </div>\n            <div class=\"stat-item\">\n              <span class=\"stat-number\">${getTotalSubcategories()}</span>\n              <span class=\"stat-label\">Subcategories</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Toolbar Section -->\n      <div class=\"enhanced-toolbar\">\n        <div class=\"toolbar-left\">\n          <div class=\"search-container\">\n            <input type=\"text\" id=\"categorySearch\" placeholder=\"≡ƒöì Search categories...\" class=\"search-input\">\n            <button id=\"clearSearch\" class=\"search-clear\" aria-label=\"Clear search\">├ù</button>\n          </div>\n          <div class=\"filter-container\">\n            <select id=\"categoryFilter\" class=\"filter-select\">\n              <option value=\"all\">All Categories</option>\n              <option value=\"with-subcategories\">With Subcategories</option>\n              <option value=\"without-subcategories\">Simple Categories</option>\n              <option value=\"recently-used\">Recently Used</option>\n            </select>\n          </div>\n        </div>\n        <div class=\"toolbar-right\">\n          <button id=\"bulkOperations\" class=\"btn btn-secondary\">\n            <span class=\"btn-icon\">≡ƒôª</span>\n            <span class=\"btn-text\">Bulk Actions</span>\n          </button>\n          <button id=\"importExport\" class=\"btn btn-secondary\">\n            <span class=\"btn-icon\">ΓÜí</span>\n            <span class=\"btn-text\">Import/Export</span>\n          </button>\n          <button id=\"addNewCategory\" class=\"btn btn-primary\">\n            <span class=\"btn-icon\">+</span>\n            <span class=\"btn-text\">Add Category</span>\n          </button>\n        </div>\n      </div>\n\n      <!-- Main Content Area -->\n      <div class=\"enhanced-content\">\n        <div class=\"content-main\">\n          <!-- Categories Grid -->\n          <div class=\"categories-grid\" id=\"categoriesGrid\">\n            ${buildEnhancedCategoriesGrid(categories)}\n          </div>\n\n          <!-- Empty State -->\n          <div class=\"empty-state\" id=\"emptyState\" style=\"display: ${\n            categoryCount === 0 ? \"flex\" : \"none\"\n          }\">\n            <div class=\"empty-content\">\n              <div class=\"empty-icon\">≡ƒôé</div>\n              <h3>No Categories Yet</h3>\n              <p>Create your first category to start organizing your expenses</p>\n              <button class=\"btn btn-primary btn-large\" id=\"createFirstCategory\">\n                <span class=\"btn-icon\">Γ£¿</span>\n                <span class=\"btn-text\">Create First Category</span>\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <!-- Sidebar Panel (for bulk operations, etc.) -->\n        <div class=\"content-sidebar\" id=\"contentSidebar\" style=\"display: none;\">\n          <div class=\"sidebar-content\">\n            <!-- Dynamic content based on selected action -->\n          </div>\n        </div>\n      </div>\n\n      <!-- Footer Section -->\n      <div class=\"enhanced-footer\">\n        <div class=\"footer-left\">\n          <span class=\"footer-info\">\n            <span id=\"selectedCount\">0</span> categories selected\n          </span>\n        </div>\n        <div class=\"footer-right\">\n          <button id=\"resetCategories\" class=\"btn btn-ghost\">\n            <span class=\"btn-icon\">≡ƒöä</span>\n            <span class=\"btn-text\">Reset to Defaults</span>\n          </button>\n          <button id=\"closeModal\" class=\"btn btn-secondary\">\n            <span class=\"btn-icon\">Γ£ò</span>\n            <span class=\"btn-text\">Close</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n/**\n * ≡ƒÄ¿ Build enhanced categories grid\n */\nfunction buildEnhancedCategoriesGrid(categories) {\n  console.log(\"Building enhanced categories grid with:\", categories);\n\n  if (!categories || Object.keys(categories).length === 0) {\n    console.log(\"No categories to display - showing empty state\");\n    return \"\";\n  }\n\n  const sortedCategories = Object.entries(categories).sort(([a], [b]) =>\n    a.localeCompare(b)\n  );\n\n  console.log(\n    `Sorted categories for display:`,\n    sortedCategories.map(([name]) => name)\n  );\n\n  return sortedCategories\n    .map(([name, value], index) => {\n      const isComplexCategory = typeof value === \"object\";\n      const color = isComplexCategory ? value.color : value;\n      const subcategories = isComplexCategory ? value.subcategories || {} : {};\n      const subcategoryCount = Object.keys(subcategories).length;\n\n      console.log(\n        `Category ${name}: color=${color}, subcategories=${subcategoryCount}`\n      );\n\n      return `\n      <div class=\"enhanced-category-card\" data-category=\"${name}\" data-color=\"${color}\">\n        <div class=\"category-card-header\">\n          <div class=\"category-visual\">\n            <div class=\"category-color\" style=\"background-color: ${color}\"></div>\n            <div class=\"category-checkbox\">\n              <input type=\"checkbox\" id=\"select-${index}\" class=\"category-select\">\n            </div>\n          </div>\n          <div class=\"category-info\">\n            <h4 class=\"category-name\">${name}</h4>\n            <p class=\"category-meta\">\n              ${\n                subcategoryCount > 0\n                  ? `${subcategoryCount} subcategories`\n                  : \"Simple category\"\n              }\n            </p>\n          </div>\n          <div class=\"category-actions\">\n            <button class=\"action-btn edit-btn\" data-action=\"edit\" data-category=\"${name}\" title=\"Edit category\">\n              <span class=\"action-icon\">Γ£Å∩╕Å</span>\n            </button>\n            <button class=\"action-btn subcategory-btn\" data-action=\"subcategories\" data-category=\"${name}\" title=\"Manage subcategories\">\n              <span class=\"action-icon\">≡ƒôü</span>\n            </button>\n            <button class=\"action-btn delete-btn\" data-action=\"delete\" data-category=\"${name}\" title=\"Delete category\">\n              <span class=\"action-icon\">≡ƒùæ∩╕Å</span>\n            </button>\n            <button class=\"action-btn drag-handle\" title=\"Drag to reorder\">\n              <span class=\"action-icon\">Γï«Γï«</span>\n            </button>\n          </div>\n        </div>\n\n        ${\n          subcategoryCount > 0\n            ? buildSubcategoriesPreview(subcategories, subcategoryCount)\n            : \"\"\n        }\n      </div>\n    `;\n    })\n    .join(\"\");\n}\n\n/**\n * ≡ƒÅù∩╕Å Build subcategories preview section\n */\nfunction buildSubcategoriesPreview(subcategories, subcategoryCount) {\n  const moreText =\n    subcategoryCount > 3\n      ? `<span class=\"subcategory-more\">+${subcategoryCount - 3} more</span>`\n      : \"\";\n\n  return `\n    <div class=\"category-card-body\">\n      <div class=\"subcategories-preview\">\n        <h5>Subcategories (${subcategoryCount})</h5>\n        <div class=\"subcategories-list\">\n          ${Object.entries(subcategories)\n            .slice(0, 3)\n            .map(\n              ([subName, subColor]) => `\n            <span class=\"subcategory-tag\" style=\"border-left-color: ${subColor}\">\n              ${subName}\n            </span>\n          `\n            )\n            .join(\"\")}\n          ${moreText}\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n/**\n * ≡ƒôè Get total subcategories count\n */\nfunction getTotalSubcategories() {\n  const categories = AppState.categories || {};\n  return Object.values(categories).reduce((total, category) => {\n    if (typeof category === \"object\" && category.subcategories) {\n      return total + Object.keys(category.subcategories).length;\n    }\n    return total;\n  }, 0);\n}\n\n/**\n * ≡ƒÄ¿ Add enhanced styles\n */\nfunction addEnhancedCategoryStyles() {\n  // If already marked as loaded, do nothing\n  if (document.getElementById(\"enhancedCategoryStyles\")) return;\n\n  // Ensure the canonical stylesheet is present; prefer main styles bundle\n  const hasMainStyles = Array.from(\n    document.querySelectorAll('link[rel=\"stylesheet\"]')\n  ).some((link) =>\n    /styles\\/styles\\.css$/i.test(link.getAttribute(\"href\") || \"\")\n  );\n  const hasManagerStyles = Array.from(\n    document.querySelectorAll('link[rel=\"stylesheet\"]')\n  ).some((link) =>\n    /styles\\/enhanced-category-manager\\.css$/i.test(\n      link.getAttribute(\"href\") || \"\"\n    )\n  );\n\n  if (!hasMainStyles && !hasManagerStyles) {\n    try {\n      const link = document.createElement(\"link\");\n      link.id = \"enhancedCategoryStyles\";\n      link.rel = \"stylesheet\";\n      // Use main bundle which already @imports the manager CSS\n      link.href = \"styles/styles.css\";\n      document.head.appendChild(link);\n      return;\n    } catch (e) {\n      // Fallback: insert a minimal marker style (no duplicate rules)\n      // Handle exception explicitly to avoid silent failures in analysis tools\n      console.warn(\n        \"EnhancedCategoryManager: failed to append stylesheet link, falling back to inline marker style.\",\n        e\n      );\n      const style = document.createElement(\"style\");\n      style.id = \"enhancedCategoryStyles\";\n      style.textContent =\n        \"/* Enhanced Category Manager styles loaded via canonical CSS */\";\n      document.head.appendChild(style);\n    }\n  } else {\n    // Add a lightweight marker to avoid re-running\n    const style = document.createElement(\"style\");\n    style.id = \"enhancedCategoryStyles\";\n    style.textContent =\n      \"/* Enhanced Category Manager styles already present via canonical CSS */\";\n    document.head.appendChild(style);\n  }\n}\n\n/**\n * ≡ƒÄ« Attach enhanced event listeners\n */\nfunction attachEnhancedEventListeners(container, modal) {\n  // Search functionality\n  const searchInput = container.querySelector(\"#categorySearch\");\n  const clearSearch = container.querySelector(\"#clearSearch\");\n\n  if (searchInput) {\n    searchInput.addEventListener(\"input\", handleSearch);\n    searchInput.addEventListener(\"keyup\", (e) => {\n      clearSearch.style.display = e.target.value ? \"block\" : \"none\";\n    });\n  }\n\n  if (clearSearch) {\n    clearSearch.addEventListener(\"click\", () => {\n      searchInput.value = \"\";\n      handleSearch({ target: searchInput });\n      clearSearch.style.display = \"none\";\n    });\n  }\n\n  // Filter functionality\n  const filterSelect = container.querySelector(\"#categoryFilter\");\n  if (filterSelect) {\n    filterSelect.addEventListener(\"change\", handleFilter);\n  }\n\n  // Add new category\n  const addNewBtn = container.querySelector(\"#addNewCategory\");\n  const createFirstBtn = container.querySelector(\"#createFirstCategory\");\n\n  if (addNewBtn) {\n    addNewBtn.addEventListener(\"click\", () => showAddCategoryModal());\n  }\n\n  if (createFirstBtn) {\n    createFirstBtn.addEventListener(\"click\", () => showAddCategoryModal());\n  }\n\n  // Category actions\n  container.addEventListener(\"click\", (e) => {\n    const actionBtn = e.target.closest(\".action-btn\");\n    if (actionBtn) {\n      const action = actionBtn.dataset.action;\n      const categoryName = actionBtn.dataset.category;\n\n      switch (action) {\n        case \"edit\":\n          showEditCategoryModal(categoryName);\n          break;\n        case \"subcategories\":\n          showSubcategoriesModal(categoryName);\n          break;\n        case \"delete\":\n          handleDeleteCategory(categoryName);\n          break;\n      }\n    }\n  });\n\n  // Bulk operations\n  const bulkBtn = container.querySelector(\"#bulkOperations\");\n  if (bulkBtn) {\n    bulkBtn.addEventListener(\"click\", toggleBulkOperations);\n  }\n\n  // Import/Export\n  const importExportBtn = container.querySelector(\"#importExport\");\n  if (importExportBtn) {\n    importExportBtn.addEventListener(\"click\", showImportExportModal);\n  }\n\n  // Reset categories\n  const resetBtn = container.querySelector(\"#resetCategories\");\n  if (resetBtn) {\n    resetBtn.addEventListener(\"click\", handleResetCategories);\n  }\n\n  // Close modal\n  const closeBtn = container.querySelector(\"#closeModal\");\n  if (closeBtn) {\n    closeBtn.addEventListener(\"click\", () => modal.close());\n  }\n\n  // Checkbox selection\n  container.addEventListener(\"change\", (e) => {\n    if (e.target.classList.contains(\"category-select\")) {\n      updateSelectionCount(container);\n    }\n  });\n}\n\n/**\n * ≡ƒöì Handle search functionality\n */\nfunction handleSearch(e) {\n  const searchTerm = e.target.value.toLowerCase().trim();\n  const categoryCards = document.querySelectorAll(\".enhanced-category-card\");\n\n  categoryCards.forEach((card) => {\n    const categoryName = card.dataset.category.toLowerCase();\n    const shouldShow = !searchTerm || categoryName.includes(searchTerm);\n    card.style.display = shouldShow ? \"block\" : \"none\";\n  });\n\n  updateEmptyState();\n}\n\n/**\n * ≡ƒÄ¢∩╕Å Handle filter functionality\n */\nfunction handleFilter(e) {\n  const filterValue = e.target.value;\n  const categoryCards = document.querySelectorAll(\".enhanced-category-card\");\n\n  categoryCards.forEach((card) => {\n    const categoryName = card.dataset.category;\n    const category = AppState.categories[categoryName];\n    const hasSubcategories =\n      typeof category === \"object\" &&\n      category.subcategories &&\n      Object.keys(category.subcategories).length > 0;\n\n    let shouldShow;\n\n    switch (filterValue) {\n      case \"with-subcategories\":\n        shouldShow = hasSubcategories;\n        break;\n      case \"without-subcategories\":\n        shouldShow = !hasSubcategories;\n        break;\n      case \"recently-used\":\n        // This would require tracking usage - placeholder for now\n        shouldShow = true;\n        break;\n      default:\n        shouldShow = true;\n    }\n\n    card.style.display = shouldShow ? \"block\" : \"none\";\n  });\n\n  updateEmptyState();\n}\n\n/**\n * ≡ƒô¥ Show add category modal\n */\nfunction showAddCategoryModal() {\n  const modalContent = document.createElement(\"div\");\n  modalContent.innerHTML = `\n    <div style=\"padding: 1.5rem;\">\n      <div style=\"margin-bottom: 1.5rem;\">\n        <label for=\"newCategoryName\" style=\"display: block; margin-bottom: 0.5rem; font-weight: 500;\">Category Name</label>\n        <input type=\"text\" id=\"newCategoryName\" placeholder=\"e.g., Groceries, Entertainment\"\n               style=\"width: 100%; padding: 0.75rem; border: 1px solid #ddd; border-radius: 8px; font-size: 1rem;\">\n      </div>\n\n      <div style=\"margin-bottom: 1.5rem;\">\n        <label for=\"newCategoryColor\" style=\"display: block; margin-bottom: 0.5rem; font-weight: 500;\">Category Color</label>\n        <div style=\"display: flex; align-items: center; gap: 1rem;\">\n          <input type=\"color\" id=\"newCategoryColor\" value=\"#667eea\"\n                 style=\"width: 60px; height: 40px; border: none; border-radius: 8px; cursor: pointer;\">\n          <span id=\"colorPreview\" style=\"padding: 0.5rem 1rem; background: #667eea; color: white; border-radius: 6px; font-size: 0.9rem;\">Preview</span>\n        </div>\n      </div>\n\n      <div style=\"display: flex; justify-content: flex-end; gap: 0.75rem; margin-top: 2rem;\">\n        <button id=\"cancelAdd\" class=\"btn btn-secondary\">Cancel</button>\n        <button id=\"confirmAdd\" class=\"btn btn-primary\">Add Category</button>\n      </div>\n    </div>\n  `;\n\n  const modal = showModal({\n    title: \"Γ£¿ Add New Category\",\n    content: modalContent,\n    size: \"medium\",\n    closeOnClickOutside: false,\n  });\n\n  // Color preview update\n  const colorInput = modalContent.querySelector(\"#newCategoryColor\");\n  const colorPreview = modalContent.querySelector(\"#colorPreview\");\n\n  colorInput.addEventListener(\"input\", (e) => {\n    colorPreview.style.backgroundColor = e.target.value;\n  });\n\n  // Event handlers\n  modalContent\n    .querySelector(\"#cancelAdd\")\n    .addEventListener(\"click\", () => modal.close());\n  modalContent.querySelector(\"#confirmAdd\").addEventListener(\"click\", () => {\n    const name = modalContent.querySelector(\"#newCategoryName\").value.trim();\n    const color = modalContent.querySelector(\"#newCategoryColor\").value;\n\n    if (!name) {\n      showToast(\"Please enter a category name\", \"error\");\n      return;\n    }\n\n    if (AppState.categories[name]) {\n      showToast(\"Category already exists\", \"error\");\n      return;\n    }\n\n    AppState.categories[name] = color;\n    saveCategories();\n\n    showToast(`Category \"${name}\" added successfully`, \"success\");\n    modal.close();\n\n    // Refresh the main modal\n    refreshCategoriesGrid();\n  });\n}\n\n/**\n * Γ£Å∩╕Å Show edit category modal\n */\nfunction showEditCategoryModal(categoryName) {\n  const category = AppState.categories[categoryName];\n  const color = typeof category === \"object\" ? category.color : category;\n\n  const modalContent = document.createElement(\"div\");\n  modalContent.innerHTML = `\n    <div style=\"padding: 1.5rem;\">\n      <div style=\"margin-bottom: 1.5rem;\">\n        <label for=\"editCategoryName\" style=\"display: block; margin-bottom: 0.5rem; font-weight: 500;\">Category Name</label>\n        <input type=\"text\" id=\"editCategoryName\" value=\"${categoryName}\"\n               style=\"width: 100%; padding: 0.75rem; border: 1px solid #ddd; border-radius: 8px; font-size: 1rem;\">\n      </div>\n\n      <div style=\"margin-bottom: 1.5rem;\">\n        <label for=\"editCategoryColor\" style=\"display: block; margin-bottom: 0.5rem; font-weight: 500;\">Category Color</label>\n        <div style=\"display: flex; align-items: center; gap: 1rem;\">\n          <input type=\"color\" id=\"editCategoryColor\" value=\"${color}\"\n                 style=\"width: 60px; height: 40px; border: none; border-radius: 8px; cursor: pointer;\">\n          <span id=\"editColorPreview\" style=\"padding: 0.5rem 1rem; background: ${color}; color: white; border-radius: 6px; font-size: 0.9rem;\">Preview</span>\n        </div>\n      </div>\n\n      <div style=\"display: flex; justify-content: flex-end; gap: 0.75rem; margin-top: 2rem;\">\n        <button id=\"cancelEdit\" class=\"btn btn-secondary\">Cancel</button>\n        <button id=\"confirmEdit\" class=\"btn btn-primary\">Save Changes</button>\n      </div>\n    </div>\n  `;\n\n  const modal = showModal({\n    title: `Γ£Å∩╕Å Edit Category: ${categoryName}`,\n    content: modalContent,\n    size: \"medium\",\n    closeOnClickOutside: false,\n  });\n\n  // Color preview update\n  const colorInput = modalContent.querySelector(\"#editCategoryColor\");\n  const colorPreview = modalContent.querySelector(\"#editColorPreview\");\n\n  colorInput.addEventListener(\"input\", (e) => {\n    colorPreview.style.backgroundColor = e.target.value;\n  });\n\n  // Event handlers\n  modalContent\n    .querySelector(\"#cancelEdit\")\n    .addEventListener(\"click\", () => modal.close());\n  modalContent.querySelector(\"#confirmEdit\").addEventListener(\"click\", () => {\n    const newName = modalContent\n      .querySelector(\"#editCategoryName\")\n      .value.trim();\n    const newColor = modalContent.querySelector(\"#editCategoryColor\").value;\n\n    if (!newName) {\n      showToast(\"Please enter a category name\", \"error\");\n      return;\n    }\n\n    if (newName !== categoryName && AppState.categories[newName]) {\n      showToast(\"Category name already exists\", \"error\");\n      return;\n    }\n\n    // Update category\n    if (newName !== categoryName) {\n      const categoryData = AppState.categories[categoryName];\n      delete AppState.categories[categoryName];\n      AppState.categories[newName] =\n        typeof categoryData === \"object\"\n          ? { ...categoryData, color: newColor }\n          : newColor;\n    } else if (typeof AppState.categories[categoryName] === \"object\") {\n      AppState.categories[categoryName].color = newColor;\n    } else {\n      AppState.categories[categoryName] = newColor;\n    }\n\n    saveCategories();\n    showToast(`Category updated successfully`, \"success\");\n    modal.close();\n\n    // Refresh the main modal\n    refreshCategoriesGrid();\n  });\n}\n\n/**\n * ≡ƒôü Show subcategories modal\n */\nfunction showSubcategoriesModal(categoryName) {\n  const category = AppState.categories[categoryName];\n  const subcategories =\n    typeof category === \"object\" && category.subcategories\n      ? category.subcategories\n      : {};\n\n  const modalContent = document.createElement(\"div\");\n  modalContent.innerHTML = `\n    <div style=\"padding: 1.5rem;\">\n      <div style=\"margin-bottom: 2rem;\">\n        <h4 style=\"margin: 0 0 1rem 0;\">Add New Subcategory</h4>\n        <div style=\"display: flex; gap: 1rem; align-items: end;\">\n          <div style=\"flex: 1;\">\n            <label for=\"newSubcategoryName\" style=\"display: block; margin-bottom: 0.5rem; font-weight: 500;\">Subcategory Name</label>\n            <input type=\"text\" id=\"newSubcategoryName\" placeholder=\"e.g., Organic Food, Restaurants\"\n                   style=\"width: 100%; padding: 0.75rem; border: 1px solid #ddd; border-radius: 8px;\">\n          </div>\n          <div>\n            <label for=\"newSubcategoryColor\" style=\"display: block; margin-bottom: 0.5rem; font-weight: 500;\">Color</label>\n            <input type=\"color\" id=\"newSubcategoryColor\" value=\"#667eea\"\n                   style=\"width: 60px; height: 45px; border: none; border-radius: 8px; cursor: pointer;\">\n          </div>\n          <button id=\"addSubcategory\" class=\"btn btn-primary\">Add</button>\n        </div>\n      </div>\n\n      <div>\n        <h4 style=\"margin: 0 0 1rem 0;\">Existing Subcategories</h4>\n        <div id=\"subcategoriesList\" style=\"min-height: 200px;\">\n          ${\n            Object.keys(subcategories).length === 0\n              ? '<p style=\"text-align: center; color: #666; padding: 2rem;\">No subcategories yet. Add one above.</p>'\n              : Object.entries(subcategories)\n                  .map(\n                    ([name, color]) => `\n              <div class=\"subcategory-item\" style=\"display: flex; align-items: center; justify-content: space-between; padding: 1rem; margin-bottom: 0.5rem; background: #f8f9fa; border-radius: 8px;\">\n                <div style=\"display: flex; align-items: center; gap: 1rem;\">\n                  <div style=\"width: 24px; height: 24px; background: ${color}; border-radius: 4px;\"></div>\n                  <span style=\"font-weight: 500;\">${name}</span>\n                </div>\n                <div style=\"display: flex; gap: 0.5rem;\">\n                  <input type=\"color\" value=\"${color}\" data-subcategory=\"${name}\" class=\"subcategory-color-picker\"\n                         style=\"width: 32px; height: 32px; border: none; border-radius: 4px; cursor: pointer;\">\n                  <button class=\"btn btn-ghost delete-subcategory\" data-subcategory=\"${name}\" style=\"padding: 0.5rem;\">≡ƒùæ∩╕Å</button>\n                </div>\n              </div>\n            `\n                  )\n                  .join(\"\")\n          }\n        </div>\n      </div>\n\n      <div style=\"display: flex; justify-content: flex-end; gap: 0.75rem; margin-top: 2rem;\">\n        <button id=\"closeSubcategories\" class=\"btn btn-secondary\">Close</button>\n      </div>\n    </div>\n  `;\n\n  const modal = showModal({\n    title: `≡ƒôü Manage Subcategories: ${categoryName}`,\n    content: modalContent,\n    size: \"large\",\n    closeOnClickOutside: false,\n  });\n\n  // Add subcategory functionality\n  modalContent\n    .querySelector(\"#addSubcategory\")\n    .addEventListener(\"click\", () => {\n      const nameInput = modalContent.querySelector(\"#newSubcategoryName\");\n      const colorInput = modalContent.querySelector(\"#newSubcategoryColor\");\n      const name = nameInput.value.trim();\n      const color = colorInput.value;\n\n      if (!name) {\n        showToast(\"Please enter a subcategory name\", \"error\");\n        return;\n      }\n\n      // Ensure category structure exists\n      if (typeof AppState.categories[categoryName] === \"string\") {\n        const originalColor = AppState.categories[categoryName];\n        AppState.categories[categoryName] = {\n          color: originalColor,\n          subcategories: {},\n        };\n      } else if (!AppState.categories[categoryName].subcategories) {\n        AppState.categories[categoryName].subcategories = {};\n      }\n\n      if (AppState.categories[categoryName].subcategories[name]) {\n        showToast(\"Subcategory already exists\", \"error\");\n        return;\n      }\n\n      AppState.categories[categoryName].subcategories[name] = color;\n      saveCategories();\n\n      showToast(`Subcategory \"${name}\" added successfully`, \"success\");\n      nameInput.value = \"\";\n\n      // Refresh the subcategories modal\n      modal.close();\n      setTimeout(() => showSubcategoriesModal(categoryName), 100);\n    });\n\n  // Color picker changes\n  modalContent.addEventListener(\"change\", (e) => {\n    if (e.target.classList.contains(\"subcategory-color-picker\")) {\n      const subcategoryName = e.target.dataset.subcategory;\n      const newColor = e.target.value;\n\n      AppState.categories[categoryName].subcategories[subcategoryName] =\n        newColor;\n      saveCategories();\n\n      // Update the visual color\n      const colorDiv = e.target\n        .closest(\".subcategory-item\")\n        .querySelector('div[style*=\"background\"]');\n      if (colorDiv) {\n        colorDiv.style.background = newColor;\n      }\n\n      showToast(`Color updated for \"${subcategoryName}\"`, \"success\");\n    }\n  });\n\n  // Delete subcategory\n  modalContent.addEventListener(\"click\", (e) => {\n    if (e.target.classList.contains(\"delete-subcategory\")) {\n      const subcategoryName = e.target.dataset.subcategory;\n\n      if (\n        confirm(\n          `Are you sure you want to delete the subcategory \"${subcategoryName}\"?`\n        )\n      ) {\n        delete AppState.categories[categoryName].subcategories[subcategoryName];\n        saveCategories();\n\n        showToast(`Subcategory \"${subcategoryName}\" deleted`, \"success\");\n\n        // Refresh the subcategories modal\n        modal.close();\n        setTimeout(() => showSubcategoriesModal(categoryName), 100);\n      }\n    }\n  });\n\n  // Close modal\n  modalContent\n    .querySelector(\"#closeSubcategories\")\n    .addEventListener(\"click\", () => modal.close());\n}\n\n/**\n * ≡ƒùæ∩╕Å Handle delete category\n */\nfunction handleDeleteCategory(categoryName) {\n  if (\n    confirm(\n      `Are you sure you want to delete the category \"${categoryName}\"? This action cannot be undone.`\n    )\n  ) {\n    delete AppState.categories[categoryName];\n    saveCategories();\n\n    showToast(`Category \"${categoryName}\" deleted successfully`, \"success\");\n    refreshCategoriesGrid();\n  }\n}\n\n/**\n * ≡ƒôª Toggle bulk operations\n */\nfunction toggleBulkOperations() {\n  const sidebar = document.querySelector(\"#contentSidebar\");\n  const isVisible = sidebar.style.display !== \"none\";\n\n  sidebar.style.display = isVisible ? \"none\" : \"block\";\n\n  if (!isVisible) {\n    sidebar.querySelector(\".sidebar-content\").innerHTML = `\n      <h4>Bulk Operations</h4>\n      <div style=\"margin: 1.5rem 0;\">\n        <button class=\"btn btn-secondary\" id=\"selectAll\" style=\"width: 100%; margin-bottom: 0.5rem;\">Select All</button>\n        <button class=\"btn btn-secondary\" id=\"selectNone\" style=\"width: 100%; margin-bottom: 0.5rem;\">Select None</button>\n      </div>\n      <div style=\"margin: 1.5rem 0;\">\n        <button class=\"btn btn-ghost\" id=\"bulkDelete\" style=\"width: 100%; color: #dc3545;\" disabled>Delete Selected</button>\n      </div>\n    `;\n\n    // Attach bulk operation handlers\n    sidebar.querySelector(\"#selectAll\").addEventListener(\"click\", () => {\n      document\n        .querySelectorAll(\".category-select\")\n        .forEach((cb) => (cb.checked = true));\n      updateSelectionCount();\n    });\n\n    sidebar.querySelector(\"#selectNone\").addEventListener(\"click\", () => {\n      document\n        .querySelectorAll(\".category-select\")\n        .forEach((cb) => (cb.checked = false));\n      updateSelectionCount();\n    });\n\n    sidebar\n      .querySelector(\"#bulkDelete\")\n      .addEventListener(\"click\", handleBulkDelete);\n  }\n}\n\n/**\n * ≡ƒùæ∩╕Å Handle bulk delete\n */\nfunction handleBulkDelete() {\n  const selectedCategories = Array.from(\n    document.querySelectorAll(\".category-select:checked\")\n  ).map((cb) => cb.closest(\".enhanced-category-card\").dataset.category);\n\n  if (selectedCategories.length === 0) return;\n\n  if (\n    confirm(\n      `Are you sure you want to delete ${selectedCategories.length} categories? This action cannot be undone.`\n    )\n  ) {\n    selectedCategories.forEach((categoryName) => {\n      delete AppState.categories[categoryName];\n    });\n\n    saveCategories();\n    showToast(\n      `${selectedCategories.length} categories deleted successfully`,\n      \"success\"\n    );\n    refreshCategoriesGrid();\n\n    // Hide sidebar\n    document.querySelector(\"#contentSidebar\").style.display = \"none\";\n  }\n}\n\n/**\n * ΓÜí Show import/export modal\n */\nfunction showImportExportModal() {\n  const modalContent = document.createElement(\"div\");\n  modalContent.innerHTML = `\n    <div style=\"padding: 1.5rem;\">\n      <div style=\"margin-bottom: 2rem;\">\n        <h4>Export Categories</h4>\n        <p style=\"color: #666; margin-bottom: 1rem;\">Download your categories as a JSON file for backup.</p>\n        <button id=\"exportCategories\" class=\"btn btn-primary\">≡ƒôÑ Export Categories</button>\n      </div>\n\n      <div style=\"margin-bottom: 2rem;\">\n        <h4>Import Categories</h4>\n        <p style=\"color: #666; margin-bottom: 1rem;\">Upload a JSON file to import categories.</p>\n        <input type=\"file\" id=\"importFile\" accept=\".json\" style=\"margin-bottom: 1rem;\">\n        <button id=\"importCategories\" class=\"btn btn-secondary\" disabled>≡ƒôñ Import Categories</button>\n      </div>\n\n      <div style=\"display: flex; justify-content: flex-end;\">\n        <button id=\"closeImportExport\" class=\"btn btn-ghost\">Close</button>\n      </div>\n    </div>\n  `;\n\n  const modal = showModal({\n    title: \"ΓÜí Import/Export Categories\",\n    content: modalContent,\n    size: \"medium\",\n  });\n\n  // Export functionality\n  modalContent\n    .querySelector(\"#exportCategories\")\n    .addEventListener(\"click\", () => {\n      const dataStr = JSON.stringify(AppState.categories, null, 2);\n      const dataBlob = new Blob([dataStr], { type: \"application/json\" });\n      const url = URL.createObjectURL(dataBlob);\n\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.download = `categories-${\n        new Date().toISOString().split(\"T\")[0]\n      }.json`;\n      link.click();\n\n      URL.revokeObjectURL(url);\n      showToast(\"Categories exported successfully\", \"success\");\n    });\n\n  // Import functionality\n  const fileInput = modalContent.querySelector(\"#importFile\");\n  const importBtn = modalContent.querySelector(\"#importCategories\");\n\n  fileInput.addEventListener(\"change\", (e) => {\n    importBtn.disabled = !e.target.files.length;\n  });\n\n  importBtn.addEventListener(\"click\", () => {\n    const file = fileInput.files[0];\n    if (!file) return;\n\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      try {\n        const importedCategories = JSON.parse(e.target.result);\n\n        if (confirm(\"This will replace all existing categories. Continue?\")) {\n          AppState.categories = importedCategories;\n          saveCategories();\n\n          showToast(\"Categories imported successfully\", \"success\");\n          modal.close();\n          refreshCategoriesGrid();\n        }\n      } catch (error) {\n        console.error(\"Import error:\", error);\n        showToast(\"Invalid JSON file\", \"error\");\n      }\n    };\n    reader.readAsText(file);\n  });\n\n  // Close modal\n  modalContent\n    .querySelector(\"#closeImportExport\")\n    .addEventListener(\"click\", () => modal.close());\n}\n\n/**\n * ≡ƒöä Handle reset categories\n */\nfunction handleResetCategories() {\n  if (\n    confirm(\n      \"Are you sure you want to reset all categories to defaults? This will remove all your custom categories and cannot be undone.\"\n    )\n  ) {\n    // Import default categories function\n    import(\"../constants/categories.js\").then((module) => {\n      if (module.resetToDefaultCategories) {\n        module.resetToDefaultCategories();\n        showToast(\"Categories reset to defaults successfully\", \"success\");\n        refreshCategoriesGrid();\n      }\n    });\n  }\n}\n\n/**\n * ≡ƒöä Refresh categories grid\n */\nfunction refreshCategoriesGrid() {\n  const container = document.querySelector(\".enhanced-category-manager\");\n  if (!container) return;\n\n  const categoriesGrid = container.querySelector(\"#categoriesGrid\");\n\n  if (categoriesGrid) {\n    categoriesGrid.innerHTML = buildEnhancedCategoriesGrid(\n      AppState.categories || {}\n    );\n  }\n\n  updateEmptyState();\n  updateHeaderStats(container);\n}\n\n/**\n * ≡ƒôè Update header statistics\n */\nfunction updateHeaderStats(container) {\n  const categoryCount = Object.keys(AppState.categories || {}).length;\n  const subcategoryCount = getTotalSubcategories();\n\n  const statNumbers = container.querySelectorAll(\".stat-number\");\n  if (statNumbers.length >= 2) {\n    statNumbers[0].textContent = categoryCount;\n    statNumbers[1].textContent = subcategoryCount;\n  }\n}\n\n/**\n * ≡ƒôè Update selection count\n */\nfunction updateSelectionCount(container = document) {\n  const selectedCount = container.querySelectorAll(\n    \".category-select:checked\"\n  ).length;\n  const countDisplay = container.querySelector(\"#selectedCount\");\n  const bulkDeleteBtn = container.querySelector(\"#bulkDelete\");\n\n  if (countDisplay) {\n    countDisplay.textContent = selectedCount;\n  }\n\n  if (bulkDeleteBtn) {\n    bulkDeleteBtn.disabled = selectedCount === 0;\n  }\n}\n\n/**\n * ≡ƒô¡ Update empty state visibility\n */\nfunction updateEmptyState() {\n  const categoriesGrid = document.querySelector(\"#categoriesGrid\");\n  const emptyState = document.querySelector(\"#emptyState\");\n\n  if (!categoriesGrid || !emptyState) {\n    console.log(\"Could not find categoriesGrid or emptyState elements\");\n    return;\n  }\n\n  const allCards = categoriesGrid.querySelectorAll(\".enhanced-category-card\");\n  const visibleCards = categoriesGrid.querySelectorAll(\n    '.enhanced-category-card:not([style*=\"display: none\"])'\n  );\n  const categoryCount = Object.keys(AppState.categories || {}).length;\n\n  console.log(\n    `Empty state check: ${allCards.length} total cards, ${visibleCards.length} visible cards, ${categoryCount} categories in AppState`\n  );\n\n  // Use AppState.categories as the source of truth, not DOM elements\n  const isEmpty = categoryCount === 0;\n\n  emptyState.style.display = isEmpty ? \"flex\" : \"none\";\n  categoriesGrid.style.display = isEmpty ? \"none\" : \"grid\";\n\n  console.log(\n    `Empty state: ${isEmpty ? \"showing\" : \"hiding\"} empty state, ${\n      isEmpty ? \"hiding\" : \"showing\"\n    } categories grid`\n  );\n}\n\n/**\n * ≡ƒÄ« Initialize enhanced features\n */\nfunction initializeEnhancedFeatures(container) {\n  // Initialize drag and drop for category reordering\n  initializeDragAndDrop(container);\n\n  // Initialize keyboard shortcuts\n  initializeKeyboardShortcuts(container);\n\n  // Initialize tooltips\n  initializeTooltips(container);\n}\n\n/**\n * ≡ƒû▒∩╕Å Initialize drag and drop\n */\nfunction initializeDragAndDrop(container) {\n  let draggedElement = null;\n\n  container.addEventListener(\"dragstart\", (e) => {\n    if (e.target.closest(\".enhanced-category-card\")) {\n      draggedElement = e.target.closest(\".enhanced-category-card\");\n      draggedElement.classList.add(\"dragging\");\n      e.dataTransfer.effectAllowed = \"move\";\n    }\n  });\n\n  container.addEventListener(\"dragover\", (e) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = \"move\";\n  });\n\n  container.addEventListener(\"drop\", (e) => {\n    e.preventDefault();\n\n    const dropTarget = e.target.closest(\".enhanced-category-card\");\n    if (dropTarget && draggedElement && dropTarget !== draggedElement) {\n      const rect = dropTarget.getBoundingClientRect();\n      const midpoint = rect.top + rect.height / 2;\n      const insertAfter = e.clientY > midpoint;\n\n      if (insertAfter) {\n        dropTarget.insertAdjacentElement(\"afterend\", draggedElement);\n      } else {\n        dropTarget.insertAdjacentElement(\"beforebegin\", draggedElement);\n      }\n\n      showToast(\"Category order updated\", \"success\");\n    }\n  });\n\n  container.addEventListener(\"dragend\", () => {\n    if (draggedElement) {\n      draggedElement.classList.remove(\"dragging\");\n      draggedElement = null;\n    }\n  });\n\n  // Make category cards draggable\n  container.querySelectorAll(\".enhanced-category-card\").forEach((card) => {\n    card.draggable = true;\n  });\n}\n\n/**\n * Γî¿∩╕Å Initialize keyboard shortcuts\n */\nfunction initializeKeyboardShortcuts(container) {\n  document.addEventListener(\"keydown\", (e) => {\n    // Only handle shortcuts when the modal is open\n    if (!enhancedCategoryModalInstance) return;\n\n    // Ctrl/Cmd + K: Focus search\n    if ((e.ctrlKey || e.metaKey) && e.key === \"k\") {\n      e.preventDefault();\n      const searchInput = container.querySelector(\"#categorySearch\");\n      if (searchInput) {\n        searchInput.focus();\n      }\n    }\n\n    // Ctrl/Cmd + N: Add new category\n    if ((e.ctrlKey || e.metaKey) && e.key === \"n\") {\n      e.preventDefault();\n      showAddCategoryModal();\n    }\n\n    // Escape: Close any open modals\n    if (e.key === \"Escape\") {\n      enhancedCategoryModalInstance?.close();\n    }\n  });\n}\n\n/**\n * ≡ƒÆí Initialize tooltips\n */\nfunction initializeTooltips(container) {\n  // Simple tooltip implementation\n  container.addEventListener(\"mouseenter\", (e) => {\n    const element = e.target;\n    const title = element.getAttribute(\"title\");\n\n    if (title) {\n      element.setAttribute(\"data-tooltip\", title);\n      element.removeAttribute(\"title\");\n\n      const tooltip = document.createElement(\"div\");\n      tooltip.className = \"tooltip\";\n      tooltip.textContent = title;\n      tooltip.style.cssText = `\n        position: absolute;\n        background: #333;\n        color: white;\n        padding: 0.5rem;\n        border-radius: 4px;\n        font-size: 0.85rem;\n        z-index: 10000;\n        pointer-events: none;\n        white-space: nowrap;\n      `;\n\n      document.body.appendChild(tooltip);\n\n      const updatePosition = (e) => {\n        tooltip.style.left = e.pageX + 10 + \"px\";\n        tooltip.style.top = e.pageY - 30 + \"px\";\n      };\n\n      updatePosition(e);\n      element.addEventListener(\"mousemove\", updatePosition);\n\n      element.addEventListener(\n        \"mouseleave\",\n        () => {\n          tooltip.remove();\n          element.setAttribute(\"title\", element.getAttribute(\"data-tooltip\"));\n          element.removeAttribute(\"data-tooltip\");\n        },\n        { once: true }\n      );\n    }\n  });\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\ui\\exportManager.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\ui\\fileListUI.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":15,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":15,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[343,387],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":19,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":19,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[429,474],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":48,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":48,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1244,1298],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":175,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":175,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5989,6111],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AppState } from \"../core/appState.js\";\nimport { showToast } from \"./uiManager.js\";\n\n/**\n * FIXED: Add singleton pattern to prevent duplicate modals\n */\nlet fileListModalInstance = null;\n\n/**\n * Show merged files modal\n */\nexport function showMergedFilesModal() {\n  // FIXED: Prevent multiple modals\n  if (fileListModalInstance) {\n    console.log(\"File list modal already open\");\n    return fileListModalInstance;\n  }\n\n  console.log(\"Opening merged files modal...\");\n\n  const modalContent = document.createElement(\"div\");\n  modalContent.className = \"merged-files-content\";\n\n  // Build the content\n  modalContent.innerHTML = buildMergedFilesContent();\n\n  // Create the modal using the modal manager\n  import(\"./modalManager.js\").then((module) => {\n    const modal = module.showModal({\n      title: \"≡ƒôü Merged Files\",\n      content: modalContent,\n      size: \"large\",\n      closeOnClickOutside: true,\n    });\n\n    // Store reference and override close method\n    fileListModalInstance = modal;\n    const originalClose = modal.close;\n    modal.close = function () {\n      fileListModalInstance = null;\n      originalClose.call(this);\n    };\n\n    // Attach event listeners\n    attachMergedFilesEventListeners(modalContent, modal);\n  });\n\n  console.log(\"Merged files modal opened successfully\");\n}\n\n/**\n * Build the merged files content HTML\n */\nfunction buildMergedFilesContent() {\n  const mergedFiles = AppState.mergedFiles || [];\n\n  if (mergedFiles.length === 0) {\n    return `\n      <div class=\"empty-state\">\n        <p>No merged files found.</p>\n        <p class=\"info-text\">Upload some transaction files to see them here.</p>\n      </div>\n    `;\n  }\n\n  let html = `\n    <div class=\"merged-files-list\">\n      <h3>Merged Files (${mergedFiles.length})</h3>\n      <div class=\"merged-files-table-container\">\n        <table class=\"merged-files-table\" style=\"width: 100%; border-collapse: collapse;\">\n          <thead>\n            <tr style=\"background: #f5f5f5;\">\n              <th style=\"padding: 10px; text-align: left; border: 1px solid #ddd;\">File Name</th>\n              <th style=\"padding: 10px; text-align: left; border: 1px solid #ddd;\">Transactions</th>\n              <th style=\"padding: 10px; text-align: left; border: 1px solid #ddd;\">Currency</th>\n              <th style=\"padding: 10px; text-align: left; border: 1px solid #ddd;\">Signature</th>\n              <th style=\"padding: 10px; text-align: left; border: 1px solid #ddd;\">Import Date</th>\n              <th style=\"padding: 10px; text-align: left; border: 1px solid #ddd;\">Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n  `;\n\n  mergedFiles.forEach((file, index) => {\n    let transactionCount = 0;\n    if (file.transactions) {\n      transactionCount = file.transactions.length;\n    } else if (file.data) {\n      transactionCount = file.data.length - (file.dataRowIndex || 1);\n    }\n    const currency = file.currency || \"USD\";\n    const signature = file.signature || \"No signature\";\n    const importDate = file.mergedAt\n      ? new Date(file.mergedAt).toLocaleDateString()\n      : \"Unknown\";\n    const fileName = file.fileName || \"Unknown File\";\n\n    html += `\n      <tr>\n        <td style=\"padding: 8px; border: 1px solid #ddd;\">${fileName}</td>\n        <td style=\"padding: 8px; border: 1px solid #ddd; text-align: center;\">${transactionCount}</td>\n        <td style=\"padding: 8px; border: 1px solid #ddd; text-align: center;\">${currency}</td>\n        <td style=\"padding: 8px; border: 1px solid #ddd; font-family: monospace; word-break: break-all; max-width: 150px;\">\n          ${signature.substring(0, 15)}${signature.length > 15 ? \"...\" : \"\"}\n        </td>\n        <td style=\"padding: 8px; border: 1px solid #ddd;\">${importDate}</td>\n        <td style=\"padding: 8px; border: 1px solid #ddd; text-align: center;\">\n          <button class=\"edit-file-btn\" data-index=\"${index}\" title=\"Edit file mapping\" style=\"background: #007bff; color: white; border: none; padding: 4px 8px; border-radius: 3px; cursor: pointer; margin-right: 5px;\">Γ£Å∩╕Å</button>\n          <button class=\"remove-file-btn\" data-index=\"${index}\" title=\"Remove file\" style=\"background: #dc3545; color: white; border: none; padding: 4px 8px; border-radius: 3px; cursor: pointer;\">≡ƒùæ∩╕Å</button>\n        </td>\n      </tr>\n    `;\n  });\n\n  html += `\n          </tbody>\n        </table>\n      </div>\n    </div>\n    <div class=\"modal-footer\">\n      <button class=\"button secondary-btn\" id=\"closeMergedFilesBtn\">Close</button>\n    </div>\n  `;\n\n  return html;\n}\n\n/**\n * Attach event listeners to the merged files content\n */\nfunction attachMergedFilesEventListeners(container, modal) {\n  // Close button\n  const closeBtn = container.querySelector(\"#closeMergedFilesBtn\");\n  if (closeBtn) {\n    closeBtn.addEventListener(\"click\", () => {\n      modal.close();\n    });\n  }\n\n  // Remove file buttons\n  container.querySelectorAll(\".remove-file-btn\").forEach((btn) => {\n    btn.addEventListener(\"click\", (e) => {\n      const index = parseInt(e.target.getAttribute(\"data-index\"));\n      handleRemoveFile(index, container, modal);\n    });\n  });\n\n  // Edit file buttons\n  container.querySelectorAll(\".edit-file-btn\").forEach((btn) => {\n    btn.addEventListener(\"click\", (e) => {\n      const index = parseInt(e.target.getAttribute(\"data-index\"));\n      handleEditFile(index);\n    });\n  });\n}\n\n/**\n * Handle removing a file\n */\nfunction handleRemoveFile(index, container, modal) {\n  const file = AppState.mergedFiles[index];\n  if (!file) return;\n\n  if (confirm(`Are you sure you want to remove \"${file.fileName}\"?`)) {\n    // FIXED: Remove transactions associated with this file first\n    if (AppState.transactions) {\n      const originalTransactionCount = AppState.transactions.length;\n      AppState.transactions = AppState.transactions.filter(\n        (tx) => tx.fileName !== file.fileName\n      );\n      const removedTransactionCount =\n        originalTransactionCount - AppState.transactions.length;\n\n      if (removedTransactionCount > 0) {\n        console.log(\n          `Removed ${removedTransactionCount} transactions associated with file: ${file.fileName}`\n        );\n        // Save updated transactions\n        localStorage.setItem(\n          \"transactions\",\n          JSON.stringify(AppState.transactions)\n        );\n      }\n    }\n\n    // Remove from merged files\n    AppState.mergedFiles.splice(index, 1);\n\n    // Save to localStorage\n    try {\n      localStorage.setItem(\"mergedFiles\", JSON.stringify(AppState.mergedFiles));\n      showToast(\n        `File \"${file.fileName}\" and its transactions removed successfully`,\n        \"success\"\n      );\n\n      // Refresh the modal content\n      container.innerHTML = buildMergedFilesContent();\n      attachMergedFilesEventListeners(container, modal);\n\n      // Update transactions UI\n      import(\"./transactionManager.js\").then((module) => {\n        if (module.renderTransactions) {\n          module.renderTransactions(AppState.transactions, true);\n        }\n        if (module.updateTransactions) {\n          module.updateTransactions();\n        }\n      });\n    } catch (error) {\n      console.error(\"Error removing file:\", error);\n      showToast(\"Error removing file\", \"error\");\n    }\n  }\n}\n\n/**\n * Handle editing a file\n */\nfunction handleEditFile(index) {\n  const file = AppState.mergedFiles[index];\n  if (!file) return;\n\n  showToast(\"File editing feature coming soon\", \"info\");\n}\n\n/**\n * Render merged files (legacy function for compatibility)\n */\nexport function renderMergedFiles() {\n  // This function is kept for compatibility but now just shows the modal\n  showMergedFilesModal();\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\ui\\fileUpload.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":33,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":33,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[947,1001],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":37,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":37,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1074,1121],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":48,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":48,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1293,1364],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":60,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":60,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1641,1708],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":81,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":81,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2293,2355],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":85,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":85,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2453,2509],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":88,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":88,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2579,2630],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":95,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":95,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2792,2911],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":113,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":113,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3368,3418],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":137,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":137,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4232,4302],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":142,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":142,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4431,4483],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":178,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":178,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5265,5339],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":183,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":183,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5417,5478],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":187,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":187,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5551,5613],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":197,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":197,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5832,5893],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":215,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":215,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6321,6380],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":220,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":220,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6498,6593],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":261,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":261,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7565,7626],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":271,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":271,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7914,7968],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":278,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":278,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8272,8339],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":292,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":292,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8634,8693],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":297,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":297,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8817,8912],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":305,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":305,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9098,9202],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":368,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":368,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10856,10932],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":377,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":377,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11168,11262],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":388,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":388,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11447,11520],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":399,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":399,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11770,11871],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":409,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":409,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12054,12142],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":423,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":423,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12448,12551],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":434,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":434,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12749,12798],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":435,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":435,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12801,12857],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":436,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":436,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12860,12921],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":472,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":472,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13942,14041],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":488,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":488,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14336,14409],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":497,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":497,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14632,14693],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":512,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":512,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15289,15387],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":523,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":523,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15626,15746],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":526,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":526,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15753,15984],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":538,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":538,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16019,16126],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":545,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":545,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16199,16268],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":555,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":555,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16488,16600],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":575,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":575,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17005,17068],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":586,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":586,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17441,17562],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":614,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":614,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18114,18171],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":708,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":708,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[21360,21465],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'showMappingConfirmationDialog' is defined but never used.","line":776,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":776,"endColumn":39},{"ruleId":"no-unused-vars","severity":1,"message":"'signature' is defined but never used. Allowed unused args must match /^_/u.","line":776,"column":69,"nodeType":"Identifier","messageId":"unusedVar","endLine":776,"endColumn":78},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":840,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":840,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25706,25764],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":849,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":849,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25975,26026],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":864,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":864,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[26424,26476],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":888,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":888,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[27036,27107],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":953,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":953,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[28692,28789],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":964,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":964,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[28971,29067],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1024,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1024,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[30742,30800],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1043,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1043,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[31261,31335],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1047,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1047,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[31481,31531],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1052,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1052,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[31628,31687],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1054,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1054,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[31713,31772],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1063,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1063,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[32037,32083],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1072,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1072,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[32369,32414],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1092,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1092,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[33094,33204],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1100,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1100,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[33353,33460],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1123,"column":19,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1123,"endColumn":30,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[34242,34375],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1193,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1193,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[36717,36781],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1231,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1231,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[38004,38071],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'dataRowIndex' is defined but never used. Allowed unused args must match /^_/u.","line":1336,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":1336,"endColumn":15},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1406,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1406,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[42770,42874],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1512,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1512,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[45628,45756],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1533,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1533,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[46143,46291],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1574,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1574,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[47276,47393],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1590,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1590,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[47625,47751],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1639,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1639,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[48929,49164],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1661,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1661,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[49673,49736],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1667,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1667,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[49903,50012],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1694,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1694,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[50728,50847],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1718,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1718,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[51645,51749],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1724,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1724,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[51765,51871],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1751,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1751,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[52663,52783],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used. Allowed unused args must match /^_/u.","line":1798,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":1798,"endColumn":25},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1811,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1811,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[54271,54311],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1818,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1818,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[54397,54451],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1826,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1826,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[54610,54680],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1921,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1921,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[57509,57619],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":83,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AppState, resetFileState } from \"../core/appState.js\";\nimport { showToast } from \"./uiManager.js\";\nimport { showModal } from \"./modalManager.js\";\nimport { autoDetectFieldType } from \"../constants/fieldMappings.js\";\nimport { isExcelDate, formatExcelDateForPreview } from \"../utils/dateUtils.js\";\n\n// Global flag to prevent multiple file inputs\nlet fileInputInProgress = false;\n\n// FIXED: Add missing fileUploadCache object\nconst fileUploadCache = {\n  activeInputs: new Map(),\n  modalElements: new Map(),\n  eventListeners: new Map(),\n};\n\n/**\n * Cleanup any existing file input elements to prevent duplicates\n */\nfunction cleanupExistingFileInputs() {\n  const existingInputs = document.querySelectorAll('input[type=\"file\"]');\n  existingInputs.forEach((input) => {\n    if (input.parentNode) {\n      input.parentNode.removeChild(input);\n    }\n  });\n}\n\n/**\n * Initialize file upload functionality\n */\nexport function initializeFileUpload() {\n  console.log(\"Initializing file upload functionality\");\n\n  // Prevent multiple initializations\n  if (fileInputInProgress) {\n    console.log(\"File upload already in progress\");\n    return;\n  }\n\n  try {\n    // Clean up any existing file inputs\n    cleanupExistingFileInputs();\n\n    // NEW: Initialize drag-and-drop\n    initializeDragAndDrop();\n\n    console.log(\"File upload initialized successfully with drag-and-drop\");\n  } catch (error) {\n    console.error(\"Error initializing file upload:\", error);\n  }\n}\n\n/**\n * Creates a new file input element\n */\nexport function createNewFileInput() {\n  // FIXED: Only check if input is in progress when actually processing\n  if (fileInputInProgress) {\n    console.log(\"CRITICAL: File input already in progress, returning\");\n    return null;\n  }\n\n  // FIXED: Set flag immediately to prevent race conditions\n  fileInputInProgress = true;\n\n  try {\n    // Clean up existing inputs first\n    cleanupExistingFileInputs();\n\n    // FIXED: DON'T clone the upload button here - it's already handled in sidebarManager\n    // This was causing the double file browser issue\n\n    // Create new file input\n    const fileInput = document.createElement(\"input\");\n    fileInput.type = \"file\";\n    fileInput.accept = \".csv,.xlsx,.xls,.xml\";\n    fileInput.style.display = \"none\";\n\n    const inputId = Date.now().toString();\n    console.log(\"CRITICAL: Created file input with ID:\", inputId);\n\n    // Add event listener for file selection\n    const handleFileSelection = (event) => {\n      console.log(\"CRITICAL: File selection event triggered\");\n      const file = event.target.files[0];\n      if (!file) {\n        console.log(\"CRITICAL: No file selected in event\");\n        // FIXED: Reset progress flag if no file selected\n        fileInputInProgress = false;\n        cleanupFileInput(inputId);\n        return;\n      }\n\n      console.log(\n        `CRITICAL: File selected and processing: ${file.name} (${file.type}, ${file.size} bytes)`\n      );\n\n      try {\n        // Process the file\n        handleFileUploadProcess(file);\n        // FIXED: Clean up input after processing starts\n        setTimeout(() => cleanupFileInput(inputId), 500);\n      } catch (error) {\n        console.error(\"CRITICAL ERROR: Error processing file:\", error);\n        handleFileUploadError(error);\n        fileInputInProgress = false;\n        cleanupFileInput(inputId);\n      }\n    };\n\n    const handleCancel = () => {\n      console.log(\"CRITICAL: File selection cancelled\");\n      fileInputInProgress = false;\n      cleanupFileInput(inputId);\n    };\n\n    fileInput.addEventListener(\"change\", handleFileSelection);\n    fileInput.addEventListener(\"cancel\", handleCancel);\n\n    // FIXED: Remove problematic focus listener that was causing double prompts\n    // The window focus event was unnecessarily interfering with file selection\n\n    // FIXED: Track listeners and element for cleanup\n    const inputData = {\n      element: fileInput,\n      listeners: [\n        { element: fileInput, event: \"change\", handler: handleFileSelection },\n        { element: fileInput, event: \"cancel\", handler: handleCancel },\n        // Note: focus listener added separately with delay\n      ],\n    };\n\n    fileUploadCache.activeInputs.set(inputId, inputData);\n\n    document.body.appendChild(fileInput);\n    console.log(\"CRITICAL: File input appended to DOM, triggering click\");\n\n    // FIXED: Use requestAnimationFrame instead of setTimeout\n    requestAnimationFrame(() => {\n      fileInput.click();\n      console.log(\"CRITICAL: File input click triggered\");\n    });\n\n    return fileInput;\n  } catch (error) {\n    console.error(\"CRITICAL ERROR: Error creating file input:\", error);\n    fileInputInProgress = false;\n    return null;\n  }\n}\n\n// FIXED: Improved cleanup function\nfunction cleanupFileInput(inputId) {\n  const inputData = fileUploadCache.activeInputs.get(inputId);\n  if (!inputData) return;\n\n  const { element, listeners } = inputData;\n\n  // Remove event listeners\n  listeners.forEach(({ element: el, event, handler }) => {\n    el.removeEventListener(event, handler);\n  });\n\n  // Remove from DOM\n  if (element?.parentNode) {\n    element.parentNode.removeChild(element);\n  }\n\n  // Remove from cache\n  fileUploadCache.activeInputs.delete(inputId);\n}\n\n/**\n * Handle file upload process\n */\nfunction handleFileUploadProcess(file) {\n  console.log(`CRITICAL: handleFileUploadProcess called for: ${file.name}`);\n\n  // Store file name in AppState\n  AppState.currentFileName = file.name;\n\n  console.log(`CRITICAL: Processing upload for: ${file.name}`);\n\n  // Check for duplicate file\n  if (checkForDuplicateFile(file)) {\n    console.log(\"CRITICAL: Duplicate file detected, handling...\");\n    handleDuplicateFile(file);\n    return;\n  }\n\n  // Show loading state\n  showToast(\"Processing file...\", \"info\");\n\n  // Process the file based on its type\n  const fileExt = file.name.split(\".\").pop().toLowerCase();\n  console.log(`CRITICAL: File extension detected: ${fileExt}`);\n\n  if (fileExt === \"csv\") {\n    handleCSVFile(file);\n  } else if (fileExt === \"xlsx\" || fileExt === \"xls\") {\n    handleExcelFile(file);\n  } else if (fileExt === \"xml\") {\n    handleXMLFile(file);\n  } else {\n    console.error(`CRITICAL ERROR: Unsupported file type: ${fileExt}`);\n    handleFileUploadError(new Error(`Unsupported file type: ${fileExt}`));\n  }\n}\n\n/**\n * Handle CSV file upload\n */\nfunction handleCSVFile(file) {\n  console.log(`CRITICAL: Processing CSV file: ${file.name}`);\n  const reader = new FileReader();\n  reader.onload = (e) => {\n    try {\n      const csvText = e.target.result;\n      console.log(\n        `CRITICAL: CSV file read successfully, length: ${csvText.length}`\n      );\n      processCsvFileContent(file, csvText);\n    } catch (error) {\n      console.error(\"CRITICAL ERROR: CSV processing failed:\", error);\n      handleFileUploadError(error);\n    }\n  };\n  reader.readAsText(file);\n}\n\n// Helper function to process CSV line\nfunction processCsvLine(line) {\n  return line.split(\",\").map((field) => field.replace(/^\"(.*)\"$/, \"$1\").trim());\n}\n\n// Helper function to process CSV file content\nfunction processCsvFileContent(file, text) {\n  const lines = text.split(\"\\n\").filter((line) => line.trim());\n  const data = lines.map(processCsvLine);\n  processUploadedData(file, data);\n}\n\n// Helper function to read file content\nfunction readFileContent(file) {\n  const reader = new FileReader();\n  reader.onload = (e) => {\n    try {\n      processCsvFileContent(file, e.target.result);\n    } catch (error) {\n      handleFileUploadError(error);\n    }\n  };\n  reader.readAsText(file);\n}\n\n/**\n * Handle Excel file upload\n */\nfunction handleExcelFile(file) {\n  console.log(`CRITICAL: Processing Excel file: ${file.name}`);\n  const reader = new FileReader();\n  reader.onload = (e) => {\n    try {\n      // This would require XLSX library\n      if (typeof XLSX === \"undefined\") {\n        console.error(\"CRITICAL ERROR: XLSX library not loaded\");\n        throw new Error(\"XLSX library not loaded\");\n      }\n\n      console.log(`CRITICAL: Excel file read successfully`);\n      const data = new Uint8Array(e.target.result);\n      const workbook = XLSX.read(data, { type: \"array\" });\n      const firstSheetName = workbook.SheetNames[0];\n      const worksheet = workbook.Sheets[firstSheetName];\n      const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n\n      console.log(`CRITICAL: Excel parsed into ${jsonData.length} rows`);\n      processUploadedData(file, jsonData);\n    } catch (error) {\n      console.error(\"CRITICAL ERROR: Excel processing failed:\", error);\n      handleFileUploadError(error);\n    }\n  };\n  reader.readAsArrayBuffer(file);\n}\n\n/**\n * Handle XML file upload\n */\nasync function handleXMLFile(file) {\n  console.log(`CRITICAL: Processing XML file: ${file.name}`);\n  const reader = new FileReader();\n  reader.onload = async (e) => {\n    try {\n      const xmlText = e.target.result;\n      console.log(\n        `CRITICAL: XML file read successfully, length: ${xmlText.length}`\n      );\n\n      // Use the comprehensive XML parser instead of basic DOM parsing\n      const { parseXML } = await import(\"../parsers/xmlParser.js\");\n      const data = parseXML(xmlText);\n\n      console.log(\n        `CRITICAL: XML parsed into ${data.length} rows using comprehensive parser`\n      );\n\n      // Only proceed if we have valid data\n      if (!data || data.length === 0) {\n        console.error(\"CRITICAL ERROR: XML parser returned no data\");\n        handleFileUploadError(\n          new Error(\"No valid transaction data found in XML file\")\n        );\n        return;\n      }\n\n      if (data.length === 1) {\n        console.error(\n          \"CRITICAL ERROR: XML parser found only headers, no transaction rows\"\n        );\n        handleFileUploadError(\n          new Error(\"XML file contains headers but no transaction data\")\n        );\n        return;\n      }\n\n      processUploadedData(file, data);\n    } catch (error) {\n      console.error(\"CRITICAL ERROR: XML processing failed:\", error);\n      handleFileUploadError(error);\n    }\n  };\n  reader.readAsText(file);\n}\n\n// Helper function to validate basic file data\nfunction validateFileData(file, data) {\n  if (!data || data.length === 0) {\n    console.error(\"CRITICAL ERROR: No data found in file\");\n    handleFileUploadError(new Error(\"No data found in file\"));\n    return false;\n  }\n\n  if (data.length === 1) {\n    console.error(\n      \"CRITICAL ERROR: File contains only header row, no transaction data\"\n    );\n    handleFileUploadError(\n      new Error(\n        `File \"${file.name}\" contains only headers but no transaction data. Please ensure your file contains actual transaction records.`\n      )\n    );\n    return false;\n  }\n\n  return true;\n}\n\n// Helper function to attempt CSV single-cell splitting\nfunction attemptCsvSplit(data) {\n  const headerRow = data[0];\n  if (\n    headerRow?.length === 1 &&\n    typeof headerRow[0] === \"string\" &&\n    headerRow[0].includes(\",\")\n  ) {\n    console.log(\"DEBUG: Detected CSV data in single cell, attempting to split\");\n    const splitData = data.map((row) => {\n      if (row?.[0] && typeof row[0] === \"string\") {\n        return row[0].split(\",\").map((cell) => cell.trim());\n      }\n      return row;\n    });\n\n    if (splitData?.[0]?.length >= 2) {\n      console.log(\n        \"DEBUG: Successfully split CSV data, proceeding with split data\"\n      );\n      return { success: true, data: splitData };\n    }\n  }\n  return { success: false, data };\n}\n\n// Helper function to filter empty Excel columns\nfunction filterEmptyColumns(data) {\n  console.log(\"DEBUG: Attempting to filter empty columns from Excel data\");\n  const filteredData = data.map((row) => {\n    if (Array.isArray(row)) {\n      return row.filter(\n        (cell) => cell !== undefined && cell !== null && cell !== \"\"\n      );\n    }\n    return row;\n  });\n\n  if (filteredData?.[0]?.length >= 2) {\n    console.log(\n      \"DEBUG: Successfully filtered empty columns, proceeding with filtered data\"\n    );\n    return { success: true, data: filteredData };\n  }\n  return { success: false, data };\n}\n\n// Helper function to check for sparse Excel data\nfunction checkSparseExcelData(data) {\n  console.log(\n    \"DEBUG: Checking for sparse Excel data with varying column counts\"\n  );\n  let maxColumns = 0;\n  data.forEach((row) => {\n    if (Array.isArray(row)) {\n      const nonEmptyColumns = row.filter(\n        (cell) => cell !== undefined && cell !== null && cell !== \"\"\n      ).length;\n      maxColumns = Math.max(maxColumns, nonEmptyColumns);\n    }\n  });\n\n  if (maxColumns >= 2) {\n    console.log(\n      `DEBUG: Found rows with ${maxColumns} columns, proceeding with existing data`\n    );\n    return { success: true, data };\n  }\n  return { success: false, data };\n}\n\n// Helper function to fix data format issues\nfunction fixDataFormatIssues(file, data) {\n  const headerRow = data[0];\n  console.log(\"DEBUG: First row data:\", headerRow);\n  console.log(\"DEBUG: Data structure:\", data.slice(0, 3));\n  console.log(\"DEBUG: File type:\", file.name.split(\".\").pop());\n\n  if (!headerRow || headerRow.length < 2) {\n    // Try different strategies to fix the data\n    let result = attemptCsvSplit(data);\n    if (result.success) return result;\n\n    result = filterEmptyColumns(data);\n    if (result.success) return result;\n\n    result = checkSparseExcelData(data);\n    if (result.success) return result;\n\n    // If nothing worked, return failure\n    console.error(\n      \"CRITICAL ERROR: File does not contain enough columns for transaction data\"\n    );\n    handleFileUploadError(\n      new Error(\n        `File \"${file.name}\" does not contain enough columns. Need at least 2 columns (date and amount).`\n      )\n    );\n    return { success: false, data };\n  }\n\n  return { success: true, data };\n}\n\n// Helper function to process existing mapping\nasync function processExistingMapping(file, data, signature) {\n  const { findMappingBySignature } = await import(\n    \"../mappings/mappingsManager.js\"\n  );\n  const existingMapping = findMappingBySignature(signature);\n\n  if (existingMapping) {\n    console.log(\n      \"CRITICAL: Found existing mapping, auto-applying:\",\n      existingMapping\n    );\n    showToast(\n      `≡ƒÄ» Using saved mapping from \"${existingMapping.fileName}\"`,\n      \"info\"\n    );\n    await autoApplyMapping(file, data, existingMapping);\n    return true;\n  }\n  return false;\n}\n\n// Helper function to handle auto-detection\nasync function handleAutoDetection(file, data) {\n  console.log(\"CRITICAL: No existing mapping found, using auto-detection\");\n\n  try {\n    const { autoDetectFieldType } = await import(\n      \"../constants/fieldMappings.js\"\n    );\n    const headers = data[0] || [];\n    const autoMapping = headers.map((header) => autoDetectFieldType(header));\n\n    console.log(\"CRITICAL: Auto-detected mapping:\", autoMapping);\n\n    // Enhanced validation for auto-detection\n    const validMappings = autoMapping.filter((m) => m && m !== \"ΓÇô\").length;\n    const hasDate = autoMapping.includes(\"Date\");\n    const hasAmount =\n      autoMapping.includes(\"Income\") || autoMapping.includes(\"Expenses\");\n\n    // Check data quality: ensure we have actual transaction data\n    const sampleDataRow = data[1]; // Second row should contain sample data\n    const hasNonEmptyData = sampleDataRow?.some(\n      (cell) => cell?.toString().trim() !== \"\"\n    );\n\n    if (validMappings >= 2 && hasDate && hasAmount && hasNonEmptyData) {\n      console.log(\n        \"CRITICAL: Auto-detection successful, processing file automatically\"\n      );\n\n      // Store data and process with auto-detected mapping\n      storeFileDataInState(file, data);\n\n      // Apply the auto-detected mapping\n      await autoApplyDetectedMapping(file, data, autoMapping);\n      return;\n    } else {\n      console.log(\n        \"CRITICAL: Auto-detection insufficient or poor data quality, showing manual mapping modal\"\n      );\n      console.log(\n        \"CRITICAL: Validation results - validMappings:\",\n        validMappings,\n        \"hasDate:\",\n        hasDate,\n        \"hasAmount:\",\n        hasAmount,\n        \"hasNonEmptyData:\",\n        hasNonEmptyData\n      );\n    }\n  } catch (autoError) {\n    console.log(\n      \"CRITICAL: Auto-detection failed, showing manual mapping modal:\",\n      autoError\n    );\n  }\n\n  // If auto-detection failed, store data and show preview modal\n  console.log(\"CRITICAL: Storing file data and showing preview modal\");\n  storeFileDataInState(file, data);\n  showFilePreviewModal(data);\n  showToast(`File loaded: ${data.length} rows found`, \"success\");\n}\n\n/**\n * Process uploaded data\n */\nasync function processUploadedData(file, data) {\n  console.log(\n    `CRITICAL: processUploadedData called with file: ${file.name}, data rows: ${data?.length}`\n  );\n\n  try {\n    // Step 1: Validate basic file data\n    if (!validateFileData(file, data)) {\n      return;\n    }\n\n    // Step 2: Fix data format issues\n    const fixResult = fixDataFormatIssues(file, data);\n    if (!fixResult.success) {\n      return;\n    }\n    data = fixResult.data;\n\n    // Step 3: Check for duplicate file\n    const isDuplicate = checkForDuplicateFile(file);\n    if (isDuplicate) {\n      console.log(`CRITICAL: Duplicate file detected: ${file.name}`);\n      handleDuplicateFile(file);\n      return;\n    }\n\n    // Step 4: Generate signature and set as current\n    const { generateFileSignature } = await import(\"../parsers/fileHandler.js\");\n    const { setCurrentFileSignature } = await import(\"../core/appState.js\");\n\n    const signature = generateFileSignature(file.name, data);\n    setCurrentFileSignature(signature);\n    console.log(\n      \"CRITICAL: Generated signature for file:\",\n      file.name,\n      \"signature:\",\n      signature\n    );\n\n    // Step 5: Try to use existing mapping\n    const mappingFound = await processExistingMapping(file, data, signature);\n    if (mappingFound) {\n      return;\n    }\n\n    // Step 6: Handle auto-detection\n    await handleAutoDetection(file, data);\n  } catch (error) {\n    console.error(\"CRITICAL ERROR: Error in processUploadedData:\", error);\n    handleFileUploadError(error);\n  } finally {\n    fileInputInProgress = false;\n  }\n}\n\n/**\n * FIXED: Auto-apply existing mapping to file\n */\nasync function autoApplyMapping(file, data, mapping) {\n  try {\n    console.log(\"CRITICAL: Auto-applying mapping:\", mapping);\n\n    // Store file data\n    AppState.currentPreviewData = data;\n    AppState.currentFileName = file.name;\n\n    // Generate signature\n    const { generateFileSignature } = await import(\"../parsers/fileHandler.js\");\n    const signature = generateFileSignature(file.name, data);\n\n    // FIXED: Import date conversion function with error handling\n    let convertExcelDate;\n    try {\n      const excelParserModule = await import(\"../parsers/excelParser.js\");\n      const excelParser =\n        excelParserModule.excelParser || new excelParserModule.default();\n      convertExcelDate = (value) => excelParser.convertExcelDate(value);\n    } catch (error) {\n      console.error(\"CRITICAL: Failed to import convertExcelDate:\", error);\n      // Fallback function if import fails\n      convertExcelDate = (value) => String(value);\n    }\n\n    // Process transactions using the existing mapping\n    const transactions = [];\n    for (let i = mapping.dataRowIndex || 1; i < data.length; i++) {\n      const row = data[i];\n      if (!row || row.every((cell) => !cell || cell.toString().trim() === \"\"))\n        continue;\n\n      const transaction = {\n        fileName: file.name,\n        currency: mapping.currency || \"USD\",\n        date: \"\",\n        description: \"\",\n        category: \"\",\n        income: 0,\n        expenses: 0,\n      };\n\n      // Apply mapping to row data\n      mapping.mapping.forEach((field, colIndex) => {\n        if (\n          field &&\n          field !== \"ΓÇô\" &&\n          row[colIndex] !== undefined &&\n          row[colIndex] !== \"\"\n        ) {\n          let value = row[colIndex];\n\n          if (field === \"Date\") {\n            if (isExcelDate(value)) {\n              value = convertExcelDate(value);\n            }\n            transaction[field.toLowerCase()] = String(value).trim();\n          } else if (field === \"Income\" || field === \"Expenses\") {\n            const numValue =\n              parseFloat(String(value).replace(/[^\\d.-]/g, \"\")) || 0;\n            if (numValue > 0) {\n              transaction[field.toLowerCase()] = numValue;\n            }\n          } else {\n            transaction[field.toLowerCase()] = String(value).trim();\n          }\n        }\n      });\n\n      // Only add if has essential data\n      const hasValidDate = transaction.date?.length > 0;\n      const hasValidAmount = transaction.income > 0 || transaction.expenses > 0;\n      const hasValidDescription = transaction.description?.trim().length > 0;\n\n      if (hasValidDate || hasValidAmount || hasValidDescription) {\n        transactions.push(transaction);\n      }\n    }\n\n    // CRITICAL FIX: Validate that we have actual valid transactions before proceeding\n    if (transactions.length === 0) {\n      console.error(\n        \"CRITICAL ERROR: Existing mapping produced no valid transactions\"\n      );\n      showToast(\n        `No valid transactions found in ${file.name} using existing mapping. Please check the file format and try manual mapping.`,\n        \"error\"\n      );\n\n      // Fall back to manual mapping modal\n      const { showFileUploadModal } = await import(\"./fileUploadModal.js\");\n      showFileUploadModal(data, file.name);\n      fileInputInProgress = false;\n      return;\n    }\n\n    console.log(\n      `CRITICAL: Existing mapping produced ${transactions.length} valid transactions`\n    );\n\n    // Add to merged files\n    const mergedFile = {\n      fileName: file.name,\n      headerRowIndex: mapping.headerRowIndex || 0,\n      dataRowIndex: mapping.dataRowIndex || 1,\n      data,\n      transactions,\n      headerMapping: mapping.mapping,\n      signature,\n      currency: mapping.currency || \"USD\",\n      mergedAt: new Date().toISOString(),\n    };\n\n    if (!AppState.mergedFiles) {\n      AppState.mergedFiles = [];\n    }\n    AppState.mergedFiles.push(mergedFile);\n\n    if (!AppState.transactions) {\n      AppState.transactions = [];\n    }\n    AppState.transactions.push(...transactions);\n\n    // Save to localStorage\n    localStorage.setItem(\"mergedFiles\", JSON.stringify(AppState.mergedFiles));\n    localStorage.setItem(\"transactions\", JSON.stringify(AppState.transactions));\n\n    fileInputInProgress = false;\n    showToast(\n      `File imported automatically: ${transactions.length} transactions added`,\n      \"success\"\n    );\n\n    // Force UI update\n    setTimeout(() => {\n      import(\"./transactionManager.js\")\n        .then((module) => {\n          module.renderTransactions(AppState.transactions, true);\n        })\n        .catch((error) => {\n          console.error(\n            \"CRITICAL ERROR: Failed to import transaction manager:\",\n            error\n          );\n        });\n    }, 100);\n  } catch (error) {\n    console.error(\"CRITICAL ERROR: Auto-apply mapping failed:\", error);\n    showToast(\"Auto-mapping failed, showing manual mapping\", \"warning\");\n\n    // FIXED: Show manual mapping modal when auto-apply fails\n    storeFileDataInState(file, data);\n    showFilePreviewModal(data);\n    showToast(\n      `File loaded: ${data.length} rows found - Manual mapping required`,\n      \"info\"\n    );\n    fileInputInProgress = false;\n  }\n}\n\n/**\n * FIXED: Show confirmation dialog for existing mapping match (only when auto-apply fails)\n */\nfunction showMappingConfirmationDialog(file, data, existingMapping, signature) {\n  const modalContent = document.createElement(\"div\");\n  modalContent.className = \"mapping-confirmation-modal\";\n\n  // Build the fields display\n  const mappingFields = existingMapping.mapping\n    ? existingMapping.mapping\n        .map((field, index) =>\n          field !== \"ΓÇô\" ? `Column ${index + 1}: ${field}` : null\n        )\n        .filter((field) => field !== null)\n        .join(\", \")\n    : \"No field mappings\";\n\n  modalContent.innerHTML = `\n    <div class=\"confirmation-content\">\n      <h3>ΓÜá∩╕Å Auto-Mapping Failed</h3>\n      <p>The automatic mapping failed, but we found a similar file structure. Would you like to use the existing mapping or map manually?</p>\n\n      <div class=\"mapping-details\">\n        <h4>Existing Mapping Details:</h4>\n        <p><strong>Original File:</strong> ${\n          existingMapping.fileName || \"Unknown\"\n        }</p>\n        <p><strong>Fields Mapped:</strong> ${mappingFields}</p>\n        <p><strong>Header Row:</strong> ${\n          (existingMapping.headerRowIndex || 0) + 1\n        }</p>\n        <p><strong>Data Row:</strong> ${\n          (existingMapping.dataRowIndex || 1) + 1\n        }</p>\n        <p><strong>Currency:</strong> ${existingMapping.currency || \"USD\"}</p>\n      </div>\n\n      <div class=\"file-info\">\n        <h4>Current File:</h4>\n        <p><strong>File Name:</strong> ${file.name}</p>\n        <p><strong>Rows:</strong> ${data.length}</p>\n        <p><strong>Columns:</strong> ${data[0]?.length || 0}</p>\n      </div>\n    </div>\n\n    <div class=\"confirmation-actions\">\n      <button id=\"retryMappingBtn\" class=\"btn primary-btn\">≡ƒöä Retry Auto-Mapping</button>\n      <button id=\"manualMappingBtn\" class=\"btn secondary-btn\">ΓÜÖ∩╕Å Map Manually</button>\n      <button id=\"cancelMappingBtn\" class=\"btn danger-btn\">Γ¥î Cancel</button>\n    </div>\n  `;\n\n  const modal = showModal({\n    title: \"Auto-Mapping Failed\",\n    content: modalContent,\n    size: \"large\",\n    closeOnClickOutside: false,\n  });\n\n  // Add event listeners\n  const retryMappingBtn = modalContent.querySelector(\"#retryMappingBtn\");\n  const manualMappingBtn = modalContent.querySelector(\"#manualMappingBtn\");\n  const cancelMappingBtn = modalContent.querySelector(\"#cancelMappingBtn\");\n\n  if (retryMappingBtn) {\n    retryMappingBtn.addEventListener(\"click\", async () => {\n      modal.close();\n      console.log(\"CRITICAL: User chose to retry auto-mapping\");\n      // Try auto-apply again\n      await autoApplyMapping(file, data, existingMapping);\n    });\n  }\n\n  if (manualMappingBtn) {\n    manualMappingBtn.addEventListener(\"click\", () => {\n      modal.close();\n      console.log(\"CRITICAL: User chose manual mapping\");\n      // Store data and show manual mapping modal\n      storeFileDataInState(file, data);\n      showFilePreviewModal(data);\n      showToast(\n        `File loaded: ${data.length} rows found - Manual mapping selected`,\n        \"info\"\n      );\n      fileInputInProgress = false;\n    });\n  }\n\n  if (cancelMappingBtn) {\n    cancelMappingBtn.addEventListener(\"click\", () => {\n      modal.close();\n      console.log(\"CRITICAL: User cancelled file upload\");\n      resetFileState();\n      fileInputInProgress = false;\n      showToast(\"File upload cancelled\", \"info\");\n    });\n  }\n}\n\n/**\n * Handle file upload errors\n */\nfunction handleFileUploadError(error) {\n  console.error(\"File upload error:\", error);\n  showToast(`Error processing file: ${error.message}`, \"error\");\n  resetFileState();\n  fileInputInProgress = false; // FIXED: Reset flag on error\n}\n\n/**\n * Store file data in AppState\n */\nfunction storeFileDataInState(file, data) {\n  AppState.currentPreviewData = data;\n  AppState.currentFileName = file.name;\n  console.log(`Stored file data: ${file.name} with ${data.length} rows`);\n}\n\n/**\n * Check for duplicate file\n */\nfunction checkForDuplicateFile(file) {\n  const existingFiles = AppState.mergedFiles || [];\n  return existingFiles.some((f) => f.fileName === file.name);\n}\n\n/**\n * Handle duplicate file\n */\nfunction handleDuplicateFile(file) {\n  const shouldReplace = confirm(\n    `File \"${file.name}\" already exists. Do you want to replace it?`\n  );\n\n  if (shouldReplace) {\n    // Remove existing file and continue\n    AppState.mergedFiles = AppState.mergedFiles.filter(\n      (f) => f.fileName !== file.name\n    );\n\n    // Remove transactions from that file\n    if (AppState.transactions) {\n      AppState.transactions = AppState.transactions.filter(\n        (t) => t.fileName !== file.name\n      );\n    }\n\n    // Save updated state\n    localStorage.setItem(\"mergedFiles\", JSON.stringify(AppState.mergedFiles));\n    localStorage.setItem(\"transactions\", JSON.stringify(AppState.transactions));\n\n    showToast(`Replacing existing file: ${file.name}`, \"info\");\n\n    // Continue with processing\n    fileInputInProgress = false;\n\n    // Re-trigger file processing\n    setTimeout(() => {\n      readFileContent(file);\n    }, 100);\n  } else {\n    showToast(`Upload cancelled for duplicate file: ${file.name}`, \"info\");\n    resetFileState();\n    fileInputInProgress = false;\n  }\n}\n\n// FIXED: Use only the 5 essential fields from TRANSACTION_FIELDS for mapping\nconst MAPPING_FIELDS = [\n  \"Date\",\n  \"Income\",\n  \"Expenses\",\n  \"Description\",\n  \"Currency\",\n];\n\n/**\n * FIXED: Show simplified file preview modal with clean structure\n */\nfunction showFilePreviewModal(data) {\n  console.log(\n    \"CRITICAL: showFilePreviewModal called with data length:\",\n    data?.length\n  );\n\n  if (!data || data.length === 0) {\n    console.error(\"CRITICAL ERROR: No data provided to showFilePreviewModal\");\n    showToast(\"No data to preview\", \"error\");\n    return;\n  }\n\n  console.log(\n    \"CRITICAL: Creating file preview modal for:\",\n    AppState.currentFileName\n  );\n\n  const fileExt = AppState.currentFileName\n    ? AppState.currentFileName.split(\".\").pop().toLowerCase()\n    : \"\";\n\n  const modalContent = document.createElement(\"div\");\n  modalContent.className = \"file-preview-modal\";\n\n  // FIXED: Simplified clean structure\n  modalContent.innerHTML = `\n    <div class=\"file-info-section\">\n      <h3>≡ƒôä ${AppState.currentFileName}</h3>\n      <div class=\"file-stats\">\n        <span>≡ƒôè ${data.length} rows</span>\n        <span>≡ƒôæ ${data[0]?.length || 0} columns</span>\n        <span>≡ƒôü ${fileExt.toUpperCase()}</span>\n      </div>\n    </div>\n\n    <div class=\"row-config-section\">\n      <div class=\"config-row\">\n        <label for=\"headerRowSelect\">Header Row:</label>\n        <select id=\"headerRowSelect\">\n          ${data\n            .map(\n              (_, index) =>\n                `<option value=\"${index}\" ${index === 0 ? \"selected\" : \"\"}>${\n                  index + 1\n                }</option>`\n            )\n            .join(\"\")}\n        </select>\n      </div>\n      <div class=\"config-row\">\n        <label for=\"dataRowSelect\">Data Row:</label>\n        <select id=\"dataRowSelect\">\n          ${data\n            .map(\n              (_, index) =>\n                `<option value=\"${index}\" ${index === 1 ? \"selected\" : \"\"}>${\n                  index + 1\n                }</option>`\n            )\n            .join(\"\")}\n        </select>\n      </div>\n    </div>\n\n    <div id=\"previewContainer\" class=\"preview-container\"></div>\n\n    <div class=\"modal-actions\">\n      <button id=\"saveHeadersBtn\" class=\"btn primary-btn\">Import File</button>\n      <button id=\"cancelPreviewBtn\" class=\"btn secondary-btn\">Cancel</button>\n    </div>\n  `;\n\n  console.log(\"CRITICAL: Creating modal with showModal...\");\n\n  // CRITICAL FIX: Create modal immediately and ensure it shows\n  try {\n    const modal = showModal({\n      title: \"Import File: Column Mapping\",\n      content: modalContent,\n      size: \"large\",\n      closeOnClickOutside: false,\n    });\n\n    if (!modal) {\n      console.error(\n        \"CRITICAL ERROR: Modal creation failed - showModal returned null/undefined\"\n      );\n      showToast(\"Error creating file preview modal\", \"error\");\n      return;\n    }\n\n    console.log(\"CRITICAL: Modal created successfully, modal object:\", modal);\n\n    // CRITICAL FIX: Set up event listeners immediately after modal is created\n    setupModalEventListeners(modal, data, fileExt, () => {\n      console.log(\"CRITICAL: Calling updatePreview...\");\n      updatePreview();\n    });\n\n    // CRITICAL FIX: Run initial preview update immediately\n    console.log(\"CRITICAL: Running initial preview update...\");\n    updatePreview();\n    console.log(\"CRITICAL: File preview modal setup complete\");\n  } catch (error) {\n    console.error(\"CRITICAL ERROR: Error creating modal:\", error);\n    showToast(\"Error creating file preview modal\", \"error\");\n    return;\n  }\n\n  // Update preview function (move inside to access current data)\n  function updatePreview() {\n    console.log(\"CRITICAL: updatePreview called\");\n    const headerRowIndex = parseInt(\n      document.getElementById(\"headerRowSelect\")?.value || 0\n    );\n    const dataRowIndex = parseInt(\n      document.getElementById(\"dataRowSelect\")?.value || 1\n    );\n\n    if (headerRowIndex >= data.length || dataRowIndex >= data.length) {\n      console.log(\"CRITICAL: Invalid row indices\");\n      return;\n    }\n\n    const headers = data[headerRowIndex] || [];\n    const dataRow = data[dataRowIndex] || [];\n    const previewContainer = document.getElementById(\"previewContainer\");\n\n    if (!previewContainer) {\n      console.error(\"CRITICAL: Preview container not found\");\n      return;\n    }\n\n    // CRITICAL FIX: Preserve current user selections before regenerating HTML\n    const currentSelections = {};\n    const existingSelects = document.querySelectorAll(\".header-select\");\n    existingSelects.forEach((select) => {\n      const index = parseInt(select.getAttribute(\"data-index\"));\n      if (!isNaN(index)) {\n        currentSelections[index] = select.value;\n        console.log(\n          `CRITICAL: Preserving user selection for column ${index}: \"${select.value}\"`\n        );\n      }\n    });\n\n    // CRITICAL FIX: Only create mapping dropdowns for actual columns that exist\n    const actualColumnCount = headers.length;\n    console.log(\n      \"CRITICAL: Creating mapping for\",\n      actualColumnCount,\n      \"actual columns\"\n    );\n\n    // FIXED: Proper table structure with headers mapping above each column using only essential fields\n    let html = `\n      <div class=\"preview-table-wrapper\">\n        <table class=\"column-mapping-table\">\n          <thead>\n            <tr class=\"mapping-row\">\n              ${headers\n                .map((header, index) => {\n                  // CRITICAL FIX: Use preserved user selection if available, otherwise auto-detect\n                  let selectedValue = currentSelections[index];\n                  if (!selectedValue) {\n                    const suggested = autoDetectFieldType(header) || \"ΓÇô\";\n                    selectedValue = MAPPING_FIELDS.includes(suggested)\n                      ? suggested\n                      : \"ΓÇô\";\n                  }\n\n                  console.log(\n                    `CRITICAL: Column ${index} (\"${header}\") - using selection: \"${selectedValue}\"`\n                  );\n\n                  return `\n                  <th class=\"mapping-cell\">\n                    <select class=\"header-select\" data-index=\"${index}\">\n                      <option value=\"ΓÇô\" ${\n                        selectedValue === \"ΓÇô\" ? \"selected\" : \"\"\n                      }>-ignore-</option>\n                      ${MAPPING_FIELDS.map(\n                        (field) =>\n                          `<option value=\"${field}\" ${\n                            selectedValue === field ? \"selected\" : \"\"\n                          }>${field}</option>`\n                      ).join(\"\")}\n                    </select>\n                  </th>\n                `;\n                })\n                .join(\"\")}\n            </tr>\n            <tr class=\"header-row\">\n              ${headers\n                .map(\n                  (header) => `\n                <th class=\"header-cell\">\n                  ${header || \"<em>empty</em>\"}\n                </th>\n              `\n                )\n                .join(\"\")}\n            </tr>\n          </thead>\n          <tbody>\n            <tr class=\"data-row\">\n              ${dataRow\n                .map((cell, index) => {\n                  // FIXED: Show date conversion preview only for columns mapped as Date\n                  const mappings = getCurrentMapping();\n                  const isMappedAsDate = mappings[index] === \"Date\";\n                  let displayValue = cell || \"<em>empty</em>\";\n\n                  if (cell && isMappedAsDate && isExcelDate(cell)) {\n                    displayValue = formatExcelDateForPreview(cell);\n                  } else if (cell) {\n                    // FIXED: Keep original format for non-Date columns\n                    displayValue =\n                      String(cell)\n                        .replace(/data-field=.*$/i, \"\")\n                        .trim() || \"<em>empty</em>\";\n                  }\n                  return `\n                  <td class=\"data-cell\">\n                    ${displayValue}\n                  </td>\n                `;\n                })\n                .join(\"\")}\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    `;\n\n    previewContainer.innerHTML = html;\n\n    // Add change listeners\n    document.querySelectorAll(\".header-select\").forEach((select) => {\n      select.addEventListener(\"change\", (e) => {\n        console.log(\"CRITICAL: Header select changed:\", e.target.value);\n        const newValue = e.target.value;\n        const index = parseInt(e.target.getAttribute(\"data-index\"));\n\n        // FIXED: Prevent multiple Date mappings\n        if (newValue === \"Date\") {\n          const currentMappings = getCurrentMapping();\n          handleDateMappingConflict(currentMappings, index);\n        }\n\n        updateSaveButtonState();\n        updatePreview(); // Refresh preview to show/hide date conversions\n      });\n    });\n\n    updateSaveButtonState();\n  }\n\n  function updateSaveButtonState() {\n    const saveBtn = document.getElementById(\"saveHeadersBtn\");\n    if (saveBtn) {\n      const mappings = getCurrentMapping();\n      const hasDate = mappings.includes(\"Date\");\n      const hasAmount =\n        mappings.includes(\"Income\") || mappings.includes(\"Expenses\");\n\n      // CRITICAL FIX: Always enable the button to allow user interaction\n      saveBtn.disabled = false;\n      saveBtn.removeAttribute(\"disabled\");\n      saveBtn.style.pointerEvents = \"auto\";\n      saveBtn.style.cursor = \"pointer\";\n      saveBtn.style.opacity = \"1\";\n\n      saveBtn.title =\n        hasDate && hasAmount\n          ? \"Ready to import\"\n          : \"Click to configure mapping (Date and Income/Expenses needed)\";\n\n      console.log(\"CRITICAL: fileUpload.js - Save button FORCE ENABLED\");\n    }\n  }\n}\n\n/**\n * Set up modal event listeners with real-time preview updates\n */\nfunction setupModalEventListeners(modal, data, fileExt, updatePreview) {\n  const modalContent =\n    modal.content || getCachedModalElement(\".file-preview-modal\");\n  if (!modalContent) return;\n\n  // FIXED: Cache frequently accessed elements\n  const cancelBtn = modalContent.querySelector(\"#cancelPreviewBtn\");\n  const saveBtn = modalContent.querySelector(\"#saveHeadersBtn\");\n\n  // FIXED: Use event delegation for header selects\n  const handleSelectChange = (e) => {\n    if (e.target.matches(\"#headerRowSelect, #dataRowSelect\")) {\n      // FIXED: Use requestAnimationFrame for smooth updates\n      requestAnimationFrame(updatePreview);\n    }\n  };\n\n  modalContent.addEventListener(\"change\", handleSelectChange);\n\n  // FIXED: Track listeners for cleanup\n  const modalId = modal.id || Date.now().toString();\n  fileUploadCache.eventListeners.set(modalId, [\n    { element: modalContent, event: \"change\", handler: handleSelectChange },\n  ]);\n\n  if (cancelBtn) {\n    const handleCancel = () => {\n      modal.close();\n      // FIXED: Add missing clearPreview function\n      resetFileState();\n      fileInputInProgress = false;\n      cleanupModalEventListeners(modalId);\n    };\n    cancelBtn.addEventListener(\"click\", handleCancel);\n    fileUploadCache.eventListeners.get(modalId).push({\n      element: cancelBtn,\n      event: \"click\",\n      handler: handleCancel,\n    });\n  }\n\n  if (saveBtn) {\n    const handleSave = () => {\n      onSaveHeaders(modal);\n      cleanupModalEventListeners(modalId);\n    };\n    saveBtn.addEventListener(\"click\", handleSave);\n    fileUploadCache.eventListeners.get(modalId).push({\n      element: saveBtn,\n      event: \"click\",\n      handler: handleSave,\n    });\n  }\n}\n\n// FIXED: Clean up modal event listeners\nfunction cleanupModalEventListeners(modalId) {\n  const listeners = fileUploadCache.eventListeners.get(modalId);\n  if (!listeners) return;\n\n  listeners.forEach(({ element, event, handler }) => {\n    element.removeEventListener(event, handler);\n  });\n\n  fileUploadCache.eventListeners.delete(modalId);\n}\n\n// FIXED: Add missing getCachedModalElement function\nfunction getCachedModalElement(selector) {\n  if (!fileUploadCache.modalElements.has(selector)) {\n    fileUploadCache.modalElements.set(\n      selector,\n      document.querySelector(selector)\n    );\n  }\n  return fileUploadCache.modalElements.get(selector);\n}\n\n// FIXED: Cleanup function for component unmounting\nexport function cleanupFileUpload() {\n  cleanupExistingFileInputs();\n  fileUploadCache.modalElements.clear();\n\n  fileUploadCache.eventListeners.forEach((listeners, modalId) => {\n    cleanupModalEventListeners(modalId);\n  });\n\n  fileUploadCache.activeInputs.clear();\n}\n\n/**\n * Validates file data and mapping before saving\n */\nfunction validateFileDataAndMapping(\n  data,\n  mapping,\n  headerRowIndex,\n  dataRowIndex\n) {\n  if (!data || data.length === 0) {\n    return { valid: false, error: \"No file data to validate\" };\n  }\n\n  // Check required mappings\n  const hasDate = mapping.includes(\"Date\");\n  const hasAmount = mapping.includes(\"Income\") || mapping.includes(\"Expenses\");\n\n  if (!hasDate || !hasAmount) {\n    return {\n      valid: false,\n      error:\n        \"Please map at least Date and one amount field (Income or Expenses)\",\n    };\n  }\n\n  // Validate column counts\n  const actualColumnCount =\n    data[headerRowIndex]?.length || data[0]?.length || 0;\n  const mappedColumnCount = mapping.length;\n\n  if (mappedColumnCount > actualColumnCount) {\n    return {\n      valid: false,\n      error: `Error: File has ${actualColumnCount} columns but mapping has ${mappedColumnCount} columns`,\n    };\n  }\n\n  // Find the highest mapped column index that's not 'ΓÇô'\n  const maxMappedColumnIndex = mapping.reduce((maxIndex, field, index) => {\n    return field !== \"ΓÇô\" ? Math.max(maxIndex, index) : maxIndex;\n  }, -1);\n\n  if (maxMappedColumnIndex >= actualColumnCount) {\n    return {\n      valid: false,\n      error: `Error: Mapping uses column ${\n        maxMappedColumnIndex + 1\n      } but file only has ${actualColumnCount} columns`,\n    };\n  }\n\n  return { valid: true };\n}\n\n// Process a single transaction row\nconst processTransactionRow = (row, mapping, fileName, convertExcelDate) => {\n  const transaction = {\n    fileName,\n    currency: \"USD\",\n    date: \"\",\n    description: \"\",\n    category: \"\",\n    income: 0,\n    expenses: 0,\n  };\n\n  // Process each mapped column\n  mapping.forEach((field, colIndex) => {\n    if (field === \"ΓÇô\" || colIndex >= row.length || !row[colIndex]) {\n      return;\n    }\n\n    let value = row[colIndex];\n    if (value === null || value === undefined || value === \"\") {\n      return;\n    }\n\n    console.log(\n      `CRITICAL: Processing column ${colIndex}, field ${field}, value:`,\n      value\n    );\n\n    if (field === \"Date\") {\n      if (isExcelDate(value)) {\n        value = convertExcelDate(value);\n      }\n      transaction[field.toLowerCase()] = String(value).trim();\n    } else if (field === \"Income\" || field === \"Expenses\") {\n      const numValue = parseFloat(String(value).replace(/[^\\d.-]/g, \"\")) || 0;\n      if (numValue > 0) {\n        transaction[field.toLowerCase()] = numValue;\n      }\n    } else {\n      const cleanValue = String(value).trim();\n      transaction[field.toLowerCase()] = cleanValue;\n    }\n  });\n\n  return transaction;\n};\n\n// Validate a processed transaction\nconst validateTransaction = (transaction) => {\n  const hasValidDate =\n    transaction.date?.length > 0 && typeof transaction.date === \"string\";\n  const hasValidAmount = transaction.income > 0 || transaction.expenses > 0;\n  const hasValidDescription = transaction.description?.trim().length > 0;\n\n  // Check for invalid date format\n  if (transaction.date && typeof transaction.date === \"number\") {\n    console.warn(\n      \"CRITICAL: Invalid date format detected, skipping transaction:\",\n      transaction\n    );\n    return false;\n  }\n\n  // Check for numeric description (possible wrong mapping)\n  if (\n    transaction.description &&\n    !isNaN(parseFloat(transaction.description)) &&\n    isFinite(transaction.description)\n  ) {\n    console.warn(\n      \"CRITICAL: Description appears to be a number, possible wrong mapping:\",\n      transaction\n    );\n  }\n\n  return hasValidDate || hasValidAmount || hasValidDescription;\n};\n\n// Process all transactions from data\nconst processAllTransactions = (\n  data,\n  mapping,\n  fileName,\n  dataRowIndex,\n  convertExcelDate\n) => {\n  const transactions = [];\n\n  for (let i = dataRowIndex; i < data.length; i++) {\n    const row = data[i];\n    if (!row || row.every((cell) => !cell || cell.toString().trim() === \"\"))\n      continue;\n\n    const transaction = processTransactionRow(\n      row,\n      mapping,\n      fileName,\n      convertExcelDate\n    );\n\n    if (validateTransaction(transaction)) {\n      transactions.push(transaction);\n    }\n  }\n\n  return transactions;\n};\n\n// Sets up date conversion function\nconst setupDateConversion = async () => {\n  try {\n    const excelParserModule = await import(\"../parsers/excelParser.js\");\n    const excelParser =\n      excelParserModule.excelParser || new excelParserModule.default();\n    return (value) => excelParser.convertExcelDate(value);\n  } catch (error) {\n    console.error(\"CRITICAL: Failed to import convertExcelDate:\", error);\n    return (value) => String(value);\n  }\n};\n\n/**\n * Handles saving headers and merging the file\n */\nexport async function onSaveHeaders(modal) {\n  try {\n    const data = AppState.currentPreviewData;\n    const fileName = AppState.currentFileName;\n\n    console.log(\n      \"CRITICAL: Saving headers for file:\",\n      fileName,\n      \"Data rows:\",\n      data ? data.length : 0\n    );\n\n    if (!data || !fileName) {\n      showToast(\"No file data to save\", \"error\");\n      return;\n    }\n\n    // Get mapping and settings\n    const mapping = getCurrentMapping();\n    const headerRowIndex = parseInt(\n      document.getElementById(\"headerRowSelect\")?.value || 0\n    );\n    const dataRowIndex = parseInt(\n      document.getElementById(\"dataRowSelect\")?.value || 1\n    );\n\n    console.log(\"CRITICAL: File processing settings:\", {\n      mapping,\n      headerRowIndex,\n      dataRowIndex,\n      dataLength: data.length,\n    });\n\n    // Validate mapping before proceeding\n    const validation = validateFileDataAndMapping(\n      data,\n      mapping,\n      headerRowIndex,\n      dataRowIndex\n    );\n    if (!validation.valid) {\n      showToast(validation.error, \"error\");\n      return;\n    }\n\n    // FIXED: Import date conversion function with error handling\n    const convertExcelDate = await setupDateConversion();\n\n    // CRITICAL FIX: Generate signature consistently - without mapping parameter\n    const { generateFileSignature } = await import(\"../parsers/fileHandler.js\");\n    const { saveHeadersAndFormat } = await import(\n      \"../mappings/mappingsManager.js\"\n    );\n\n    // FIXED: Generate signature without mapping to ensure consistency\n    const signature = generateFileSignature(fileName, data);\n\n    // CRITICAL FIX: Save mapping with all required parameters\n    saveHeadersAndFormat(\n      signature,\n      mapping,\n      fileName,\n      headerRowIndex,\n      dataRowIndex,\n      \"USD\"\n    );\n\n    console.log(\n      \"CRITICAL: Saved mapping with signature:\",\n      signature,\n      \"mapping:\",\n      mapping\n    );\n\n    // CRITICAL FIX: Process transactions with proper field mapping and validation\n    const transactions = processAllTransactions(\n      data,\n      mapping,\n      fileName,\n      dataRowIndex,\n      convertExcelDate\n    );\n\n    console.log(\n      `CRITICAL: Processed ${transactions.length} transactions from file:`,\n      transactions.slice(0, 3)\n    );\n\n    // CRITICAL FIX: Validate processed transactions before saving\n    if (transactions.length === 0) {\n      showToast(\n        \"No valid transactions found in the file. Please check your column mapping.\",\n        \"error\"\n      );\n      return;\n    }\n\n    // Validate sample transactions for data integrity\n    const sampleTx = transactions[0];\n    if (typeof sampleTx.date === \"number\") {\n      showToast(\n        \"Invalid date format detected. Please check your Date column mapping.\",\n        \"error\"\n      );\n      return;\n    }\n\n    // Save merged file data with ALL required fields\n    const mergedFile = {\n      fileName,\n      headerRowIndex,\n      dataRowIndex,\n      data,\n      transactions,\n      headerMapping: mapping,\n      signature,\n      currency: \"USD\",\n      mergedAt: new Date().toISOString(),\n    };\n\n    // Add to merged files\n    if (!AppState.mergedFiles) {\n      AppState.mergedFiles = [];\n    }\n    AppState.mergedFiles.push(mergedFile);\n\n    // CRITICAL FIX: Update AppState.transactions immediately and force UI update\n    if (!AppState.transactions) {\n      AppState.transactions = [];\n    }\n    AppState.transactions.push(...transactions);\n\n    console.log(\"CRITICAL: Updated AppState:\", {\n      mergedFiles: AppState.mergedFiles.length,\n      totalTransactions: AppState.transactions.length,\n      lastTransaction: AppState.transactions[AppState.transactions.length - 1],\n    });\n\n    // Save everything to localStorage\n    localStorage.setItem(\"mergedFiles\", JSON.stringify(AppState.mergedFiles));\n    localStorage.setItem(\"transactions\", JSON.stringify(AppState.transactions));\n\n    // Close modal and clear state\n    modal.close();\n    resetFileState();\n    fileInputInProgress = false;\n\n    // Show success message\n    showToast(\n      `File imported: ${transactions.length} transactions added`,\n      \"success\"\n    );\n\n    // CRITICAL: Force immediate transaction display update\n    console.log(\"CRITICAL: Forcing transaction manager update...\");\n\n    // Use setTimeout to ensure DOM is ready, then force update\n    setTimeout(() => {\n      import(\"./transactionManager.js\")\n        .then((module) => {\n          console.log(\n            \"CRITICAL: Transaction manager imported, forcing renderTransactions...\"\n          );\n          // Force render with the actual transactions\n          module.renderTransactions(AppState.transactions, true);\n        })\n        .catch((error) => {\n          console.error(\n            \"CRITICAL ERROR: Failed to import transaction manager:\",\n            error\n          );\n        });\n    }, 100);\n  } catch (error) {\n    console.error(\"CRITICAL ERROR: Error saving file:\", error);\n    showToast(\"Error importing file\", \"error\");\n  }\n}\n\n/**\n * Get current mapping from the modal\n */\nfunction getCurrentMapping() {\n  const selects = document.querySelectorAll(\".header-select, .column-mapping\");\n\n  // CRITICAL FIX: If no DOM selects found, fall back to AppState mapping\n  if (selects.length === 0) {\n    console.log(\n      \"CRITICAL: No header select elements found, falling back to AppState.currentSuggestedMapping\"\n    );\n    return AppState.currentSuggestedMapping || [];\n  }\n\n  // CRITICAL FIX: First, determine the actual number of columns needed\n  let maxIndex = -1;\n  selects.forEach((select) => {\n    const dataIndex = parseInt(select.getAttribute(\"data-index\"));\n    if (!isNaN(dataIndex)) {\n      maxIndex = Math.max(maxIndex, dataIndex);\n    }\n  });\n\n  // CRITICAL FIX: Create properly sized array and fill with defaults\n  const mapping = new Array(maxIndex + 1).fill(\"ΓÇô\");\n\n  // CRITICAL FIX: Only update mappings for actual select elements that exist\n  selects.forEach((select) => {\n    const dataIndex = parseInt(select.getAttribute(\"data-index\"));\n    if (!isNaN(dataIndex) && dataIndex >= 0 && dataIndex < mapping.length) {\n      const value = select.value || \"ΓÇô\";\n      mapping[dataIndex] = value;\n      console.log(\n        `CRITICAL: Setting mapping[${dataIndex}] = \"${value}\" from select element`\n      );\n    }\n  });\n\n  console.log(\n    \"CRITICAL: Generated mapping array:\",\n    mapping,\n    \"length:\",\n    mapping.length\n  );\n\n  // CRITICAL FIX: Validate that we haven't lost any user selections\n  selects.forEach((select) => {\n    const dataIndex = parseInt(select.getAttribute(\"data-index\"));\n    const selectValue = select.value;\n    if (\n      !isNaN(dataIndex) &&\n      selectValue &&\n      selectValue !== \"ΓÇô\" &&\n      mapping[dataIndex] !== selectValue\n    ) {\n      console.error(\n        `CRITICAL ERROR: Lost mapping for index ${dataIndex}: expected \"${selectValue}\", got \"${mapping[dataIndex]}\"`\n      );\n      mapping[dataIndex] = selectValue; // Force correct value\n    }\n  });\n\n  // CRITICAL FIX: As additional fallback, if all mapping values are \"ΓÇô\", use AppState\n  const hasAnyMappings = mapping.some((val) => val !== \"ΓÇô\");\n  if (!hasAnyMappings && AppState.currentSuggestedMapping?.length > 0) {\n    console.log(\n      \"CRITICAL: No valid mappings found in DOM, using AppState.currentSuggestedMapping as fallback\"\n    );\n    return AppState.currentSuggestedMapping;\n  }\n\n  return mapping;\n}\n\n/**\n * Initialize drag-and-drop functionality for file uploads\n */\nfunction initializeDragAndDrop() {\n  const dropOverlay = document.getElementById(\"dropOverlay\");\n\n  if (!dropOverlay) {\n    console.warn(\"Drop overlay element not found\");\n    return;\n  }\n\n  // Prevent default drag behaviors\n  [\"dragenter\", \"dragover\", \"dragleave\", \"drop\"].forEach((eventName) => {\n    document.addEventListener(eventName, preventDefaults, false);\n    document.body.addEventListener(eventName, preventDefaults, false);\n  });\n\n  function preventDefaults(e) {\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  // Highlight drop area when item is dragged over it\n  [\"dragenter\", \"dragover\"].forEach((eventName) => {\n    document.body.addEventListener(eventName, highlight, false);\n  });\n\n  [\"dragleave\", \"drop\"].forEach((eventName) => {\n    document.body.addEventListener(eventName, unhighlight, false);\n  });\n\n  function highlight(e) {\n    if (e.dataTransfer.types.includes(\"Files\")) {\n      dropOverlay.style.display = \"flex\";\n      document.body.classList.add(\"drag-over\");\n    }\n  }\n\n  function unhighlight(e) {\n    dropOverlay.style.display = \"none\";\n    document.body.classList.remove(\"drag-over\");\n  }\n\n  // Handle dropped files\n  document.body.addEventListener(\"drop\", handleDrop, false);\n\n  function handleDrop(e) {\n    const files = e.dataTransfer.files;\n\n    if (files.length > 0) {\n      const file = files[0];\n      console.log(\"File dropped:\", file.name);\n\n      // Process the dropped file\n      handleFileUploadProcess(file);\n    }\n  }\n\n  console.log(\"Drag and drop initialized successfully\");\n}\n\n/**\n * FIXED: Auto-apply detected mapping to file without showing modal\n */\nasync function autoApplyDetectedMapping(file, data, autoMapping) {\n  try {\n    console.log(\"CRITICAL: Auto-applying detected mapping:\", autoMapping);\n\n    // Store file data\n    AppState.currentPreviewData = data;\n    AppState.currentFileName = file.name;\n\n    // Process transactions using the auto-detected mapping\n    const transactions = [];\n    const dataStartRow = 1;\n\n    for (let i = dataStartRow; i < data.length; i++) {\n      const row = data[i];\n      if (!row || row.every((cell) => !cell || cell.toString().trim() === \"\"))\n        continue;\n\n      const transaction = {\n        fileName: file.name,\n        sourceFile: file.name,\n        originalRowIndex: i,\n      };\n\n      // Map fields based on auto-detected mapping\n      autoMapping.forEach((fieldType, colIndex) => {\n        const cellValue = row[colIndex] || \"\";\n\n        switch (fieldType) {\n          case \"Date\":\n            transaction.date = cellValue;\n            break;\n          case \"Description\":\n            transaction.description = cellValue;\n            break;\n          case \"Income\":\n            transaction.income = parseFloat(cellValue) || 0;\n            break;\n          case \"Expenses\":\n            transaction.expenses = parseFloat(cellValue) || 0;\n            break;\n          case \"Amount\": {\n            const amount = parseFloat(cellValue) || 0;\n            if (amount >= 0) {\n              transaction.income = amount;\n              transaction.expenses = 0;\n            } else {\n              transaction.income = 0;\n              transaction.expenses = Math.abs(amount);\n            }\n            break;\n          }\n          case \"Category\":\n            transaction.category = cellValue;\n            break;\n          case \"Currency\":\n            transaction.currency = cellValue;\n            break;\n          default:\n            // Store unmapped fields as custom properties\n            if (fieldType && fieldType !== \"ΓÇô\") {\n              transaction[fieldType.toLowerCase()] = cellValue;\n            }\n        }\n      });\n\n      // Set defaults\n      if (!transaction.income && !transaction.expenses) {\n        transaction.income = 0;\n        transaction.expenses = 0;\n      }\n      if (!transaction.category) {\n        transaction.category = \"Uncategorized\";\n      }\n      if (!transaction.currency) {\n        transaction.currency = \"USD\";\n      }\n\n      transactions.push(transaction);\n    }\n\n    // CRITICAL FIX: Validate that we have actual valid transactions before proceeding\n    if (transactions.length === 0) {\n      console.error(\n        \"CRITICAL ERROR: Auto-detected mapping produced no valid transactions\"\n      );\n      showToast(\n        `No valid transactions found in ${file.name}. Please check the file format and try manual mapping.`,\n        \"error\"\n      );\n\n      // Store file data and show manual mapping modal instead\n      storeFileDataInState(file, data);\n      showFilePreviewModal(data);\n      fileInputInProgress = false;\n      return;\n    }\n\n    console.log(\n      `CRITICAL: Auto-detected mapping produced ${transactions.length} valid transactions`\n    );\n\n    // Update AppState\n    AppState.mergedFiles.push({\n      fileName: file.name,\n      data: data,\n      signature: AppState.currentFileSignature,\n      mappings: autoMapping,\n      uploadDate: new Date().toISOString(),\n      autoDetected: true,\n    });\n\n    AppState.transactions.push(...transactions);\n\n    // Save to localStorage\n    localStorage.setItem(\"mergedFiles\", JSON.stringify(AppState.mergedFiles));\n    localStorage.setItem(\"transactions\", JSON.stringify(AppState.transactions));\n\n    fileInputInProgress = false;\n    showToast(\n      `File processed automatically: ${transactions.length} transactions imported`,\n      \"success\"\n    );\n\n    // Force UI update\n    setTimeout(() => {\n      import(\"./transactionManager.js\")\n        .then((module) => {\n          module.renderTransactions(AppState.transactions, true);\n        })\n        .catch((error) => {\n          console.error(\n            \"CRITICAL ERROR: Failed to import transaction manager:\",\n            error\n          );\n        });\n    }, 100);\n  } catch (error) {\n    console.error(\"CRITICAL ERROR: Auto-detected mapping failed:\", error);\n    showToast(\"Auto-processing failed, showing manual mapping\", \"warning\");\n\n    // Fall back to manual mapping\n    showFilePreviewModal(data);\n    fileInputInProgress = false;\n  }\n}\n\n// Helper function to find existing date mapping index\nfunction findExistingDateMapping(currentMappings, excludeIndex) {\n  return currentMappings.findIndex(\n    (field, i) => field === \"Date\" && i !== excludeIndex\n  );\n}\n\n// Helper function to handle date mapping conflict\nfunction handleDateMappingConflict(currentMappings, index) {\n  const existingDateIndex = findExistingDateMapping(currentMappings, index);\n\n  if (existingDateIndex !== -1) {\n    // Reset the existing Date mapping\n    const existingSelect = document.querySelector(\n      `.header-select[data-index=\"${existingDateIndex}\"]`\n    );\n    if (existingSelect) {\n      existingSelect.value = \"ΓÇô\";\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\ui\\fileUploadModal.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":89,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":89,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3041,3106],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":108,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":108,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3893,3998],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":112,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":112,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4005,4117],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":118,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":118,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4180,4241],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":119,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":119,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4250,4321],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":120,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":120,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4330,4442],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":130,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":130,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4625,4690],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":138,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":138,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4950,5024],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":143,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":143,"endColumn":15},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":144,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":144,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5179,5237],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":156,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":156,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5486,5578],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":244,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":244,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8341,8444],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":247,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":247,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8447,8549],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":255,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":255,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8692,8746],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":269,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":269,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9199,9318],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":286,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":286,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9701,9765],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":287,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":287,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9768,9844],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":426,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":426,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14065,14211],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":457,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":457,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15049,15145],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":460,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":460,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15148,15396],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":473,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":473,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15489,15554],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":478,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":478,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15646,15697],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":490,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":490,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16057,16176],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":498,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":498,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16218,16269],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":509,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":509,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16571,16625],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":529,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":529,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17351,17520],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":545,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":545,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17719,17781],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":557,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":557,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18039,18161],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":565,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":565,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18190,18240],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":576,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":576,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18430,18486],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AppState } from \"../core/appState.js\";\nimport { showModal } from \"./modalManager.js\";\nimport { suggestMapping } from \"./headerMapping.js\";\nimport { addMergedFile } from \"../core/fileManager.js\";\nimport { generateFileSignature } from \"../parsers/fileHandler.js\";\nimport { saveHeadersAndFormat } from \"../mappings/mappingsManager.js\";\nimport { showToast } from \"./uiManager.js\";\nimport { isExcelDate, formatExcelDateForPreview } from \"../utils/dateUtils.js\";\n\n/**\n * Shows the file upload and mapping modal\n * @param {Array<Array>} data - The parsed file data\n * @param {string} fileName - The name of the file\n */\nexport function showFileUploadModal(data, fileName) {\n  if (!data?.length) {\n    showToast(\"No data to map\", \"error\");\n    return;\n  }\n\n  // Store in AppState\n  AppState.currentFileData = data;\n  AppState.currentFileName = fileName;\n\n  // Generate mapping suggestion\n  AppState.currentSuggestedMapping = suggestMapping(data);\n\n  // Create modal content\n  const modalContent = document.createElement(\"div\");\n  modalContent.className = \"file-upload-modal\";\n\n  // Create table preview\n  const tablePreview = document.createElement(\"div\");\n  tablePreview.className = \"table-preview\";\n  tablePreview.innerHTML = createTablePreview(\n    data,\n    AppState.currentSuggestedMapping\n  );\n\n  // Create row selection panel\n  const rowSelectionPanel = document.createElement(\"div\");\n  rowSelectionPanel.className = \"row-selection-panel\";\n  rowSelectionPanel.innerHTML = `\n    <div style=\"margin-bottom: 15px;\">\n      <label for=\"headerRowInput\">Header Row: </label>\n      <input type=\"number\" id=\"headerRowInput\" min=\"1\" max=\"${data.length}\" value=\"1\" style=\"width: 60px;\">\n\n      <label for=\"dataRowInput\" style=\"margin-left: 15px;\">Data Starts at Row: </label>\n      <input type=\"number\" id=\"dataRowInput\" min=\"1\" max=\"${data.length}\" value=\"2\" style=\"width: 60px;\">\n\n      <label for=\"fileCurrency\" style=\"margin-left: 15px;\">Currency: </label>\n      <select id=\"fileCurrency\" style=\"width: 80px;\">\n        <option value=\"USD\">USD</option>\n        <option value=\"EUR\">EUR</option>\n        <option value=\"GBP\">GBP</option>\n        <option value=\"ILS\">ILS</option>\n      </select>\n    </div>\n  `;\n\n  // Add all elements to modal content\n  modalContent.appendChild(rowSelectionPanel);\n  modalContent.appendChild(tablePreview);\n\n  // Create buttons\n  const footer = document.createElement(\"div\");\n  footer.className = \"modal-footer\";\n  footer.innerHTML = `\n    <button id=\"cancelMappingBtn\" class=\"button secondary-btn\">Cancel</button>\n    <button id=\"saveHeadersBtn\" class=\"button primary-btn\">Save & Merge File</button>\n  `;\n\n  modalContent.appendChild(footer);\n\n  // Show modal\n  const modal = showModal({\n    title: `Map File: ${fileName}`,\n    content: modalContent,\n    size: \"large\",\n    closeOnClickOutside: false,\n  });\n\n  // Add event listeners\n  setTimeout(() => {\n    const saveBtn = document.getElementById(\"saveHeadersBtn\");\n    const cancelBtn = document.getElementById(\"cancelMappingBtn\");\n\n    if (saveBtn) {\n      console.log(\"CRITICAL: Save button found, forcing enable state\");\n\n      // ULTRA AGGRESSIVE FIX: Force enable the button immediately with complete override\n      saveBtn.disabled = false;\n      saveBtn.removeAttribute(\"disabled\");\n      saveBtn.style.pointerEvents = \"auto\";\n      saveBtn.style.cursor = \"pointer\";\n      saveBtn.style.opacity = \"1\";\n      saveBtn.style.background =\n        \"linear-gradient(135deg, #4CAF50 0%, #45a049 100%)\";\n      saveBtn.style.color = \"white\";\n      saveBtn.classList.remove(\"disabled\");\n      saveBtn.classList.add(\"primary-btn\");\n\n      // Force override any potential conflicting styles with !important\n      saveBtn.style.setProperty(\"pointer-events\", \"auto\", \"important\");\n      saveBtn.style.setProperty(\"cursor\", \"pointer\", \"important\");\n      saveBtn.style.setProperty(\"opacity\", \"1\", \"important\");\n\n      console.log(\n        \"CRITICAL: Save button initial state - disabled:\",\n        saveBtn.disabled\n      );\n      console.log(\n        \"CRITICAL: Save button computed styles:\",\n        window.getComputedStyle(saveBtn)\n      );\n\n      saveBtn.addEventListener(\"click\", (event) => {\n        console.log(\"CRITICAL: Save button clicked - event:\", event);\n        console.log(\"CRITICAL: Save button disabled state:\", saveBtn.disabled);\n        console.log(\n          \"CRITICAL: Save button pointer events:\",\n          saveBtn.style.pointerEvents\n        );\n\n        // Prevent any potential event blocking\n        event.stopPropagation();\n        event.preventDefault();\n\n        // Always proceed since we keep the button enabled\n        console.log(\"CRITICAL: Button is enabled, proceeding with save\");\n        try {\n          saveHeadersAndMergeFile(modal);\n        } catch (error) {\n          console.error(\"CRITICAL ERROR in saveHeadersAndMergeFile:\", error);\n          showToast(\"Error processing file: \" + error.message, \"error\");\n        }\n      });\n      console.log(\"CRITICAL: Save button event listener attached successfully\");\n\n      // Also add a fallback click handler with addEventListener options\n      saveBtn.addEventListener(\n        \"click\",\n        (event) => {\n          console.log(\"CRITICAL: Fallback click handler triggered\");\n        },\n        { capture: true }\n      );\n    } else {\n      console.error(\"CRITICAL ERROR: saveHeadersBtn not found in DOM\");\n    }\n\n    if (cancelBtn) {\n      cancelBtn.addEventListener(\"click\", () => {\n        modal.close();\n      });\n      console.log(\n        \"CRITICAL: Cancel button event listener attached successfully\"\n      );\n    } else {\n      console.error(\"CRITICAL ERROR: cancelMappingBtn not found in DOM\");\n    }\n\n    // CRITICAL FIX: Update button state after event listeners are attached\n    updateSaveButtonState();\n\n    // ADDITIONAL FIX: Re-apply button styling every 100ms for the first second\n    let attempts = 0;\n    const ensureButtonEnabled = () => {\n      const btn = document.getElementById(\"saveHeadersBtn\");\n      if (btn?.style && attempts < 10) {\n        btn.disabled = false;\n        btn.style.setProperty(\"pointer-events\", \"auto\", \"important\");\n        btn.style.setProperty(\"cursor\", \"pointer\", \"important\");\n        btn.style.setProperty(\"opacity\", \"1\", \"important\");\n        attempts++;\n        setTimeout(ensureButtonEnabled, 100);\n      }\n    };\n    ensureButtonEnabled();\n  }, 100);\n\n  // Add event listeners for mapping dropdowns\n  setTimeout(() => {\n    document.querySelectorAll(\".header-map\").forEach((select, index) => {\n      select.addEventListener(\"change\", (e) => {\n        updateHeaderMapping(e.target, index);\n      });\n    });\n\n    // Add event listeners for row selection\n    const headerRowInput = document.getElementById(\"headerRowInput\");\n    const dataRowInput = document.getElementById(\"dataRowInput\");\n\n    if (headerRowInput?.addEventListener && dataRowInput?.addEventListener) {\n      headerRowInput.addEventListener(\"change\", updateTablePreview);\n      dataRowInput.addEventListener(\"change\", updateTablePreview);\n    }\n  }, 100);\n}\n\n/**\n * Updates the table preview when row indices change\n */\nfunction updateTablePreview() {\n  const headerRowInput = document.getElementById(\"headerRowInput\");\n  const dataRowInput = document.getElementById(\"dataRowInput\");\n  const tablePreview = document.querySelector(\".table-preview\");\n\n  if (!headerRowInput || !dataRowInput || !tablePreview) return;\n\n  const headerRowIndex = parseInt(headerRowInput.value, 10) - 1;\n  const dataRowIndex = parseInt(dataRowInput.value, 10) - 1;\n\n  if (isNaN(headerRowIndex) || isNaN(dataRowIndex)) return;\n\n  // Get the header and data rows\n  const headerRow = AppState.currentFileData[headerRowIndex];\n  const dataRow = AppState.currentFileData[dataRowIndex];\n\n  if (!headerRow || !dataRow) return;\n\n  // Update the table preview\n  tablePreview.innerHTML = createTablePreview(\n    AppState.currentFileData,\n    AppState.currentSuggestedMapping,\n    headerRowIndex,\n    dataRowIndex\n  );\n\n  // Re-add event listeners for mapping dropdowns\n  document.querySelectorAll(\".header-map\").forEach((select, index) => {\n    select.addEventListener(\"change\", (e) => {\n      updateHeaderMapping(e.target, index);\n    });\n  });\n}\n\n/**\n * Updates the header mapping when a dropdown changes\n */\nfunction updateHeaderMapping(select, index) {\n  const newValue = select.value;\n\n  console.log(\n    `CRITICAL: updateHeaderMapping called - index: ${index}, newValue: \"${newValue}\"`\n  );\n  console.log(\n    `CRITICAL: Current mapping before update:`,\n    AppState.currentSuggestedMapping\n  );\n\n  // Skip further processing if setting to placeholder\n  if (newValue === \"ΓÇô\") {\n    AppState.currentSuggestedMapping[index] = newValue;\n    console.log(`CRITICAL: Set mapping[${index}] to \"ΓÇô\"`);\n    // Update preview to remove date conversion\n    updateTablePreviewAfterMapping();\n    return;\n  }\n\n  // FIXED: Check for duplicates on required fields (especially Date)\n  if (newValue !== \"Description\") {\n    const existingIndex = AppState.currentSuggestedMapping.findIndex(\n      (value, i) => i !== index && value === newValue\n    );\n\n    // If this header type already exists elsewhere, reset the other one\n    if (existingIndex !== -1) {\n      console.log(\n        `CRITICAL: Found duplicate mapping \"${newValue}\" at index ${existingIndex}, resetting it`\n      );\n      const existingDropdown = document.querySelector(\n        `.header-map[data-index=\"${existingIndex}\"]`\n      );\n      if (existingDropdown) {\n        existingDropdown.value = \"ΓÇô\";\n      }\n\n      // Update the mapping\n      AppState.currentSuggestedMapping[existingIndex] = \"ΓÇô\";\n    }\n  }\n\n  // Update the current mapping\n  AppState.currentSuggestedMapping[index] = newValue;\n  console.log(`CRITICAL: Set mapping[${index}] to \"${newValue}\"`);\n  console.log(`CRITICAL: Updated mapping:`, AppState.currentSuggestedMapping);\n\n  // FIXED: Update preview to show/hide date conversion\n  updateTablePreviewAfterMapping();\n}\n\n/**\n * FIXED: Update table preview after mapping changes to show date conversion\n */\nfunction updateTablePreviewAfterMapping() {\n  const tablePreview = document.querySelector(\".table-preview\");\n  if (!tablePreview || !AppState.currentFileData) return;\n\n  const headerRowInput = document.getElementById(\"headerRowInput\");\n  const dataRowInput = document.getElementById(\"dataRowInput\");\n\n  const headerRowIndex = headerRowInput\n    ? parseInt(headerRowInput.value, 10) - 1\n    : 0;\n  const dataRowIndex = dataRowInput ? parseInt(dataRowInput.value, 10) - 1 : 1;\n\n  // Update the table preview with current mapping\n  tablePreview.innerHTML = createTablePreview(\n    AppState.currentFileData,\n    AppState.currentSuggestedMapping,\n    headerRowIndex,\n    dataRowIndex\n  );\n\n  // Re-add event listeners for mapping dropdowns\n  document.querySelectorAll(\".header-map\").forEach((select, index) => {\n    select.addEventListener(\"change\", (e) => {\n      updateHeaderMapping(e.target, index);\n    });\n  });\n\n  updateSaveButtonState();\n}\n\n/**\n * Creates the table preview HTML with proper date conversion display\n */\nfunction createTablePreview(\n  data,\n  mapping,\n  headerRowIndex = 0,\n  dataRowIndex = 1\n) {\n  if (!data?.length) return \"<p>No data to preview</p>\";\n\n  const headerRow = data[headerRowIndex] || [];\n  const dataRow = data[dataRowIndex] || [];\n\n  let html = `\n    <div class=\"preview-info\">\n      <p>Map columns to the required fields below. At minimum, you need Date and either Income or Expenses.</p>\n    </div>\n    <div class=\"preview-table-container\">\n      <table class=\"preview-table\">\n        <tr>\n          <th>Column</th>\n          ${headerRow.map((_, i) => `<th>${i + 1}</th>`).join(\"\")}\n        </tr>\n        <tr>\n          <td>Header</td>\n          ${headerRow\n            .map((header) => `<td>${header || \"<em>empty</em>\"}</td>`)\n            .join(\"\")}\n        </tr>\n        <tr>\n          <td>Map To</td>\n          ${headerRow\n            .map((_, i) => {\n              const selected = mapping?.[i] ? mapping[i] : \"ΓÇô\";\n              return `\n              <td>\n                <select class=\"header-map\" data-index=\"${i}\">\n                  <option value=\"ΓÇô\" ${\n                    selected === \"ΓÇô\" ? \"selected\" : \"\"\n                  }>ΓÇô</option>\n                  <option value=\"Date\" ${\n                    selected === \"Date\" ? \"selected\" : \"\"\n                  }>Date</option>\n                  <option value=\"Description\" ${\n                    selected === \"Description\" ? \"selected\" : \"\"\n                  }>Description</option>\n                  <option value=\"Income\" ${\n                    selected === \"Income\" ? \"selected\" : \"\"\n                  }>Income</option>\n                  <option value=\"Expenses\" ${\n                    selected === \"Expenses\" ? \"selected\" : \"\"\n                  }>Expenses</option>\n                </select>\n              </td>\n            `;\n            })\n            .join(\"\")}\n        </tr>\n        <tr>\n          <td>Sample</td>\n          ${dataRow\n            .map((cell, index) => {\n              // FIXED: Show converted date preview only if this column is mapped as Date\n              const isMappedAsDate = mapping?.[index] === \"Date\";\n              let displayValue = cell || \"<em>empty</em>\";\n\n              if (cell && isMappedAsDate && isExcelDate(cell)) {\n                displayValue = formatExcelDateForPreview(cell);\n              } else if (cell) {\n                displayValue = String(cell);\n              }\n\n              return `<td>${displayValue}</td>`;\n            })\n            .join(\"\")}\n        </tr>\n      </table>\n    </div>\n  `;\n\n  return html;\n}\n\n/**\n * Updates save button state based on mapping validation\n */\nfunction updateSaveButtonState() {\n  const saveBtn = document.getElementById(\"saveHeadersBtn\");\n  if (!saveBtn) {\n    console.error(\n      \"CRITICAL ERROR: Save button not found when trying to update state\"\n    );\n    return;\n  }\n\n  const mapping = AppState.currentSuggestedMapping || [];\n  const hasDate = mapping.includes(\"Date\");\n  const hasAmount = mapping.includes(\"Income\") || mapping.includes(\"Expenses\");\n\n  console.log(\n    \"CRITICAL: Updating save button state - mapping:\",\n    mapping,\n    \"hasDate:\",\n    hasDate,\n    \"hasAmount:\",\n    hasAmount\n  );\n\n  // ULTRA AGGRESSIVE FIX: Always enable the button with complete override\n  saveBtn.disabled = false;\n  saveBtn.removeAttribute(\"disabled\");\n  saveBtn.style.pointerEvents = \"auto\";\n  saveBtn.style.cursor = \"pointer\";\n  saveBtn.style.opacity = \"1\";\n  saveBtn.style.background =\n    \"linear-gradient(135deg, #4CAF50 0%, #45a049 100%)\";\n  saveBtn.style.color = \"white\";\n  saveBtn.classList.remove(\"disabled\");\n  saveBtn.classList.add(\"primary-btn\");\n\n  // Force override any potential conflicting styles\n  saveBtn.style.setProperty(\"pointer-events\", \"auto\", \"important\");\n  saveBtn.style.setProperty(\"cursor\", \"pointer\", \"important\");\n  saveBtn.style.setProperty(\"opacity\", \"1\", \"important\");\n\n  saveBtn.title =\n    hasDate && hasAmount\n      ? \"Ready to import\"\n      : \"Click to configure mapping (Date and Income/Expenses needed)\";\n\n  console.log(\n    \"CRITICAL: Save button ULTRA FORCE ENABLED with complete styling override\"\n  );\n  console.log(\"CRITICAL: Button properties after update:\", {\n    disabled: saveBtn.disabled,\n    pointerEvents: saveBtn.style.pointerEvents,\n    cursor: saveBtn.style.cursor,\n    opacity: saveBtn.style.opacity,\n    className: saveBtn.className,\n  });\n}\n\n/**\n * Saves headers and merges the file\n */\nfunction saveHeadersAndMergeFile(modal) {\n  console.log(\"CRITICAL: saveHeadersAndMergeFile function called\");\n\n  try {\n    // Get the mappings\n    const mapping = AppState.currentSuggestedMapping;\n    console.log(\"CRITICAL: Current mapping:\", mapping);\n\n    if (!mapping || !Array.isArray(mapping)) {\n      console.error(\"CRITICAL ERROR: Invalid mapping state\");\n      showToast(\"Error: Invalid mapping state\", \"error\");\n      return;\n    }\n\n    // Validate required fields\n    const hasDate = mapping.includes(\"Date\");\n    const hasAmount =\n      mapping.includes(\"Income\") || mapping.includes(\"Expenses\");\n    console.log(\n      \"CRITICAL: Mapping validation - hasDate:\",\n      hasDate,\n      \"hasAmount:\",\n      hasAmount\n    );\n\n    if (!hasDate || !hasAmount) {\n      console.log(\"CRITICAL: Mapping validation failed\");\n      showToast(\n        \"You must map at least Date and either Income or Expenses fields\",\n        \"error\"\n      );\n      return;\n    }\n\n    // FIXED: Validate only one Date column is mapped\n    const dateColumns = mapping.filter((field) => field === \"Date\");\n    if (dateColumns.length > 1) {\n      console.log(\"CRITICAL: Multiple Date columns mapped\");\n      showToast(\"Only one column can be mapped as Date\", \"error\");\n      return;\n    }\n\n    // Get row indices and currency\n    const headerRowInput = document.getElementById(\"headerRowInput\");\n    const dataRowInput = document.getElementById(\"dataRowInput\");\n    const currencySelect = document.getElementById(\"fileCurrency\");\n\n    if (!headerRowInput || !dataRowInput) {\n      console.error(\"CRITICAL ERROR: Row input fields not found\");\n      showToast(\"Could not find row input fields\", \"error\");\n      return;\n    }\n\n    const headerRowIndex = parseInt(headerRowInput.value, 10) - 1;\n    const dataRowIndex = parseInt(dataRowInput.value, 10) - 1;\n    const currency = currencySelect ? currencySelect.value : \"USD\";\n\n    console.log(\n      \"CRITICAL: Processing with headerRowIndex:\",\n      headerRowIndex,\n      \"dataRowIndex:\",\n      dataRowIndex,\n      \"currency:\",\n      currency\n    );\n\n    // CRITICAL FIX: Generate signature and save mapping\n    const finalSignature = generateFileSignature(\n      AppState.currentFileName,\n      AppState.currentFileData,\n      mapping\n    );\n\n    console.log(\"CRITICAL: Generated signature:\", finalSignature);\n\n    // CRITICAL FIX: Save mapping with correct structure expected by findMappingBySignature\n    saveHeadersAndFormat(\n      finalSignature,\n      mapping,\n      AppState.currentFileName,\n      headerRowIndex,\n      dataRowIndex,\n      currency\n    );\n\n    console.log(\n      \"CRITICAL: Saved mapping with signature:\",\n      finalSignature,\n      \"mapping:\",\n      mapping\n    );\n\n    // Add merged file\n    console.log(\"CRITICAL: Calling addMergedFile...\");\n    addMergedFile(\n      AppState.currentFileData,\n      mapping,\n      AppState.currentFileName,\n      finalSignature,\n      headerRowIndex,\n      dataRowIndex,\n      currency\n    );\n\n    console.log(\"CRITICAL: Successfully added merged file\");\n\n    // Close modal and show success message\n    modal.close();\n    showToast(\"File merged successfully and mapping saved!\", \"success\");\n  } catch (error) {\n    console.error(\"CRITICAL ERROR: Error saving headers:\", error);\n    showToast(\"Error saving mappings: \" + error.message, \"error\");\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\ui\\filters\\advancedFilters.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":54,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":54,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1613,1661],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":493,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":493,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15953,16043],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":496,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":496,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16046,16138],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":502,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":502,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16181,16271],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":505,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":505,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16274,16330],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":530,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":530,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16855,17032],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":541,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":541,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17283,17388],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":563,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":563,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17965,18074],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":567,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":567,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18156,18205],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":574,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":574,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18384,18454],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":578,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":578,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18475,18591],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'saveFilterPreset' is defined but never used.","line":1147,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":1147,"endColumn":26},{"ruleId":"no-unused-vars","severity":1,"message":"'saveFilterPreferences' is defined but never used.","line":1171,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":1171,"endColumn":31},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1179,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1179,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[35339,35399],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1187,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1187,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[35623,35672],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1215,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1215,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[36522,36632],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1243,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1243,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[37336,37443],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1255,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1255,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[37564,37624],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1262,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1262,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[37833,37882],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1284,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1284,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[38367,38477],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AppState } from \"../../core/appState.js\";\nimport { parseToISODate, formatDateToDDMMYYYY } from \"../../utils/dateUtils.js\";\nimport { CURRENCIES } from \"../../constants/currencies.js\";\nimport { DEFAULT_CATEGORIES } from \"../../constants/categories.js\";\nimport { showModal } from \"../modalManager.js\";\n\n/**\n * Get categories for dropdown from current state or fallback to defaults\n */\nfunction getCategoriesForDropdown() {\n  // If we have categories in AppState, use them (from Category Manager or transactions)\n  if (AppState.categories && Object.keys(AppState.categories).length > 0) {\n    return Object.keys(AppState.categories);\n  }\n\n  // If we have transactions, extract unique categories from them\n  if (AppState.transactions && AppState.transactions.length > 0) {\n    const categoriesFromTransactions = [\n      ...new Set(\n        AppState.transactions\n          .map((tx) => tx.category)\n          .filter((category) => category && category.trim() !== \"\")\n      ),\n    ].sort((a, b) => a.localeCompare(b));\n\n    if (categoriesFromTransactions.length > 0) {\n      return categoriesFromTransactions;\n    }\n  }\n\n  // Fallback to default categories\n  return Object.keys(DEFAULT_CATEGORIES);\n}\n\n// Current filter state\nconst currentFilters = {\n  dateRange: \"all\",\n  customStartDate: null,\n  customEndDate: null,\n  categories: [],\n  minAmount: null,\n  maxAmount: null,\n  searchText: \"\",\n  currency: \"all\",\n};\n\n// Track if event listeners have been set up to prevent duplication\nlet eventListenersInitialized = false;\n\n/**\n * Initialize advanced filters\n */\nexport function initializeAdvancedFilters() {\n  console.log(\"Initializing advanced filters...\");\n\n  // Load saved filter preferences\n  loadFilterPreferences();\n\n  // Set up event listeners only once\n  if (!eventListenersInitialized) {\n    setupFilterEventListeners();\n    eventListenersInitialized = true;\n  }\n\n  // Initialize filter status with current transaction count\n  const transactions = AppState.transactions || [];\n  updateFilterStatus(transactions.length, transactions.length);\n\n  // Update category dropdown with current categories\n  setTimeout(() => {\n    updateCategoryFilterOptions();\n  }, 100);\n}\n\n/**\n * Create advanced filter section HTML\n */\nexport function createAdvancedFilterSection() {\n  const currencies = [\n    ...new Set(\n      (AppState.transactions || []).map((tx) => tx.currency).filter(Boolean)\n    ),\n  ].sort((a, b) => a.localeCompare(b));\n  const savedPresets = JSON.parse(\n    localStorage.getItem(\"filterPresets\") || \"{}\"\n  );\n  const presetNames = Object.keys(savedPresets);\n\n  return `\n    <div class=\"advanced-filters\">\n      <div class=\"filter-section\">\n        <div class=\"filter-header\">\n          <h4>≡ƒöì Advanced Filters</h4>\n          <div class=\"filter-preset-section\">\n            <select id=\"presetSelector\" class=\"preset-selector\">\n              <option value=\"\">Choose Saved Preset</option>\n              ${presetNames\n                .map((name) => `<option value=\"${name}\">≡ƒôï ${name}</option>`)\n                .join(\"\")}\n            </select>\n            <button type=\"button\" id=\"saveFilterPresetBtn\" class=\"btn preset-btn\" title=\"Save current filters as preset\">\n              ≡ƒÆ╛ Save Preset\n            </button>\n            ${\n              presetNames.length > 0\n                ? `\n              <button type=\"button\" id=\"managePresetsBtn\" class=\"btn preset-btn\" title=\"Manage saved presets\">\n                ΓÜÖ∩╕Å Manage\n              </button>\n            `\n                : \"\"\n            }\n          </div>\n        </div>\n\n        <div class=\"filter-grid\">\n          <!-- Date Range Section -->\n          <div class=\"filter-card\">\n            <div class=\"filter-card-header\">\n              <span class=\"filter-icon\">≡ƒôà</span>\n              <label>Date Range</label>\n            </div>\n            <div class=\"filter-card-content\">\n              <select id=\"dateRangePreset\" class=\"filter-select modern-select\">\n                <option value=\"all\">All Time</option>\n                <option value=\"today\">Today</option>\n                <option value=\"yesterday\">Yesterday</option>\n                <option value=\"last7days\">Last 7 Days</option>\n                <option value=\"last30days\">Last 30 Days</option>\n                <option value=\"thisWeek\">This Week</option>\n                <option value=\"lastWeek\">Last Week</option>\n                <option value=\"thisMonth\">This Month</option>\n                <option value=\"lastMonth\">Last Month</option>\n                <option value=\"thisQuarter\">This Quarter</option>\n                <option value=\"thisYear\">This Year</option>\n                <option value=\"custom\">Custom Range</option>\n              </select>\n\n              <div class=\"custom-date-inputs\" style=\"display: none;\">\n                <div class=\"date-input-group\">\n                  <label>From</label>\n                  <input type=\"text\" id=\"customStartDate\" class=\"filter-input date-field\" placeholder=\"dd/mm/yyyy\">\n                </div>\n                <div class=\"date-input-group\">\n                  <label>To</label>\n                  <input type=\"text\" id=\"customEndDate\" class=\"filter-input date-field\" placeholder=\"dd/mm/yyyy\">\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- Amount Range Section -->\n          <div class=\"filter-card\">\n            <div class=\"filter-card-header\">\n              <span class=\"filter-icon\">≡ƒÆ░</span>\n              <label>Amount Range</label>\n            </div>\n            <div class=\"filter-card-content\">\n              <div class=\"amount-inputs\">\n                <div class=\"amount-input-group\">\n                  <label>Min</label>\n                  <input type=\"number\" id=\"minAmount\" class=\"filter-input modern-input\" placeholder=\"0.00\" step=\"0.01\" min=\"0\">\n                </div>\n                <div class=\"amount-input-group\">\n                  <label>Max</label>\n                  <input type=\"number\" id=\"maxAmount\" class=\"filter-input modern-input\" placeholder=\"0.00\" step=\"0.01\" min=\"0\">\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- Currency Section -->\n          <div class=\"filter-card\">\n            <div class=\"filter-card-header\">\n              <span class=\"filter-icon\">≡ƒÆ▒</span>\n              <label>Currency</label>\n            </div>\n            <div class=\"filter-card-content\">\n              <select id=\"currencyFilter\" class=\"filter-select modern-select\">\n                <option value=\"all\">All Currencies</option>\n                ${currencies\n                  .map((currency) => {\n                    const currencyData = CURRENCIES[currency] || {};\n                    const symbol = currencyData.symbol || \"≡ƒÆ▒\";\n                    const name = currencyData.name || currency;\n                    return `<option value=\"${currency}\">${symbol} ${currency} - ${name}</option>`;\n                  })\n                  .join(\"\")}\n              </select>\n            </div>\n          </div>\n\n          <!-- Search Section -->\n          <div class=\"filter-card\">\n            <div class=\"filter-card-header\">\n              <span class=\"filter-icon\">≡ƒöì</span>\n              <label>Search</label>\n            </div>\n            <div class=\"filter-card-content\">\n              <div class=\"search-input-wrapper\">\n                <input type=\"text\" id=\"descriptionSearch\" class=\"filter-input search-input modern-input\"\n                       placeholder=\"Search descriptions...\" autocomplete=\"off\">\n                <button type=\"button\" class=\"search-clear-btn\" title=\"Clear search\">├ù</button>\n              </div>\n            </div>\n          </div>\n\n          <!-- Categories Section -->\n          <div class=\"filter-card category-card\">\n            <div class=\"filter-card-header\">\n              <span class=\"filter-icon\">≡ƒÅ╖∩╕Å</span>\n              <label>Categories</label>\n            </div>\n            <div class=\"filter-card-content\">\n              <div class=\"category-filter-container\">\n                <select class=\"category-select-btn modern-select filter-select\" id=\"categorySelectBtn\">\n                  <option value=\"all\">All Categories</option>\n                  ${getCategoriesForDropdown()\n                    .map(\n                      (category) => `\n                  <option value=\"${category}\">${category}</option>\n                  `\n                    )\n                    .join(\"\")}\n                </select>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Action Buttons -->\n        <div class=\"filter-actions\">\n          <button type=\"button\" id=\"applyFiltersBtn\" class=\"btn primary-btn action-btn\">\n            Γ£¿ Apply Filters\n          </button>\n          <button type=\"button\" id=\"clearAllFiltersBtn\" class=\"btn secondary-btn action-btn\">\n            ≡ƒº╣ Clear All\n          </button>\n          <div class=\"filter-status\" id=\"filterStatus\">\n            <span class=\"status-text\">Loading filters...</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Setup event listeners for all filter controls\n */\nfunction setupFilterEventListeners() {\n  // Date range preset change\n  document.addEventListener(\"change\", (e) => {\n    if (e.target.id === \"dateRangePreset\") {\n      handleDateRangePresetChange(e.target.value);\n    }\n  });\n\n  // Custom date inputs\n  document.addEventListener(\"change\", (e) => {\n    if (e.target.id === \"customStartDate\" || e.target.id === \"customEndDate\") {\n      handleCustomDateChange();\n    }\n  });\n\n  // Amount range inputs\n  document.addEventListener(\"input\", (e) => {\n    if (e.target.id === \"minAmount\" || e.target.id === \"maxAmount\") {\n      handleAmountRangeChange();\n    }\n  });\n\n  // Description search with debounce\n  let searchTimeout;\n  document.addEventListener(\"input\", (e) => {\n    if (e.target.id === \"descriptionSearch\") {\n      clearTimeout(searchTimeout);\n      searchTimeout = setTimeout(() => {\n        handleDescriptionSearch(e.target.value);\n      }, 300);\n    }\n  });\n\n  // Search clear button\n  document.addEventListener(\"click\", (e) => {\n    if (e.target.classList.contains(\"search-clear-btn\")) {\n      const searchInput = document.getElementById(\"descriptionSearch\");\n      if (searchInput) {\n        searchInput.value = \"\";\n        handleDescriptionSearch(\"\");\n      }\n    }\n  });\n\n  // Category selection change\n  document.addEventListener(\"change\", (e) => {\n    if (e.target.id === \"categorySelectBtn\") {\n      handleCategorySelection(e.target.value);\n    }\n  });\n\n  // Currency filter\n  document.addEventListener(\"change\", (e) => {\n    if (e.target.id === \"currencyFilter\") {\n      handleCurrencyFilter(e.target.value);\n    }\n  });\n\n  // Filter action buttons\n  document.addEventListener(\"click\", (e) => {\n    if (e.target.id === \"applyFiltersBtn\") {\n      applyCurrentFilters();\n    } else if (e.target.id === \"clearAllFiltersBtn\") {\n      clearAllFilters();\n    } else if (e.target.id === \"saveFilterPresetBtn\") {\n      showSavePresetModal();\n    } else if (e.target.id === \"managePresetsBtn\") {\n      showManagePresetsModal();\n    }\n  });\n\n  // Preset selector change\n  document.addEventListener(\"change\", (e) => {\n    if (e.target.id === \"presetSelector\") {\n      if (e.target.value) {\n        loadFilterPreset(e.target.value);\n      }\n    }\n  });\n}\n\n/**\n * Handle date range preset changes\n */\nfunction handleDateRangePresetChange(preset) {\n  currentFilters.dateRange = preset;\n\n  const customRangeElements = document.querySelectorAll(\".custom-date-range\");\n\n  if (preset === \"custom\") {\n    customRangeElements.forEach((el) => (el.style.display = \"flex\"));\n  } else {\n    customRangeElements.forEach((el) => (el.style.display = \"none\"));\n\n    // Calculate date range based on preset\n    const { startDate, endDate } = calculateDateRange(preset);\n    currentFilters.customStartDate = startDate;\n    currentFilters.customEndDate = endDate;\n\n    // FIXED: Update the custom date inputs with formatted dates\n    const startDateInput = document.getElementById(\"customStartDate\");\n    const endDateInput = document.getElementById(\"customEndDate\");\n\n    if (startDateInput && startDate) {\n      startDateInput.value = formatDateToDDMMYYYY(startDate.toISOString());\n    }\n    if (endDateInput && endDate) {\n      endDateInput.value = formatDateToDDMMYYYY(endDate.toISOString());\n    }\n  }\n\n  applyCurrentFilters();\n}\n\n/**\n * Calculate date range based on preset\n */\nfunction calculateDateRange(preset) {\n  const now = new Date();\n  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n\n  switch (preset) {\n    case \"today\":\n      return { startDate: today, endDate: today };\n\n    case \"yesterday\": {\n      const yesterday = new Date(today);\n      yesterday.setDate(yesterday.getDate() - 1);\n      return { startDate: yesterday, endDate: yesterday };\n    }\n\n    case \"last7days\": {\n      const last7 = new Date(today);\n      last7.setDate(last7.getDate() - 7);\n      return { startDate: last7, endDate: today };\n    }\n\n    case \"last30days\": {\n      const last30 = new Date(today);\n      last30.setDate(last30.getDate() - 30);\n      return { startDate: last30, endDate: today };\n    }\n\n    case \"thisWeek\": {\n      const startOfWeek = new Date(today);\n      startOfWeek.setDate(today.getDate() - today.getDay());\n      return { startDate: startOfWeek, endDate: today };\n    }\n\n    case \"lastWeek\": {\n      const lastWeekStart = new Date(today);\n      lastWeekStart.setDate(today.getDate() - today.getDay() - 7);\n      const lastWeekEnd = new Date(lastWeekStart);\n      lastWeekEnd.setDate(lastWeekStart.getDate() + 6);\n      return { startDate: lastWeekStart, endDate: lastWeekEnd };\n    }\n\n    case \"thisMonth\": {\n      const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n      return { startDate: startOfMonth, endDate: today };\n    }\n\n    case \"lastMonth\": {\n      const lastMonthStart = new Date(now.getFullYear(), now.getMonth() - 1, 1);\n      const lastMonthEnd = new Date(now.getFullYear(), now.getMonth(), 0);\n      return { startDate: lastMonthStart, endDate: lastMonthEnd };\n    }\n\n    case \"thisQuarter\": {\n      const quarterStart = new Date(\n        now.getFullYear(),\n        Math.floor(now.getMonth() / 3) * 3,\n        1\n      );\n      return { startDate: quarterStart, endDate: today };\n    }\n\n    case \"thisYear\": {\n      const yearStart = new Date(now.getFullYear(), 0, 1);\n      return { startDate: yearStart, endDate: today };\n    }\n\n    default:\n      return { startDate: null, endDate: null };\n  }\n}\n\n/**\n * Handle custom date input changes - FIXED: Use dd/mm/yyyy format\n */\nfunction handleCustomDateChange() {\n  const startDateInput = document.getElementById(\"customStartDate\");\n  const endDateInput = document.getElementById(\"customEndDate\");\n\n  if (startDateInput && endDateInput) {\n    // Parse dd/mm/yyyy format\n    currentFilters.customStartDate = startDateInput.value\n      ? parseToISODate(startDateInput.value)\n      : null;\n    currentFilters.customEndDate = endDateInput.value\n      ? parseToISODate(endDateInput.value)\n      : null;\n    applyCurrentFilters();\n  }\n}\n\n/**\n * Handle amount range changes\n */\nfunction handleAmountRangeChange() {\n  const minAmountInput = document.getElementById(\"minAmount\");\n  const maxAmountInput = document.getElementById(\"maxAmount\");\n\n  currentFilters.minAmount = minAmountInput?.value\n    ? parseFloat(minAmountInput.value)\n    : null;\n  currentFilters.maxAmount = maxAmountInput?.value\n    ? parseFloat(maxAmountInput.value)\n    : null;\n\n  applyCurrentFilters();\n}\n\n/**\n * Handle description search\n */\nfunction handleDescriptionSearch(searchText) {\n  currentFilters.searchText = searchText.toLowerCase().trim();\n\n  // Update clear button visibility\n  const clearBtn = document.querySelector(\".search-clear-btn\");\n  if (clearBtn) {\n    clearBtn.style.display = searchText ? \"block\" : \"none\";\n  }\n\n  applyCurrentFilters();\n}\n\n/**\n * Handle currency filter\n */\nfunction handleCurrencyFilter(currency) {\n  console.log(\n    `CRITICAL: handleCurrencyFilter called with currency: \"${currency}\"`\n  );\n  console.log(\n    `CRITICAL: Previous currency filter was: \"${currentFilters.currency}\"`\n  );\n\n  currentFilters.currency = currency;\n\n  console.log(\n    `CRITICAL: Updated currency filter to: \"${currentFilters.currency}\"`\n  );\n  console.log(\"CRITICAL: Calling applyCurrentFilters...\");\n\n  applyCurrentFilters();\n}\n\n/**\n * Handle category selection from select dropdown\n */\nfunction handleCategorySelection(selectedValue) {\n  if (selectedValue === \"all\") {\n    currentFilters.categories = [];\n  } else {\n    currentFilters.categories = [selectedValue];\n  }\n\n  applyCurrentFilters();\n}\n\n/**\n * Apply current filters to transactions\n */\nexport function applyCurrentFilters() {\n  const transactions = AppState.transactions || [];\n  const filteredTransactions = filterTransactions(transactions, currentFilters);\n\n  console.log(\n    `CRITICAL: applyCurrentFilters - filtering ${transactions.length} transactions to ${filteredTransactions.length} with currency: ${currentFilters.currency}`\n  );\n\n  // Update filter status\n  updateFilterStatus(transactions.length, filteredTransactions.length);\n\n  // Update the transaction display\n  import(\"../transactionManager.js\")\n    .then((module) => {\n      if (module.updateTransactionDisplay) {\n        console.log(\n          \"CRITICAL: Calling updateTransactionDisplay with filtered transactions\"\n        );\n        module.updateTransactionDisplay(filteredTransactions);\n      } else {\n        console.error(\n          \"CRITICAL ERROR: updateTransactionDisplay function not found in transaction manager\"\n        );\n      }\n    })\n    .catch((error) => {\n      console.error(\n        \"CRITICAL ERROR: Failed to import transaction manager:\",\n        error\n      );\n    });\n\n  // FIXED: Update charts with filtered data properly\n  setTimeout(async () => {\n    try {\n      const chartsModule = await import(\"../charts.js\");\n      if (chartsModule?.updateChartsWithFilteredData) {\n        console.log(\n          \"CRITICAL: Calling updateChartsWithFilteredData with filtered transactions\"\n        );\n        chartsModule.updateChartsWithFilteredData(filteredTransactions);\n        console.log(\"Charts updated with filtered data\");\n      } else {\n        console.error(\n          \"CRITICAL ERROR: updateChartsWithFilteredData function not found in charts module\"\n        );\n      }\n    } catch (error) {\n      console.log(\"Charts not available for filter update:\", error.message);\n    }\n  }, 100);\n\n  console.log(\n    `Applied filters: ${filteredTransactions.length} of ${transactions.length} transactions shown`\n  );\n}\n\n/**\n * Update the filter status display\n */\nfunction updateFilterStatus(totalCount, filteredCount) {\n  const statusElement = document.getElementById(\"filterStatus\");\n  if (!statusElement) return;\n\n  const statusText = statusElement.querySelector(\".status-text\");\n  if (!statusText) return;\n\n  // Count active filters\n  const activeFilters = getActiveFilterCount();\n\n  if (activeFilters === 0) {\n    statusText.textContent = `Showing all ${totalCount} transactions`;\n    statusElement.className = \"filter-status\";\n  } else if (filteredCount === totalCount) {\n    statusText.textContent = `${activeFilters} filter${\n      activeFilters > 1 ? \"s\" : \"\"\n    } active, no results filtered`;\n    statusElement.className = \"filter-status filter-active\";\n  } else {\n    statusText.textContent = `Showing ${filteredCount} of ${totalCount} transactions (${activeFilters} filter${\n      activeFilters > 1 ? \"s\" : \"\"\n    })`;\n    statusElement.className = \"filter-status filter-active\";\n  }\n}\n\n/**\n * Count the number of active filters\n */\nfunction getActiveFilterCount() {\n  let count = 0;\n\n  // Date range filter\n  if (currentFilters.dateRange && currentFilters.dateRange !== \"all\") {\n    count++;\n  }\n\n  // Categories filter\n  if (currentFilters.categories && currentFilters.categories.length > 0) {\n    count++;\n  }\n\n  // Amount range filter\n  if (currentFilters.minAmount !== null || currentFilters.maxAmount !== null) {\n    count++;\n  }\n\n  // Search filter\n  if (currentFilters.searchText && currentFilters.searchText.trim() !== \"\") {\n    count++;\n  }\n\n  // Currency filter\n  if (currentFilters.currency && currentFilters.currency !== \"all\") {\n    count++;\n  }\n\n  return count;\n}\n\n/**\n * Check if transaction passes date range filter\n */\nfunction passesDateFilter(tx, filters) {\n  if (!filters.customStartDate && !filters.customEndDate) {\n    return true;\n  }\n\n  const txDate = parseToISODate(tx.date);\n  if (!txDate) return false;\n\n  const transactionDate = new Date(txDate);\n\n  if (filters.customStartDate && transactionDate < filters.customStartDate) {\n    return false;\n  }\n\n  return !(filters.customEndDate && transactionDate > filters.customEndDate);\n}\n\n/**\n * Check if transaction passes amount range filter\n */\nfunction passesAmountFilter(tx, filters) {\n  const amount = parseFloat(tx.income || tx.expenses || 0);\n\n  return (\n    !(filters.minAmount !== null && amount < filters.minAmount) &&\n    !(filters.maxAmount !== null && amount > filters.maxAmount)\n  );\n}\n\n/**\n * Check if transaction passes category filter\n */\nfunction passesCategoryFilter(tx, filters) {\n  if (filters.categories.length === 0) {\n    return true;\n  }\n\n  const txCategory = tx.category || \"Uncategorized\";\n  return filters.categories.includes(txCategory);\n}\n\n/**\n * Check if transaction passes currency filter\n */\nfunction passesCurrencyFilter(tx, filters) {\n  return filters.currency === \"all\" || tx.currency === filters.currency;\n}\n\n/**\n * Check if transaction passes description search filter\n */\nfunction passesDescriptionFilter(tx, filters) {\n  if (!filters.searchText) {\n    return true;\n  }\n\n  const description = (tx.description || \"\").toLowerCase();\n  return description.includes(filters.searchText);\n}\n\n/**\n * Filter transactions based on current filters\n */\nexport function filterTransactions(transactions, filters = currentFilters) {\n  return transactions.filter((tx) => {\n    return (\n      passesDateFilter(tx, filters) &&\n      passesAmountFilter(tx, filters) &&\n      passesCategoryFilter(tx, filters) &&\n      passesCurrencyFilter(tx, filters) &&\n      passesDescriptionFilter(tx, filters)\n    );\n  });\n}\n\n/**\n * Clear all filters - FIXED: Reset date inputs to empty\n */\nfunction clearAllFilters() {\n  Object.assign(currentFilters, {\n    dateRange: \"all\",\n    customStartDate: null,\n    customEndDate: null,\n    categories: [],\n    minAmount: null,\n    maxAmount: null,\n    searchText: \"\",\n    currency: \"all\",\n  });\n\n  // Reset UI elements\n  const dateRangeSelect = document.getElementById(\"dateRangePreset\");\n  if (dateRangeSelect) dateRangeSelect.value = \"all\";\n\n  const customDateInputs = document.querySelectorAll(\n    \".custom-date-range input\"\n  );\n  customDateInputs.forEach((input) => (input.value = \"\"));\n\n  // FIXED: Hide custom date range inputs\n  const customRangeElements = document.querySelectorAll(\".custom-date-range\");\n  customRangeElements.forEach((el) => (el.style.display = \"none\"));\n\n  const amountInputs = document.querySelectorAll(\"#minAmount, #maxAmount\");\n  amountInputs.forEach((input) => (input.value = \"\"));\n\n  const searchInput = document.getElementById(\"descriptionSearch\");\n  if (searchInput) searchInput.value = \"\";\n\n  const clearBtn = document.querySelector(\".search-clear-btn\");\n  if (clearBtn) clearBtn.style.display = \"none\";\n\n  const currencySelect = document.getElementById(\"currencyFilter\");\n  if (currencySelect) currencySelect.value = \"all\";\n\n  // Reset category select to \"All Categories\"\n  const categorySelectBtn = document.getElementById(\"categorySelectBtn\");\n  if (categorySelectBtn) {\n    categorySelectBtn.value = \"all\";\n  }\n\n  applyCurrentFilters();\n\n  // Update status to show all transactions\n  const totalTransactions = (AppState.transactions || []).length;\n  updateFilterStatus(totalTransactions, totalTransactions);\n}\n\n/**\n * Show modal to save filter preset\n */\nfunction showSavePresetModal() {\n  const modal = showModal({\n    title: \"≡ƒÆ╛ Save Filter Preset\",\n    content: `\n      <div class=\"preset-save-modal\">\n        <div class=\"form-group\">\n          <label for=\"presetName\">Preset Name:</label>\n          <input type=\"text\" id=\"presetName\" class=\"preset-input\" placeholder=\"Enter preset name...\">\n        </div>\n        <div class=\"form-group\">\n          <label>Current Filters:</label>\n          <div class=\"current-filters-preview\">\n            ${getFiltersPreview()}\n          </div>\n        </div>\n      </div>\n    `,\n    size: \"medium\",\n    showCloseButton: true,\n    closeOnClickOutside: true,\n  });\n\n  if (modal) {\n    // Add save button\n    const saveButton = document.createElement(\"button\");\n    saveButton.textContent = \"≡ƒÆ╛ Save Preset\";\n    saveButton.className = \"btn primary-btn\";\n    saveButton.onclick = () => {\n      const nameInput = document.getElementById(\"presetName\");\n      const presetName = nameInput?.value?.trim();\n\n      if (!presetName) {\n        nameInput?.focus();\n        return;\n      }\n\n      // Save the preset\n      const savedPresets = JSON.parse(\n        localStorage.getItem(\"filterPresets\") || \"{}\"\n      );\n      savedPresets[presetName] = { ...currentFilters };\n      localStorage.setItem(\"filterPresets\", JSON.stringify(savedPresets));\n\n      // Update UI\n      updatePresetSelector();\n\n      // Show success message\n      import(\"../uiManager.js\").then((module) => {\n        if (module.showToast) {\n          module.showToast(`Filter preset \"${presetName}\" saved`, \"success\");\n        }\n      });\n\n      modal.close();\n    };\n\n    // Add cancel button\n    const cancelButton = document.createElement(\"button\");\n    cancelButton.textContent = \"Cancel\";\n    cancelButton.className = \"btn secondary-btn\";\n    cancelButton.onclick = () => modal.close();\n\n    // Add buttons to modal\n    const buttonContainer = document.createElement(\"div\");\n    buttonContainer.className = \"modal-buttons\";\n    buttonContainer.style.cssText =\n      \"display: flex; gap: 10px; justify-content: flex-end; margin-top: 20px;\";\n    buttonContainer.appendChild(saveButton);\n    buttonContainer.appendChild(cancelButton);\n    modal.content.appendChild(buttonContainer);\n\n    // Focus on input\n    setTimeout(() => {\n      const nameInput = document.getElementById(\"presetName\");\n      nameInput?.focus();\n    }, 100);\n  }\n}\n\n/**\n * Show modal to manage existing presets\n */\nfunction showManagePresetsModal() {\n  const savedPresets = JSON.parse(\n    localStorage.getItem(\"filterPresets\") || \"{}\"\n  );\n  const presetNames = Object.keys(savedPresets);\n\n  if (presetNames.length === 0) {\n    import(\"../uiManager.js\").then((module) => {\n      if (module.showToast) {\n        module.showToast(\"No saved presets found\", \"info\");\n      }\n    });\n    return;\n  }\n\n  const modal = showModal({\n    title: \"ΓÜÖ∩╕Å Manage Filter Presets\",\n    content: `\n      <div class=\"preset-manage-modal\">\n        <div class=\"preset-list\">\n          ${presetNames\n            .map(\n              (name) => `\n            <div class=\"preset-item\" data-preset=\"${name}\">\n              <div class=\"preset-info\">\n                <h4>≡ƒôï ${name}</h4>\n                <p class=\"preset-description\">${getPresetDescription(\n                  savedPresets[name]\n                )}</p>\n              </div>\n              <div class=\"preset-actions\">\n                <button class=\"btn small-btn primary-btn load-preset\" data-preset=\"${name}\">\n                  ≡ƒôÑ Load\n                </button>\n                <button class=\"btn small-btn danger-btn delete-preset\" data-preset=\"${name}\">\n                  ≡ƒùæ∩╕Å Delete\n                </button>\n              </div>\n            </div>\n          `\n            )\n            .join(\"\")}\n        </div>\n      </div>\n    `,\n    size: \"large\",\n    showCloseButton: true,\n    closeOnClickOutside: true,\n  });\n\n  if (modal) {\n    // Handle preset actions\n    modal.content.addEventListener(\"click\", (e) => {\n      const presetName = e.target.dataset.preset;\n\n      if (e.target.classList.contains(\"load-preset\")) {\n        loadFilterPreset(presetName);\n        modal.close();\n      } else if (e.target.classList.contains(\"delete-preset\")) {\n        deleteFilterPreset(presetName);\n        // Refresh the modal content\n        modal.close();\n        setTimeout(() => showManagePresetsModal(), 100);\n      }\n    });\n\n    // Add close button\n    const closeButton = document.createElement(\"button\");\n    closeButton.textContent = \"Close\";\n    closeButton.className = \"btn secondary-btn\";\n    closeButton.onclick = () => modal.close();\n\n    // Append button directly to modal content\n    const modalBody =\n      modal.content.querySelector(\".modal-body\") || modal.content;\n    if (modalBody) {\n      const buttonContainer = document.createElement(\"div\");\n      buttonContainer.className = \"modal-button-container\";\n      buttonContainer.style.cssText =\n        \"margin-top: 20px; text-align: right; padding-top: 15px; border-top: 1px solid #eee;\";\n      buttonContainer.appendChild(closeButton);\n      modalBody.appendChild(buttonContainer);\n    }\n  }\n}\n\n/**\n * Load a filter preset\n */\nfunction loadFilterPreset(presetName) {\n  const savedPresets = JSON.parse(\n    localStorage.getItem(\"filterPresets\") || \"{}\"\n  );\n  const preset = savedPresets[presetName];\n\n  if (!preset) {\n    import(\"../uiManager.js\").then((module) => {\n      if (module.showToast) {\n        module.showToast(`Preset \"${presetName}\" not found`, \"error\");\n      }\n    });\n    return;\n  }\n\n  // Load the preset into current filters\n  Object.assign(currentFilters, preset);\n\n  // Update UI to reflect loaded filters\n  updateUIFromCurrentFilters();\n\n  // Apply the filters\n  applyCurrentFilters();\n\n  import(\"../uiManager.js\").then((module) => {\n    if (module.showToast) {\n      module.showToast(`Preset \"${presetName}\" loaded`, \"success\");\n    }\n  });\n}\n\n/**\n * Delete a filter preset\n */\nfunction deleteFilterPreset(presetName) {\n  const savedPresets = JSON.parse(\n    localStorage.getItem(\"filterPresets\") || \"{}\"\n  );\n  delete savedPresets[presetName];\n  localStorage.setItem(\"filterPresets\", JSON.stringify(savedPresets));\n\n  // Update the preset selector\n  updatePresetSelector();\n\n  import(\"../uiManager.js\").then((module) => {\n    if (module.showToast) {\n      module.showToast(`Preset \"${presetName}\" deleted`, \"success\");\n    }\n  });\n}\n\n/**\n * Update the preset selector dropdown\n */\nfunction updatePresetSelector() {\n  const selector = document.getElementById(\"presetSelector\");\n  if (!selector) return;\n\n  const savedPresets = JSON.parse(\n    localStorage.getItem(\"filterPresets\") || \"{}\"\n  );\n  const presetNames = Object.keys(savedPresets);\n\n  selector.innerHTML = `\n    <option value=\"\">Choose Saved Preset</option>\n    ${presetNames\n      .map((name) => `<option value=\"${name}\">≡ƒôï ${name}</option>`)\n      .join(\"\")}\n  `;\n}\n\n/**\n * Update UI elements to reflect current filters\n */\nfunction updateUIFromCurrentFilters() {\n  // Date range\n  const dateRangeSelect = document.getElementById(\"dateRangePreset\");\n  if (dateRangeSelect) {\n    dateRangeSelect.value = currentFilters.dateRange || \"all\";\n  }\n\n  // Custom dates\n  if (currentFilters.dateRange === \"custom\") {\n    const startInput = document.getElementById(\"customStartDate\");\n    const endInput = document.getElementById(\"customEndDate\");\n    if (startInput?.value !== undefined && currentFilters.customStartDate) {\n      startInput.value = formatDateToDDMMYYYY(currentFilters.customStartDate);\n    }\n    if (endInput?.value !== undefined && currentFilters.customEndDate) {\n      endInput.value = formatDateToDDMMYYYY(currentFilters.customEndDate);\n    }\n  }\n\n  // Amount range\n  const minAmount = document.getElementById(\"minAmount\");\n  const maxAmount = document.getElementById(\"maxAmount\");\n  if (minAmount) minAmount.value = currentFilters.minAmount || \"\";\n  if (maxAmount) maxAmount.value = currentFilters.maxAmount || \"\";\n\n  // Search text\n  const searchInput = document.getElementById(\"descriptionSearch\");\n  if (searchInput) searchInput.value = currentFilters.searchText || \"\";\n\n  // Currency\n  const currencySelect = document.getElementById(\"currencyFilter\");\n  if (currencySelect) currencySelect.value = currentFilters.currency || \"all\";\n\n  // Categories - this would need more complex handling\n  // For now, just trigger the category update\n  updateCategoryButtonText();\n}\n\n/**\n * Update category filter select/button text to reflect current selection\n */\nfunction updateCategoryButtonText() {\n  const selectEl = document.getElementById('categorySelectBtn');\n  if (!selectEl) return;\n  // No custom button element, so ensure the select value matches filters\n  if (currentFilters.categories.length === 0) {\n    selectEl.value = 'all';\n    return;\n  }\n  const first = currentFilters.categories[0];\n  // If the option exists use it, else fallback to 'all'\n  const option = Array.from(selectEl.options).find(o => o.value === first);\n  selectEl.value = option ? first : 'all';\n}\n\n/**\n * Get a preview of current filters for display\n */\nfunction getFiltersPreview() {\n  const previews = [];\n\n  if (currentFilters.dateRange !== \"all\") {\n    previews.push(`≡ƒôà Date: ${currentFilters.dateRange}`);\n  }\n\n  if (currentFilters.categories?.length > 0) {\n    previews.push(\n      `≡ƒÅ╖∩╕Å Categories: ${currentFilters.categories.length} selected`\n    );\n  }\n\n  if (currentFilters.minAmount || currentFilters.maxAmount) {\n    const min = currentFilters.minAmount || \"0\";\n    const max = currentFilters.maxAmount || \"Γê₧\";\n    previews.push(`≡ƒÆ░ Amount: ${min} - ${max}`);\n  }\n\n  if (currentFilters.currency !== \"all\") {\n    previews.push(`≡ƒÆ▒ Currency: ${currentFilters.currency}`);\n  }\n\n  if (currentFilters.searchText) {\n    previews.push(`≡ƒöì Search: \"${currentFilters.searchText}\"`);\n  }\n\n  return previews.length > 0\n    ? `<ul>${previews.map((p) => \"<li>\" + p + \"</li>\").join(\"\")}</ul>`\n    : \"<p>No active filters</p>\";\n}\n\n/**\n * Get a description of a preset for the manage modal\n */\nfunction getPresetDescription(preset) {\n  const descriptions = [];\n\n  if (preset.dateRange !== \"all\") {\n    descriptions.push(`Date: ${preset.dateRange}`);\n  }\n\n  if (preset.categories?.length > 0) {\n    descriptions.push(`${preset.categories.length} categories`);\n  }\n\n  if (preset.minAmount || preset.maxAmount) {\n    descriptions.push(\"Amount range\");\n  }\n\n  if (preset.currency !== \"all\") {\n    descriptions.push(`Currency: ${preset.currency}`);\n  }\n\n  if (preset.searchText) {\n    descriptions.push(\"Search term\");\n  }\n\n  return descriptions.length > 0 ? descriptions.join(\", \") : \"No filters\";\n}\n\n/**\n * Save filter preset (legacy function - now shows deprecation warning)\n */\nfunction saveFilterPreset() {\n  console.warn(\n    \"DEPRECATED: saveFilterPreset() - Use showSavePresetModal() instead\"\n  );\n  showSavePresetModal();\n}\n\n/**\n * Load filter preferences\n */\nfunction loadFilterPreferences() {\n  const savedFilters = localStorage.getItem(\"currentFilters\");\n  if (savedFilters) {\n    try {\n      Object.assign(currentFilters, JSON.parse(savedFilters));\n    } catch (error) {\n      console.warn(\"Error loading filter preferences:\", error);\n    }\n  }\n}\n\n/**\n * Save filter preferences\n */\nfunction saveFilterPreferences() {\n  localStorage.setItem(\"currentFilters\", JSON.stringify(currentFilters));\n}\n\n/**\n * Update currency filter dropdowns to include all currencies present in transactions\n */\nexport function updateCurrencyFilterOptions() {\n  console.log(\"Updating currency filter dropdown options...\");\n\n  // Get all unique currencies from current transactions\n  const currencies = [\n    ...new Set(\n      (AppState.transactions || []).map((tx) => tx.currency).filter(Boolean)\n    ),\n  ].sort((a, b) => a.localeCompare(b));\n  console.log(\"Available currencies:\", currencies);\n\n  // Update the advanced filter currency dropdown\n  const currencyFilter = document.getElementById(\"currencyFilter\");\n  if (currencyFilter) {\n    const currentValue = currencyFilter.value;\n\n    // Rebuild options\n    currencyFilter.innerHTML = `\n      <option value=\"all\">All Currencies</option>\n      ${currencies\n        .map((currency) => {\n          const currencyData = CURRENCIES[currency] || {};\n          const symbol = currencyData.symbol || \"≡ƒÆ▒\";\n          const name = currencyData.name || currency;\n          return `<option value=\"${currency}\">${symbol} ${currency} - ${name}</option>`;\n        })\n        .join(\"\")}\n    `;\n\n    // Restore previous selection if still valid\n    if (\n      currentValue &&\n      (currentValue === \"all\" || currencies.includes(currentValue))\n    ) {\n      currencyFilter.value = currentValue;\n    }\n\n    console.log(\n      \"Updated advanced currency filter with\",\n      currencies.length,\n      \"currencies\"\n    );\n  }\n\n  // Update the basic filter currency dropdown if it exists\n  const basicCurrencyFilter = document.getElementById(\"filterCurrency\");\n  if (basicCurrencyFilter) {\n    const currentBasicValue = basicCurrencyFilter.value;\n\n    // Rebuild basic filter options\n    basicCurrencyFilter.innerHTML = `\n      <option value=\"\">All Currencies</option>\n      ${currencies\n        .map((currency) => `<option value=\"${currency}\">${currency}</option>`)\n        .join(\"\")}\n    `;\n\n    // Restore previous selection if still valid\n    if (\n      currentBasicValue &&\n      (currentBasicValue === \"\" || currencies.includes(currentBasicValue))\n    ) {\n      basicCurrencyFilter.value = currentBasicValue;\n    }\n\n    console.log(\n      \"Updated basic currency filter with\",\n      currencies.length,\n      \"currencies\"\n    );\n  }\n}\n\n/**\n * Update category filter dropdown options dynamically\n */\nexport function updateCategoryFilterOptions() {\n  console.log(\"Updating category filter dropdown options...\");\n\n  const categorySelectBtn = document.getElementById(\"categorySelectBtn\");\n  if (categorySelectBtn) {\n    const currentValue = categorySelectBtn.value;\n    const categories = getCategoriesForDropdown();\n\n    console.log(\"Available categories:\", categories);\n\n    // Rebuild options\n    categorySelectBtn.innerHTML = `\n      <option value=\"all\">All Categories</option>\n      ${categories\n        .map(\n          (category) => `\n        <option value=\"${category}\">${category}</option>\n      `\n        )\n        .join(\"\")}\n    `;\n\n    // Restore previous selection if still valid\n    if (\n      currentValue &&\n      (currentValue === \"all\" || categories.includes(currentValue))\n    ) {\n      categorySelectBtn.value = currentValue;\n    }\n\n    console.log(\n      \"Category filter dropdown updated with\",\n      categories.length,\n      \"categories\"\n    );\n  } else {\n    console.warn(\"Category filter dropdown not found\");\n  }\n}\n\n// Export current filters for external access\nexport { currentFilters };\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\ui\\formatMappingsModal.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\ui\\headerMapping.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":318,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":318,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8814,8912],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":335,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":335,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9292,9358],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":402,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":402,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11288,11358],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AppState } from \"../core/appState.js\";\nimport { showToast } from \"./uiManager.js\";\n\n/**\n * Suggests mapping for headers based on naming\n * @param {string} headerText - The header text to analyze\n * @returns {string} The suggested mapping type\n */\nexport function suggestHeaderMapping(headerText) {\n  if (!headerText) return \"ΓÇô\";\n\n  const text = String(headerText).toLowerCase().trim();\n\n  // Check each type in order of priority\n  if (/date|day|time|╫¬╫É╫¿╫Ö╫Ü|╨┤╨╡╨╜╤î/i.test(text)) return \"Date\";\n  if (/expense|debit|cost|payment|out|╫ù╫ò╫æ╫ö|gasto|ausgabe/i.test(text))\n    return \"Expenses\";\n  if (/income|credit|deposit|revenue|in|╫û╫¢╫ò╫¬|ingreso|einkommen/i.test(text))\n    return \"Income\";\n  if (/desc|note|memo|text|detail|╫¬╫É╫ò╫¿|╫ñ╫¿╫ÿ╫Ö╫¥|descrip/i.test(text))\n    return \"Description\";\n\n  return \"ΓÇô\"; // Default case\n}\n\n/**\n * Analyzes headers to suggest mappings\n * @param {Array} headers - The header row\n * @param {Object} state - State tracking object\n * @returns {Array} Suggested header mappings\n */\nexport function analyzeHeaders(headers, state) {\n  return headers.map((cell) => processHeaderCell(cell, state));\n}\n\nfunction processHeaderCell(cell, state) {\n  // Process individual header cell logic\n  if (!cell) return \"ΓÇô\";\n\n  const headerText = String(cell).toLowerCase().trim();\n\n  if (isDateHeader(headerText)) {\n    return processDateHeader(headerText, state);\n  }\n\n  if (isDescriptionHeader(headerText)) {\n    return \"Description\";\n  }\n\n  if (isExpenseHeader(headerText)) {\n    return processExpenseHeader(headerText, state);\n  }\n\n  if (isIncomeHeader(headerText)) {\n    return processIncomeHeader(headerText, state);\n  }\n\n  return \"ΓÇô\";\n}\n\n// Helper functions for header detection\nfunction isDateHeader(text) {\n  return /date|day|time|╫¬╫É╫¿╫Ö╫Ü|╨┤╨╡╨╜╤î/i.test(text);\n}\n\nfunction isDescriptionHeader(text) {\n  return /desc|note|memo|text|detail|╫¬╫É╫ò╫¿|╫ñ╫¿╫ÿ╫Ö╫¥|descrip/i.test(text);\n}\n\nfunction isExpenseHeader(text) {\n  return /expense|debit|cost|payment|out|╫ù╫ò╫æ╫ö|gasto|ausgabe/i.test(text);\n}\n\nfunction isIncomeHeader(text) {\n  return /income|credit|deposit|revenue|in|╫û╫¢╫ò╫¬|ingreso|einkommen/i.test(text);\n}\n\nfunction processDateHeader(headerText, state) {\n  if (!state.dateColumnFound) {\n    state.dateColumnFound = true;\n    return \"Date\";\n  } else {\n    // Only map one date column to be consistent with other mappings\n    return \"ΓÇô\";\n  }\n}\n\nfunction processExpenseHeader(headerText, state) {\n  if (!state.expensesColumnFound) {\n    state.expensesColumnFound = true;\n    return \"Expenses\";\n  }\n  return \"ΓÇô\";\n}\n\nfunction processIncomeHeader(headerText, state) {\n  if (!state.incomeColumnFound) {\n    state.incomeColumnFound = true;\n    return \"Income\";\n  }\n  return \"ΓÇô\";\n}\n\n/**\n * Analyzes data content for better mapping suggestions\n * @param {Array} initialMapping - Initial header mappings\n * @param {Array<Array>} data - The 2D array of data\n * @param {Object} state - State tracking object\n * @returns {Array} Improved header mappings\n */\nexport function analyzeDataContent(initialMapping, data, state) {\n  identifyDateColumns(initialMapping, data, state);\n  identifyDescriptionColumns(initialMapping, data, state);\n  identifyMonetaryColumns(initialMapping, data, state);\n\n  return initialMapping;\n}\n\n// Helper functions for data analysis\nfunction getSampleRows(data) {\n  // Get first 5 data rows (skip header)\n  return data.slice(1, 6);\n}\n\nfunction getColumnValues(rows, columnIndex) {\n  return rows\n    .map((row) => row[columnIndex])\n    .filter((val) => val !== null && val !== undefined && val !== \"\");\n}\n\nfunction isExcelDateColumn(values) {\n  // Check if values look like Excel date numbers\n  return values.every((val) => {\n    const num = parseFloat(val);\n    // FIXED: Use the same range as the centralized dateUtils\n    return !isNaN(num) && num >= 25000 && num <= 100000; // Excel date range\n  });\n}\n\nfunction isDateColumn(values) {\n  // Check if values look like dates\n  return values.some((val) => {\n    try {\n      const date = new Date(val);\n      return !isNaN(date.getTime()) && date.getFullYear() > 1900;\n    } catch {\n      return false;\n    }\n  });\n}\n\nfunction isDescriptionColumn(values) {\n  // Check if values are text-like\n  return values.some((val) => {\n    return typeof val === \"string\" && val.length > 5 && /[a-zA-Z]/.test(val);\n  });\n}\n\nfunction isMonetaryColumn(values) {\n  // Check if values are numeric\n  return values.some((val) => {\n    const num = parseFloat(val);\n    return !isNaN(num) && num !== 0;\n  });\n}\n\nfunction classifyMonetaryColumn(values, state) {\n  // Simple heuristic: positive values are income, negative are expenses\n  const hasPositive = values.some((val) => parseFloat(val) > 0);\n  const hasNegative = values.some((val) => parseFloat(val) < 0);\n\n  if (hasNegative && !hasPositive && !state.expensesColumnFound) {\n    state.expensesColumnFound = true;\n    return \"Expenses\";\n  } else if (hasPositive && !state.incomeColumnFound) {\n    state.incomeColumnFound = true;\n    return \"Income\";\n  } else if (!state.expensesColumnFound && !state.incomeColumnFound) {\n    // Fallback: if neither income nor expenses found yet, prioritize income for mixed data\n    if (hasPositive) {\n      state.incomeColumnFound = true;\n      return \"Income\";\n    } else {\n      state.expensesColumnFound = true;\n      return \"Expenses\";\n    }\n  }\n\n  return \"ΓÇô\";\n}\n\n// Helper functions to reduce complexity\nfunction identifyDateColumns(mapping, data, state) {\n  const samples = getSampleRows(data);\n\n  // Find date columns first\n  for (let i = 0; i < mapping.length; i++) {\n    if (mapping[i] !== \"ΓÇô\") continue;\n\n    const values = getColumnValues(samples, i);\n    if (values.length === 0) continue;\n\n    if (!state.dateColumnFound) {\n      if (isExcelDateColumn(values) || isDateColumn(values)) {\n        mapping[i] = \"Date\";\n        state.dateColumnFound = true;\n        break; // Stop after finding one date column\n      }\n    }\n  }\n}\n\nfunction identifyDescriptionColumns(mapping, data, state) {\n  const samples = getSampleRows(data);\n\n  if (state.descriptionColumnFound) return;\n\n  for (let i = 0; i < mapping.length; i++) {\n    if (mapping[i] !== \"ΓÇô\") continue;\n\n    const values = getColumnValues(samples, i);\n    if (!values.length) continue;\n\n    if (isDescriptionColumn(values)) {\n      mapping[i] = \"Description\";\n      state.descriptionColumnFound = true;\n      break;\n    }\n  }\n}\n\nfunction identifyMonetaryColumns(mapping, data, state) {\n  const samples = getSampleRows(data);\n\n  for (let i = 0; i < mapping.length; i++) {\n    if (mapping[i] !== \"ΓÇô\") continue;\n\n    const values = getColumnValues(samples, i);\n    if (!values.length) continue;\n\n    if (isMonetaryColumn(values)) {\n      mapping[i] = classifyMonetaryColumn(values, state);\n    }\n  }\n}\n\n/**\n * Suggests header mappings based on data analysis\n * @param {Array<Array>} data - The data to analyze\n * @returns {Array} Suggested header mappings\n */\nexport function suggestMapping(data) {\n  if (!data || data.length < 2) {\n    console.warn(\"Not enough data for header mapping\");\n    return [];\n  }\n\n  try {\n    // Track state across analyses\n    const state = {\n      dateColumnFound: false,\n      incomeColumnFound: false,\n      expensesColumnFound: false,\n    };\n\n    // Get the header row (first row by default)\n    const headerRow = data[0] || [];\n\n    // First pass: analyze headers\n    const initialMapping = analyzeHeaders(headerRow, state);\n\n    // Second pass: analyze data content to improve suggestions\n    const improvedMapping = analyzeDataContent(initialMapping, data, state);\n\n    return improvedMapping;\n  } catch (error) {\n    console.error(\"Error suggesting mapping:\", error);\n    return Array(data[0]?.length || 0).fill(\"ΓÇô\");\n  }\n}\n\n/**\n * Updates the header mapping when a dropdown is changed\n * @param {HTMLSelectElement} select - The dropdown that was changed\n * @param {number} index - The index of the column being mapped\n */\nexport function updateHeaderMapping(select, index) {\n  // Split into smaller functions\n  const newValue = select.value;\n\n  // Ensure mapping array exists with proper length\n  if (!AppState.currentSuggestedMapping) {\n    const totalSelects = document.querySelectorAll('.header-map').length ||\n      document.querySelectorAll('.header-select').length || 0;\n    AppState.currentSuggestedMapping = new Array(totalSelects).fill('\\u2013');\n  }\n\n  if (newValue === \"ΓÇô\") {\n    handlePlaceholderSelection(select, newValue);\n    return;\n  }\n\n  if (isDuplicateMapping(newValue, index)) {\n    handleDuplicateMapping(newValue, index);\n  }\n\n  updateCurrentMapping(index, newValue);\n  updateSaveButtonState();\n  checkForDuplicateHeaders();\n}\n\n// Helper functions to break down complexity\nfunction handlePlaceholderSelection(selectElement, selectedValue) {\n  const columnIndex = Array.from(selectElement.closest(\"tr\").children).indexOf(\n    selectElement.closest(\"td\")\n  );\n\n  console.log(\n    `Handling placeholder selection: ${selectedValue} for column ${columnIndex}`\n  );\n\n  // Update the current mapping array\n  if (!AppState.currentSuggestedMapping) {\n    AppState.currentSuggestedMapping = new Array(\n      document.querySelectorAll(\".header-select\").length\n    ).fill(\"ΓÇô\");\n  }\n  if (\n    columnIndex >= 0 &&\n    columnIndex < AppState.currentSuggestedMapping.length\n  ) {\n    AppState.currentSuggestedMapping[columnIndex] = selectedValue;\n  }\n\n  console.log(\"Updated mapping:\", AppState.currentSuggestedMapping);\n}\n\nfunction isDuplicateMapping(selectedValue, currentColumnIndex) {\n  const mappingRef = AppState.currentSuggestedMapping;\n  if (!mappingRef || !Array.isArray(mappingRef)) {\n    return false;\n  }\n\n  return (\n    mappingRef.findIndex((mapping, index) => {\n      return mapping === selectedValue && index !== currentColumnIndex;\n    }) !== -1\n  );\n}\n\nfunction handleDuplicateMapping(newValue, index) {\n  // Find the other column with this mapping\n  const existingIndex = AppState.currentSuggestedMapping.findIndex(\n    (val, i) => i !== index && val === newValue\n  );\n\n  if (existingIndex !== -1) {\n    // Clear the existing mapping\n    AppState.currentSuggestedMapping[existingIndex] = \"ΓÇô\";\n\n    // Update the UI for the affected dropdown\n    const existingSelect = document.querySelector(\n      `select[data-column-index=\"${existingIndex}\"]`\n    );\n    if (existingSelect) {\n      existingSelect.value = \"ΓÇô\";\n    }\n\n    showToast(\n      `Moved ${newValue} mapping from column ${existingIndex + 1} to column ${\n        index + 1\n      }`,\n      \"info\"\n    );\n  }\n}\n\nfunction updateCurrentMapping(index, newValue) {\n  AppState.currentSuggestedMapping[index] = newValue;\n}\n\nfunction updateSaveButtonState() {\n  const hasDate = AppState.currentSuggestedMapping.includes(\"Date\");\n  const hasAmount =\n    AppState.currentSuggestedMapping.includes(\"Income\") ||\n    AppState.currentSuggestedMapping.includes(\"Expenses\");\n\n  const saveButton = document.getElementById(\"saveHeadersBtn\");\n  if (saveButton) {\n    // CRITICAL FIX: Always enable the button to allow user interaction\n    saveButton.disabled = false;\n    saveButton.removeAttribute(\"disabled\");\n    saveButton.style.pointerEvents = \"auto\";\n    saveButton.style.cursor = \"pointer\";\n    saveButton.style.opacity = \"1\";\n\n    saveButton.title =\n      hasDate && hasAmount\n        ? \"Save this mapping\"\n        : \"Click to configure mapping (Date and Income/Expenses needed)\";\n\n    console.log(\"CRITICAL: headerMapping.js - Save button FORCE ENABLED\");\n  }\n}\n\nfunction checkForDuplicateHeaders() {\n  // This function can be implemented if needed to highlight duplicate mappings\n  // For now, we handle duplicates in handleDuplicateMapping\n}\n\n/**\n * Renders header preview for file upload modal\n * @param {Array<Array>} data - The file data\n * @param {string} containerId - ID of container to render into\n * @param {string} headerInputId - ID of header row input\n * @param {string} dataInputId - ID of data row input\n */\nexport function renderHeaderPreview(\n  data,\n  containerId,\n  headerInputId,\n  dataInputId\n) {\n  const container = document.getElementById(containerId);\n  if (!container) {\n    console.error(`Container ${containerId} not found`);\n    return;\n  }\n\n  // Get row indices\n  const headerRowInput = document.getElementById(headerInputId);\n  const dataRowInput = document.getElementById(dataInputId);\n\n  const headerRowIndex = headerRowInput\n    ? parseInt(headerRowInput.value, 10) - 1\n    : 0;\n  const dataRowIndex = dataRowInput ? parseInt(dataRowInput.value, 10) - 1 : 1;\n\n  // Validate indices\n  if (\n    headerRowIndex < 0 ||\n    headerRowIndex >= data.length ||\n    dataRowIndex < 0 ||\n    dataRowIndex >= data.length\n  ) {\n    container.innerHTML = \"<p>Invalid row selection</p>\";\n    return;\n  }\n\n  const headerRow = data[headerRowIndex] || [];\n  const dataRow = data[dataRowIndex] || [];\n\n  // Generate mapping suggestions\n  const suggestedMapping = suggestMapping(data);\n\n  // Create preview table\n  let html = `\n    <div class=\"preview-info\">\n      <p>Map columns to the required fields below. At minimum, you need Date and either Income or Expenses.</p>\n    </div>\n    <div class=\"preview-table-container\">\n      <table class=\"preview-table\" style=\"width: 100%; border-collapse: collapse;\">\n        <tr>\n          <th style=\"padding: 8px; border: 1px solid #ddd; background: #f5f5f5;\">Column</th>\n          ${headerRow\n            .map(\n              (_, i) =>\n                `<th style=\"padding: 8px; border: 1px solid #ddd; background: #f5f5f5;\">${\n                  i + 1\n                }</th>`\n            )\n            .join(\"\")}\n        </tr>\n        <tr>\n          <td style=\"padding: 8px; border: 1px solid #ddd; font-weight: bold;\">Header</td>\n          ${headerRow\n            .map(\n              (header) =>\n                `<td style=\"padding: 8px; border: 1px solid #ddd;\">${\n                  header || \"<em>empty</em>\"\n                }</td>`\n            )\n            .join(\"\")}\n        </tr>\n        <tr>\n          <td style=\"padding: 8px; border: 1px solid #ddd; font-weight: bold;\">Map To</td>\n          ${headerRow\n            .map((_, i) => {\n              const selected = suggestedMapping?.[i] ?? \"ΓÇô\";\n              return `\n              <td style=\"padding: 8px; border: 1px solid #ddd;\">\n                <select class=\"header-map\" data-column-index=\"${i}\" style=\"width: 100%;\">\n                  <option value=\"ΓÇô\" ${\n                    selected === \"ΓÇô\" ? \"selected\" : \"\"\n                  }>ΓÇô</option>\n                  <option value=\"Date\" ${\n                    selected === \"Date\" ? \"selected\" : \"\"\n                  }>Date</option>\n                  <option value=\"Description\" ${\n                    selected === \"Description\" ? \"selected\" : \"\"\n                  }>Description</option>\n                  <option value=\"Income\" ${\n                    selected === \"Income\" ? \"selected\" : \"\"\n                  }>Income</option>\n                  <option value=\"Expenses\" ${\n                    selected === \"Expenses\" ? \"selected\" : \"\"\n                  }>Expenses</option>\n                </select>\n              </td>\n            `;\n            })\n            .join(\"\")}\n        </tr>\n        <tr>\n          <td style=\"padding: 8px; border: 1px solid #ddd; font-weight: bold;\">Sample</td>\n          ${dataRow\n            .map(\n              (cell) =>\n                `<td style=\"padding: 8px; border: 1px solid #ddd;\">${\n                  cell || \"<em>empty</em>\"\n                }</td>`\n            )\n            .join(\"\")}\n        </tr>\n      </table>\n    </div>\n  `;\n\n  container.innerHTML = html;\n\n  // Add event listeners to dropdowns\n  setTimeout(() => {\n    const selects = container.querySelectorAll(\".header-map\");\n    selects.forEach((select, index) => {\n      select.addEventListener(\"change\", (e) => {\n        updateHeaderMapping(e.target, index);\n      });\n    });\n  }, 100);\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\ui\\mergedFilesModal.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\ui\\modalManager.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'getModalOverlay' is defined but never used.","line":15,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":25},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":48,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":48,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1182,1255],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":54,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":54,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1373,1445],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":61,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":61,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1537,1602],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":88,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":88,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2315,2364],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":93,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":93,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2540,2596],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":175,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":175,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4995,5061],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":187,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":187,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5379,5418],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":230,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":230,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6500,6576],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":234,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":234,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6654,6707],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":235,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":235,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6712,6810],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":239,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":239,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6815,6891],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Modal management module\n */\n\nlet activeModal = null;\nlet modalCreationInProgress = false;\n\n// FIXED: Cache frequently accessed DOM elements\nconst modalCache = {\n  overlay: null,\n  activeModals: new Map(),\n  eventListeners: new Map(),\n};\n\nfunction getModalOverlay() {\n  // FIXED: Cache the overlay element\n  if (!modalCache.overlay) {\n    modalCache.overlay = document.getElementById(\"modalOverlay\");\n    if (!modalCache.overlay) {\n      const overlay = document.createElement(\"div\");\n      overlay.id = \"modalOverlay\";\n      overlay.className = \"modal-overlay\";\n      overlay.style.cssText = `\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-color: rgba(0, 0, 0, 0.5);\n        display: none;\n        align-items: center;\n        justify-content: center;\n        z-index: 10001;\n      `;\n      document.body.appendChild(overlay);\n      modalCache.overlay = overlay;\n    }\n  }\n  return modalCache.overlay;\n}\n\n/**\n * Show a modal with the given options\n */\nexport function showModal(options = {}) {\n  // FIXED: Prevent multiple modals from being created simultaneously\n  if (modalCreationInProgress) {\n    console.log(\"CRITICAL: Modal creation already in progress, skipping...\");\n    return activeModal;\n  }\n\n  // FIXED: Close any existing modal before creating a new one\n  if (activeModal) {\n    console.log(\"CRITICAL: Closing existing modal before creating new one\");\n    activeModal.close();\n    activeModal = null;\n  }\n\n  modalCreationInProgress = true;\n\n  console.log(\"CRITICAL: showModal called with options:\", options);\n\n  const {\n    title = \"Modal\",\n    content = \"\",\n    size = \"medium\",\n    closeOnClickOutside = true,\n    showCloseButton = true,\n  } = options;\n\n  // CRITICAL FIX: Ensure modal container exists and is properly styled\n  let modalContainer = document.getElementById(\"modalContainer\");\n  if (!modalContainer) {\n    modalContainer = document.createElement(\"div\");\n    modalContainer.id = \"modalContainer\";\n    modalContainer.className = \"modal-container\";\n    modalContainer.style.cssText = `\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      z-index: 10000;\n      pointer-events: auto;\n      display: block;\n    `;\n    document.body.appendChild(modalContainer);\n    console.log(\"CRITICAL: Created modal container\");\n  } else {\n    // CRITICAL FIX: Ensure existing container is properly visible\n    modalContainer.style.pointerEvents = \"auto\";\n    modalContainer.style.display = \"block\";\n    console.log(\"CRITICAL: Using existing modal container\");\n  }\n\n  // Create modal overlay\n  const modalOverlay = document.createElement(\"div\");\n  modalOverlay.className = \"modal-overlay\";\n  modalOverlay.style.cssText = `\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    pointer-events: auto;\n    visibility: visible;\n    opacity: 1;\n    z-index: 10001;\n  `;\n\n  // Create modal dialog\n  const modalDialog = document.createElement(\"div\");\n  modalDialog.className = `modal-dialog modal-${size}`;\n  modalDialog.style.cssText = `\n    background-color: white;\n    border-radius: 8px;\n    max-width: ${size === \"large\" ? \"90vw\" : \"600px\"};\n    max-height: 90vh;\n    overflow: auto;\n    margin: 20px;\n    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);\n    position: relative;\n    z-index: 10002;\n  `;\n\n  // Create modal content structure\n  const modalContentWrapper = document.createElement(\"div\");\n  modalContentWrapper.className = \"modal-content\";\n\n  // Modal header\n  const modalHeader = document.createElement(\"div\");\n  modalHeader.className = \"modal-header\";\n  modalHeader.style.cssText = `\n    padding: 20px 24px 0 24px;\n    border-bottom: 1px solid #eee;\n    position: relative;\n  `;\n  modalHeader.innerHTML = `\n    <h3 class=\"modal-title\" style=\"margin: 0 0 16px 0; font-size: 1.25rem; font-weight: 600;\">${title}</h3>\n    ${\n      showCloseButton\n        ? '<button class=\"modal-close-btn\" style=\"position: absolute; top: 16px; right: 16px; background: none; border: none; font-size: 24px; cursor: pointer;\">&times;</button>'\n        : \"\"\n    }\n  `;\n\n  // Modal body\n  const modalBody = document.createElement(\"div\");\n  modalBody.className = \"modal-body\";\n  modalBody.style.cssText = `\n    padding: 24px;\n  `;\n\n  // Handle content - can be string or element\n  if (typeof content === \"string\") {\n    modalBody.innerHTML = content;\n  } else if (content instanceof Element) {\n    modalBody.appendChild(content);\n  } else {\n    console.error(\"CRITICAL ERROR: Invalid content type for modal\");\n    modalBody.innerHTML = \"<p>Error loading modal content</p>\";\n  }\n\n  // Assemble modal\n  modalContentWrapper.appendChild(modalHeader);\n  modalContentWrapper.appendChild(modalBody);\n  modalDialog.appendChild(modalContentWrapper);\n  modalOverlay.appendChild(modalDialog);\n  modalContainer.appendChild(modalOverlay);\n\n  console.log(\"CRITICAL: Modal DOM structure created and appended\");\n\n  // CRITICAL FIX: Ensure modal is visible immediately\n  modalContainer.style.pointerEvents = \"auto\";\n  modalContainer.style.display = \"block\";\n  modalOverlay.style.display = \"flex\";\n\n  // Create modal object with methods\n  const modal = {\n    element: modalOverlay,\n    content: modalBody,\n    close: () => {\n      console.log(\"CRITICAL: Closing modal\");\n      if (modalOverlay?.parentNode) {\n        modalOverlay.parentNode.removeChild(modalOverlay);\n      }\n      // CRITICAL FIX: Hide container if no more modals\n      if (modalContainer?.children.length === 0) {\n        modalContainer.style.display = \"none\";\n        modalContainer.style.pointerEvents = \"none\";\n      }\n      activeModal = null;\n      modalCreationInProgress = false;\n    },\n  };\n\n  // Set as active modal\n  activeModal = modal;\n  modalCreationInProgress = false;\n\n  // Event listeners\n  if (showCloseButton) {\n    const closeBtn = modalHeader.querySelector(\".modal-close-btn\");\n    if (closeBtn) {\n      closeBtn.addEventListener(\"click\", modal.close);\n    }\n  }\n\n  if (closeOnClickOutside) {\n    modalOverlay.addEventListener(\"click\", (e) => {\n      if (e.target === modalOverlay) {\n        modal.close();\n      }\n    });\n  }\n\n  // Handle escape key\n  const handleEscape = (e) => {\n    if (e.key === \"Escape\") {\n      modal.close();\n      document.removeEventListener(\"keydown\", handleEscape);\n    }\n  };\n  document.addEventListener(\"keydown\", handleEscape);\n\n  console.log(\"CRITICAL: Modal created successfully, returning modal object\");\n\n  // CRITICAL FIX: Force display update\n  requestAnimationFrame(() => {\n    console.log(\"CRITICAL: Modal should now be visible\");\n    console.log(\n      \"CRITICAL: Modal container display:\",\n      modalContainer.style.display\n    );\n    console.log(\"CRITICAL: Modal overlay display:\", modalOverlay.style.display);\n  });\n\n  return modal;\n}\n\n/**\n * Close all modals\n */\nexport function closeAllModals() {\n  if (activeModal) {\n    activeModal.close();\n  }\n}\n\n/**\n * Check if a modal is currently open\n */\nexport function isModalOpen() {\n  return activeModal !== null;\n}\n\n// FIXED: Cleanup function for memory management\nexport function cleanupAllModals() {\n  modalCache.activeModals.forEach(({ cleanup }) => {\n    cleanup.forEach((fn) => fn());\n  });\n  modalCache.activeModals.clear();\n  modalCache.overlay = null;\n  activeModal = null;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\ui\\revertTransaction.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":72,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":72,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2342,2385],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":75,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":75,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2422,2485],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":141,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":141,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4260,4303],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":144,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":144,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4340,4403],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AppState } from \"../core/appState.js\";\nimport { showToast } from \"./uiManager.js\";\nimport { renderTransactions } from \"./transactionManager.js\";\nimport { findTransactionById } from \"../utils/utils.js\";\n\n/**\n * Reverts a transaction to its original state by ID\n * @param {string} transactionId - ID of the transaction to revert\n */\nexport function revertTransactionById(transactionId) {\n  const tx = findTransactionById(AppState.transactions, transactionId);\n  if (!tx) {\n    showToast(\"Transaction not found\", \"error\");\n    return;\n  }\n\n  // Check if we have original data to revert to - ONLY data fields count\n  const hasOriginalData =\n    tx.originalData && Object.keys(tx.originalData).length > 0;\n\n  // If no actual data field edits, just return\n  if (!hasOriginalData) {\n    showToast(\"No data changes to revert\", \"info\");\n    return;\n  }\n\n  // Confirm with user\n  if (!confirm(\"Revert this transaction to its original state?\")) return;\n\n  // Revert actual data fields only\n  if (hasOriginalData) {\n    const original = tx.originalData;\n\n    // Only revert actual data fields, not category/currency\n    if (original.date !== undefined) tx.date = original.date;\n    if (original.description !== undefined)\n      tx.description = original.description;\n    if (original.income !== undefined) tx.income = original.income;\n    if (original.expenses !== undefined) tx.expenses = original.expenses;\n\n    // Remove edit markers\n    delete tx.originalData;\n    delete tx.edited;\n\n    showToast(\"Transaction data reverted to original\", \"success\");\n  }\n\n  // Category and currency changes are separate and don't trigger revert button\n  // Only handle them if they exist but don't show revert button for these\n  if (tx.originalCategory !== undefined) {\n    tx.category = tx.originalCategory;\n    delete tx.originalCategory;\n  }\n\n  if (tx.originalSubcategory !== undefined) {\n    tx.subcategory = tx.originalSubcategory;\n    delete tx.originalSubcategory;\n  }\n\n  // Save to localStorage\n  localStorage.setItem(\"transactions\", JSON.stringify(AppState.transactions));\n\n  // Update UI\n  renderTransactions(AppState.transactions);\n\n  // Update charts after reverting\n  setTimeout(async () => {\n    try {\n      const chartsModule = await import(\"./charts.js\");\n      if (chartsModule?.updateCharts) {\n        chartsModule.updateCharts();\n        console.log(\"Charts updated after revert\");\n      }\n    } catch (error) {\n      console.log(\"Charts not available for update:\", error.message);\n    }\n  }, 100);\n}\n\n/**\n * Helper function to perform the actual revert logic\n * @param {Object} tx - Transaction to revert\n */\nfunction performRevert(tx) {\n  const hasOriginalData =\n    tx.originalData && Object.keys(tx.originalData).length > 0;\n\n  if (!hasOriginalData) {\n    showToast(\"No data changes to revert\", \"info\");\n    return false;\n  }\n\n  if (!confirm(\"Revert this transaction to its original state?\")) return false;\n\n  const original = tx.originalData;\n  if (original.date !== undefined) tx.date = original.date;\n  if (original.description !== undefined) tx.description = original.description;\n  if (original.income !== undefined) tx.income = original.income;\n  if (original.expenses !== undefined) tx.expenses = original.expenses;\n\n  delete tx.originalData;\n  delete tx.edited;\n\n  if (tx.originalCategory !== undefined) {\n    tx.category = tx.originalCategory;\n    delete tx.originalCategory;\n  }\n\n  if (tx.originalSubcategory !== undefined) {\n    tx.subcategory = tx.originalSubcategory;\n    delete tx.originalSubcategory;\n  }\n\n  showToast(\"Transaction data reverted to original\", \"success\");\n  return true;\n}\n\n/**\n * Reverts a transaction to its original state (legacy index-based)\n * @param {number} index - Index of the transaction to revert\n */\nexport function revertTransaction(index) {\n  const tx = AppState.transactions[index];\n  if (!tx) return;\n\n  if (tx.id) {\n    revertTransactionById(tx.id);\n    return;\n  }\n\n  if (!performRevert(tx)) return;\n\n  localStorage.setItem(\"transactions\", JSON.stringify(AppState.transactions));\n  renderTransactions(AppState.transactions);\n\n  setTimeout(async () => {\n    try {\n      const chartsModule = await import(\"./charts.js\");\n      if (chartsModule?.updateCharts) {\n        chartsModule.updateCharts();\n        console.log(\"Charts updated after revert\");\n      }\n    } catch (error) {\n      console.log(\"Charts not available for update:\", error.message);\n    }\n  }, 100);\n}\n\n// Attach both functions to window for global access\nwindow.revertTransaction = revertTransaction;\nwindow.revertTransactionById = revertTransactionById;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\ui\\sidebarManager.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'darkModeToggle' is assigned a value but never used.","line":3,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":19},{"ruleId":"no-unused-vars","severity":1,"message":"'debugModeToggle' is assigned a value but never used.","line":4,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":20},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":10,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":10,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[211,256],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":18,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":18,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[396,442],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":86,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":86,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2449,2491],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":99,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":99,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2696,2739],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":145,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":145,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4223,4287],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":159,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":159,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4763,4833],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":161,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":161,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4886,4943],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":174,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":174,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5444,5555],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":179,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":179,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5612,5670],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":191,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":191,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6024,6095],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":193,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":193,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6148,6206],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":200,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":200,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6427,6485],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":229,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":229,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7424,7484],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":243,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":243,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7959,8033],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":245,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":245,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8086,8147],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":258,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":258,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8648,8763],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":263,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":263,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8820,8882],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":275,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":275,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9236,9335],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":280,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":280,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9388,9450],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":287,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":287,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9671,9728],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":295,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":295,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9916,10032],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":321,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":321,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10675,10809],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":341,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":341,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11370,11437],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":422,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":422,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13971,14013],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":482,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":482,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15445,15499],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":669,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":669,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[21264,21336],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":674,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":674,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[21441,21495],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":692,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":692,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[21964,22011],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":721,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":721,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[22846,22885],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'resetToDefaultCategories' is defined but never used.","line":753,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":753,"endColumn":40},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":758,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":758,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[23873,23978],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":780,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":780,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[24477,24585],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'waitForConsoleLogger' is defined but never used.","line":804,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":804,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AppState } from \"../core/appState.js\";\n// Module variables\nlet darkModeToggle = null;\nlet debugModeToggle = null;\n\n/**\n * Sets up the sidebar functionality\n */\nexport function setupSidebarManager() {\n  console.log(\"Setting up sidebar manager...\");\n\n  try {\n    // Initialize components in order\n    initializeHamburgerMenu();\n    initializeToggles();\n    initializeActionButtons();\n\n    console.log(\"Sidebar manager setup complete\");\n  } catch (error) {\n    console.error(\"Error setting up sidebar manager:\", error);\n  }\n}\n\n/**\n * Initialize hamburger menu functionality\n */\nfunction initializeHamburgerMenu() {\n  const hamburgerMenu = document.getElementById(\"hamburgerMenu\");\n  const sidebar = document.getElementById(\"sidebar\");\n  const sidebarOverlay = document.getElementById(\"sidebarOverlay\");\n  const mainContent = document.getElementById(\"mainContent\");\n\n  if (!hamburgerMenu || !sidebar || !sidebarOverlay) {\n    console.warn(\"Required sidebar elements not found\");\n    return;\n  }\n\n  // FIXED: Remove existing event listeners by cloning the element\n  const newHamburgerMenu = hamburgerMenu.cloneNode(true);\n  hamburgerMenu.parentNode.replaceChild(newHamburgerMenu, hamburgerMenu);\n\n  // FIXED: Remove existing overlay listeners\n  const newSidebarOverlay = sidebarOverlay.cloneNode(true);\n  sidebarOverlay.parentNode.replaceChild(newSidebarOverlay, sidebarOverlay);\n\n  // Toggle sidebar on hamburger click\n  newHamburgerMenu.addEventListener(\"click\", (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const isOpen = sidebar.classList.contains(\"open\");\n    if (isOpen) {\n      closeSidebar();\n    } else {\n      openSidebar();\n    }\n  });\n\n  // Close sidebar when overlay is clicked\n  newSidebarOverlay.addEventListener(\"click\", closeSidebar);\n\n  // Close sidebar on escape key\n  document.addEventListener(\"keydown\", (e) => {\n    if (e.key === \"Escape\" && sidebar.classList.contains(\"open\")) {\n      closeSidebar();\n    }\n  });\n\n  function openSidebar() {\n    sidebar.classList.add(\"open\");\n    newSidebarOverlay.classList.add(\"active\");\n    newHamburgerMenu.classList.add(\"active\");\n    if (mainContent) {\n      mainContent.classList.add(\"sidebar-open\");\n    }\n  }\n\n  function closeSidebar() {\n    sidebar.classList.remove(\"open\");\n    newSidebarOverlay.classList.remove(\"active\");\n    newHamburgerMenu.classList.remove(\"active\");\n    if (mainContent) {\n      mainContent.classList.remove(\"sidebar-open\");\n    }\n  }\n\n  console.log(\"Hamburger menu initialized\");\n}\n\n/**\n * Initialize toggle switches\n */\nfunction initializeToggles() {\n  // Initialize dark mode toggle\n  initializeDarkModeToggle();\n\n  // Initialize debug mode toggle\n  initializeDebugModeToggle();\n\n  console.log(\"Toggle switches initialized\");\n}\n\n/**\n * Initialize debug mode toggle with proper event handling\n */\nfunction initializeDebugModeToggle() {\n  const debugModeToggle = document.getElementById(\"debugModeToggle\");\n  if (!debugModeToggle) {\n    console.warn(\"Debug mode toggle not found\");\n    return;\n  }\n\n  // Get current state from localStorage\n  const isDebugMode = localStorage.getItem(\"debugMode\") === \"true\";\n\n  // Remove any existing event listeners\n  const newToggle = debugModeToggle.cloneNode(true);\n  debugModeToggle.parentNode.replaceChild(newToggle, debugModeToggle);\n\n  // FIXED: Set initial state AFTER cloning to ensure the new element has the correct state\n  newToggle.checked = isDebugMode;\n  document.body.classList.toggle(\"debug-mode\", isDebugMode);\n  updateDebugVisibility(isDebugMode);\n\n  // Add the event listener ONLY to the checkbox input\n  newToggle.addEventListener(\"change\", (e) => {\n    const isEnabled = e.target.checked;\n    document.body.classList.toggle(\"debug-mode\", isEnabled);\n    localStorage.setItem(\"debugMode\", isEnabled);\n    updateDebugVisibility(isEnabled);\n\n    // Re-initialize debug button listeners if debug mode is enabled\n    if (isEnabled) {\n      setTimeout(() => {\n        // FIXED: Re-initialize debug buttons when debug mode is enabled\n        initializeDebugButtons();\n\n        import(\"../utils/debug.js\").then((module) => {\n          if (module.attachDebugFunctions) {\n            module.attachDebugFunctions();\n          }\n        });\n      }, 100);\n    }\n\n    console.log(`Debug mode ${isEnabled ? \"enabled\" : \"disabled\"}`);\n  });\n\n  // FIXED: Add click listeners to toggle switch visual elements to make them clickable\n  const toggleContainer = newToggle.parentNode;\n  const slider = toggleContainer.querySelector(\".slider\");\n\n  // FIXED: Also add click listener to the label to ensure visual state updates\n  const label = document.querySelector('label[for=\"debugModeToggle\"]');\n\n  if (label) {\n    label.addEventListener(\"click\", (e) => {\n      e.preventDefault();\n      e.stopPropagation();\n      console.log(\"Debug label clicked, current state:\", newToggle.checked);\n      newToggle.checked = !newToggle.checked;\n      console.log(\"Debug label new state:\", newToggle.checked);\n      // Trigger the same enhanced behavior as toggle clicks\n      newToggle.dispatchEvent(new Event(\"change\", { bubbles: true }));\n      newToggle.dispatchEvent(new Event(\"input\", { bubbles: true }));\n    });\n  }\n\n  if (toggleContainer?.classList.contains(\"toggle-switch\")) {\n    toggleContainer.addEventListener(\"click\", (e) => {\n      // Prevent double triggering if clicking the checkbox itself\n      if (e.target !== newToggle) {\n        e.preventDefault();\n        e.stopPropagation();\n        console.log(\n          \"Debug toggle container clicked, current state:\",\n          newToggle.checked\n        );\n        newToggle.checked = !newToggle.checked;\n        console.log(\"Debug toggle new state:\", newToggle.checked);\n        // Use both change and input events to ensure CSS updates\n        newToggle.dispatchEvent(new Event(\"change\", { bubbles: true }));\n        newToggle.dispatchEvent(new Event(\"input\", { bubbles: true }));\n      }\n    });\n  }\n\n  if (slider) {\n    slider.addEventListener(\"click\", (e) => {\n      e.preventDefault();\n      e.stopPropagation();\n      console.log(\"Debug slider clicked, current state:\", newToggle.checked);\n      newToggle.checked = !newToggle.checked;\n      console.log(\"Debug slider new state:\", newToggle.checked);\n      // Use both change and input events to ensure CSS updates\n      newToggle.dispatchEvent(new Event(\"change\", { bubbles: true }));\n      newToggle.dispatchEvent(new Event(\"input\", { bubbles: true }));\n    });\n  }\n\n  console.log(\"Debug mode toggle initialized successfully\");\n}\n\n/**\n * Initialize dark mode toggle\n */\nfunction initializeDarkModeToggle() {\n  const darkModeToggle = document.getElementById(\"darkModeToggle\");\n  if (!darkModeToggle) {\n    console.warn(\"Dark mode toggle not found\");\n    return;\n  }\n\n  // Get current state from localStorage\n  const isDarkMode = localStorage.getItem(\"darkMode\") === \"true\";\n\n  // Remove any existing event listeners\n  const newToggle = darkModeToggle.cloneNode(true);\n  darkModeToggle.parentNode.replaceChild(newToggle, darkModeToggle);\n\n  // FIXED: Set initial state AFTER cloning to ensure the new element has the correct state\n  newToggle.checked = isDarkMode;\n  document.body.classList.toggle(\"dark-mode\", isDarkMode);\n\n  // Add event listener ONLY to the checkbox input\n  newToggle.addEventListener(\"change\", (e) => {\n    const isDark = e.target.checked;\n    document.body.classList.toggle(\"dark-mode\", isDark);\n    localStorage.setItem(\"darkMode\", isDark);\n    console.log(`Dark mode ${isDark ? \"enabled\" : \"disabled\"}`);\n  });\n\n  // FIXED: Add click listeners to toggle switch visual elements to make them clickable\n  const toggleContainer = newToggle.parentNode;\n  const slider = toggleContainer.querySelector(\".slider\");\n\n  // FIXED: Also add click listener to the label to ensure visual state updates\n  const label = document.querySelector('label[for=\"darkModeToggle\"]');\n\n  if (label) {\n    label.addEventListener(\"click\", (e) => {\n      e.preventDefault();\n      e.stopPropagation();\n      console.log(\"Dark mode label clicked, current state:\", newToggle.checked);\n      newToggle.checked = !newToggle.checked;\n      console.log(\"Dark mode label new state:\", newToggle.checked);\n      // Trigger the same enhanced behavior as toggle clicks\n      newToggle.dispatchEvent(new Event(\"change\", { bubbles: true }));\n      newToggle.dispatchEvent(new Event(\"input\", { bubbles: true }));\n    });\n  }\n\n  if (toggleContainer?.classList.contains(\"toggle-switch\")) {\n    toggleContainer.addEventListener(\"click\", (e) => {\n      // Prevent double triggering if clicking the checkbox itself\n      if (e.target !== newToggle) {\n        e.preventDefault();\n        e.stopPropagation();\n        console.log(\n          \"Dark mode toggle container clicked, current state:\",\n          newToggle.checked\n        );\n        newToggle.checked = !newToggle.checked;\n        console.log(\"Dark mode toggle new state:\", newToggle.checked);\n        // Use both change and input events to ensure CSS updates\n        newToggle.dispatchEvent(new Event(\"change\", { bubbles: true }));\n        newToggle.dispatchEvent(new Event(\"input\", { bubbles: true }));\n      }\n    });\n  }\n\n  if (slider) {\n    slider.addEventListener(\"click\", (e) => {\n      e.preventDefault();\n      e.stopPropagation();\n      console.log(\n        \"Dark mode slider clicked, current state:\",\n        newToggle.checked\n      );\n      newToggle.checked = !newToggle.checked;\n      console.log(\"Dark mode slider new state:\", newToggle.checked);\n      // Use both change and input events to ensure CSS updates\n      newToggle.dispatchEvent(new Event(\"change\", { bubbles: true }));\n      newToggle.dispatchEvent(new Event(\"input\", { bubbles: true }));\n    });\n  }\n\n  console.log(\"Dark mode toggle initialized successfully\");\n}\n\n/**\n * Updates debug element visibility based on debug mode state\n */\nfunction updateDebugVisibility(isDebugMode) {\n  const debugElements = document.querySelectorAll(\".debug-only\");\n  console.log(\n    `Found ${debugElements.length} debug elements to ${\n      isDebugMode ? \"show\" : \"hide\"\n    }`\n  );\n\n  debugElements.forEach((element) => {\n    if (isDebugMode) {\n      // Show the element with proper display type\n      if (element.classList.contains(\"inline-element\")) {\n        element.style.display = \"inline-block\";\n      } else if (element.classList.contains(\"flex-element\")) {\n        element.style.display = \"flex\";\n      } else {\n        element.style.display = \"block\";\n      }\n      element.style.visibility = \"visible\";\n    } else {\n      element.style.display = \"none\";\n      element.style.visibility = \"hidden\";\n    }\n  });\n\n  // Ensure body class is correctly set\n  document.body.classList.toggle(\"debug-mode\", isDebugMode);\n\n  console.log(\n    `Debug visibility updated: ${isDebugMode ? \"shown\" : \"hidden\"} for ${\n      debugElements.length\n    } elements`\n  );\n}\n\n/**\n * Initialize action buttons\n */\nfunction initializeActionButtons() {\n  // FIXED: Handle upload button with cloning to completely remove any duplicate listeners\n  const fileUploadBtn = document.getElementById(\"fileUploadBtn\");\n  if (fileUploadBtn) {\n    // Clone the element to remove ALL existing event listeners\n    const newUploadBtn = fileUploadBtn.cloneNode(true);\n    fileUploadBtn.parentNode.replaceChild(newUploadBtn, fileUploadBtn);\n\n    // Add single clean event listener\n    newUploadBtn.addEventListener(\"click\", handleFileUploadClick);\n    console.log(\"Upload button initialized with clean event listener\");\n  }\n\n  // FIXED: Add missing category manager button handler for the main header button\n  const categoryManagerBtn = document.getElementById(\"categoryManagerBtn\");\n  if (categoryManagerBtn) {\n    categoryManagerBtn.removeEventListener(\"click\", handleCategoryManagerClick);\n    categoryManagerBtn.addEventListener(\"click\", handleCategoryManagerClick);\n  }\n\n  // FIXED: Add missing export button handler for the main header button\n  const exportBtn = document.getElementById(\"exportBtn\");\n  if (exportBtn) {\n    exportBtn.removeEventListener(\"click\", handleExportClick);\n    exportBtn.addEventListener(\"click\", handleExportClick);\n  }\n\n  // FIXED: Remove existing event listeners from other buttons to prevent double modals\n  const showMappingsBtn = document.getElementById(\"showMappingsBtn\");\n  if (showMappingsBtn) {\n    const newMappingsBtn = showMappingsBtn.cloneNode(true);\n    showMappingsBtn.parentNode.replaceChild(newMappingsBtn, showMappingsBtn);\n\n    newMappingsBtn.addEventListener(\"click\", (e) => {\n      e.preventDefault();\n      e.stopPropagation();\n      _handleShowMappings();\n    });\n  }\n\n  const showMergedFilesBtn = document.getElementById(\"showMergedFilesBtn\");\n  if (showMergedFilesBtn) {\n    const newMergedFilesBtn = showMergedFilesBtn.cloneNode(true);\n    showMergedFilesBtn.parentNode.replaceChild(\n      newMergedFilesBtn,\n      showMergedFilesBtn\n    );\n\n    newMergedFilesBtn.addEventListener(\"click\", (e) => {\n      e.preventDefault();\n      e.stopPropagation();\n      _handleShowMergedFiles();\n    });\n  }\n\n  const editCategoriesBtn = document.getElementById(\"editCategoriesSidebarBtn\");\n  if (editCategoriesBtn) {\n    const newCategoriesBtn = editCategoriesBtn.cloneNode(true);\n    editCategoriesBtn.parentNode.replaceChild(\n      newCategoriesBtn,\n      editCategoriesBtn\n    );\n\n    newCategoriesBtn.addEventListener(\"click\", (e) => {\n      e.preventDefault();\n      e.stopPropagation();\n      _handleEditCategories();\n    });\n  }\n\n  // Enhanced Category Manager Button\n  const enhancedCategoriesBtn = document.getElementById(\n    \"enhancedCategoriesBtn\"\n  );\n  if (enhancedCategoriesBtn) {\n    const newEnhancedCategoriesBtn = enhancedCategoriesBtn.cloneNode(true);\n    enhancedCategoriesBtn.parentNode.replaceChild(\n      newEnhancedCategoriesBtn,\n      enhancedCategoriesBtn\n    );\n\n    newEnhancedCategoriesBtn.addEventListener(\"click\", (e) => {\n      e.preventDefault();\n      e.stopPropagation();\n      _handleEnhancedCategories();\n    });\n  }\n\n  // Debug buttons\n  initializeDebugButtons();\n\n  console.log(\"Action buttons initialized\");\n}\n\n/**\n * Initialize debug buttons\n */\nfunction initializeDebugButtons() {\n  const debugButtons = [\n    {\n      id: \"debugFilesBtn\",\n      handler: () => {\n        import(\"../utils/debug.js\").then((module) => {\n          if (module.debugMergedFiles) {\n            module.debugMergedFiles();\n          }\n        });\n      },\n    },\n    {\n      id: \"debugSignaturesBtn\",\n      handler: () => {\n        import(\"../utils/debug.js\").then((module) => {\n          if (module.debugSignatures) {\n            module.debugSignatures();\n          }\n        });\n      },\n    },\n    {\n      id: \"debugTransactionsBtn\",\n      handler: () => {\n        import(\"../utils/debug.js\").then((module) => {\n          if (module.inspectTransactionData) {\n            module.inspectTransactionData();\n          }\n        });\n      },\n    },\n    {\n      id: \"saveLogBtn\",\n      handler: handleSaveLogClick,\n    },\n    {\n      id: \"resetAppBtn\",\n      handler: () => {\n        import(\"../utils/debug.js\").then((module) => {\n          if (module.resetApplication) {\n            module.resetApplication();\n          }\n        });\n      },\n    },\n  ];\n\n  debugButtons.forEach((button) => {\n    const element = document.getElementById(button.id);\n    if (element) {\n      // FIXED: Remove any existing listeners first to prevent duplicates\n      element.removeEventListener(\"click\", button.handler);\n      element.addEventListener(\"click\", button.handler);\n      console.log(`Debug button initialized: ${button.id}`);\n    } else {\n      console.warn(`Debug button element not found: ${button.id}`);\n    }\n  });\n}\n\n/**\n * Show mappings manager modal\n */\nfunction _handleShowMappings() {\n  const mappings = JSON.parse(\n    localStorage.getItem(\"fileFormatMappings\") || \"[]\"\n  );\n\n  const modalContent = document.createElement(\"div\");\n  modalContent.className = \"mappings-modal-content\";\n\n  // FIXED: Show current file signature properly\n  const currentSignature =\n    AppState.currentFileSignature || \"No current file signature available\";\n\n  let html = `\n    <div class=\"current-signature-section\">\n      <h4>Current File Signature</h4>\n      <div class=\"signature-display\">${currentSignature}</div>\n    </div>\n  `;\n\n  if (mappings.length === 0) {\n    html += '<div class=\"empty-state\"><p>No saved mappings found.</p></div>';\n  } else {\n    // CRITICAL FIX: Group mappings by signature and show all files that use each mapping\n    const mappingsBySignature = {};\n    mappings.forEach((mapping) => {\n      if (!mappingsBySignature[mapping.signature]) {\n        mappingsBySignature[mapping.signature] = {\n          signature: mapping.signature,\n          mapping: mapping.mapping,\n          files: [],\n          created: mapping.created,\n          lastUsed: mapping.lastUsed,\n        };\n      }\n      mappingsBySignature[mapping.signature].files.push(mapping.fileName);\n    });\n\n    const mappingsHTML = Object.values(mappingsBySignature)\n      .map((groupedMapping, index) => {\n        const fields = groupedMapping.mapping\n          ? groupedMapping.mapping.filter((m) => m !== \"ΓÇô\").join(\", \")\n          : \"No mapping\";\n        const created = groupedMapping.created\n          ? new Date(groupedMapping.created).toLocaleString()\n          : \"Unknown\";\n        const filesList = groupedMapping.files.join(\", \");\n\n        return `\n        <div class=\"mapping-item\" style=\"border: 1px solid #ddd; padding: 15px; margin: 10px 0; border-radius: 8px;\">\n          <div><strong>Mapping ${index + 1}: ${\n          groupedMapping.signature\n        }</strong></div>\n          <div><strong>Files:</strong> ${filesList}</div>\n          <div><strong>Fields:</strong> ${fields}</div>\n          <div><strong>Created:</strong> ${created}</div>\n          <button class=\"danger\" onclick=\"removeMapping(${index})\" style=\"background: #dc3545; color: white; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer; margin-top: 10px;\">Remove</button>\n        </div>\n      `;\n      })\n      .join(\"\");\n\n    html += `\n      <h3>Saved Format Mappings (${\n        Object.keys(mappingsBySignature).length\n      })</h3>\n      ${mappingsHTML}\n    `;\n  }\n\n  modalContent.innerHTML = html;\n\n  // Show modal using the modal manager\n  import(\"./modalManager.js\").then((module) => {\n    const modal = module.showModal({\n      title: \"≡ƒùé∩╕Å File Format Mappings\",\n      content: modalContent,\n      size: \"large\",\n      closeOnClickOutside: true,\n    });\n\n    // Add remove function to window temporarily for the modal\n    window.removeMapping = function (index) {\n      if (confirm(\"Are you sure you want to remove this mapping?\")) {\n        const mappingsBySignature = {};\n        mappings.forEach((mapping) => {\n          if (!mappingsBySignature[mapping.signature]) {\n            mappingsBySignature[mapping.signature] = [];\n          }\n          mappingsBySignature[mapping.signature].push(mapping);\n        });\n\n        const signatureToRemove = Object.keys(mappingsBySignature)[index];\n        const updatedMappings = mappings.filter(\n          (m) => m.signature !== signatureToRemove\n        );\n\n        localStorage.setItem(\n          \"fileFormatMappings\",\n          JSON.stringify(updatedMappings)\n        );\n        modal.close();\n        // Re-open with updated data\n        setTimeout(() => _handleShowMappings(), 100);\n      }\n    };\n  });\n}\n\n/**\n * Show merged files manager modal\n */\nfunction _handleShowMergedFiles() {\n  import(\"./fileListUI.js\")\n    .then((module) => {\n      if (module.showMergedFilesModal) {\n        module.showMergedFilesModal();\n      } else {\n        console.error(\"showMergedFilesModal function not found\");\n      }\n    })\n    .catch((err) => {\n      console.error(\"Error loading file list UI:\", err);\n      import(\"./uiManager.js\").then((uiModule) => {\n        if (uiModule.showToast) {\n          uiModule.showToast(\"Error opening file list manager\", \"error\");\n        }\n      });\n    });\n}\n\nfunction _handleEditCategories() {\n  import(\"./categoryManager.js\")\n    .then((module) => {\n      if (module.showCategoryManagerModal) {\n        module.showCategoryManagerModal();\n      } else {\n        console.error(\"showCategoryManagerModal function not found\");\n      }\n    })\n    .catch((err) => {\n      console.error(\"Error loading category manager:\", err);\n      import(\"./uiManager.js\").then((uiModule) => {\n        if (uiModule.showToast) {\n          uiModule.showToast(\"Error opening category manager\", \"error\");\n        }\n      });\n    });\n}\n\nfunction _handleEnhancedCategories() {\n  import(\"./enhancedCategoryManager.js\")\n    .then(async (module) => {\n      if (module.showEnhancedCategoryManagerModal) {\n        await module.showEnhancedCategoryManagerModal();\n      } else {\n        console.error(\"showEnhancedCategoryManagerModal function not found\");\n      }\n    })\n    .catch((err) => {\n      console.error(\"Error loading enhanced category manager:\", err);\n      import(\"./uiManager.js\").then((uiModule) => {\n        if (uiModule.showToast) {\n          uiModule.showToast(\n            \"Error opening enhanced category manager\",\n            \"error\"\n          );\n        }\n      });\n    });\n}\n\n/**\n * FIXED: File upload button click handler - prevents double file dialogs\n */\nfunction handleFileUploadClick(e) {\n  e.preventDefault();\n  e.stopPropagation();\n  console.log(\"CRITICAL: Upload button clicked - initiating file upload\");\n\n  import(\"../ui/fileUpload.js\")\n    .then((module) => {\n      if (module.createNewFileInput) {\n        console.log(\"CRITICAL: Calling createNewFileInput()\");\n        // FIXED: Don't call input.click() here - createNewFileInput() already handles the click\n        module.createNewFileInput();\n      } else {\n        console.error(\"createNewFileInput function not found\");\n      }\n    })\n    .catch((err) => {\n      console.error(\"Error loading file upload module:\", err);\n    });\n}\n\n/**\n * FIXED: Category manager button click handler\n */\nfunction handleCategoryManagerClick(e) {\n  e.preventDefault();\n  e.stopPropagation();\n  console.log(\"Category manager button clicked\");\n\n  import(\"../ui/categoryManager.js\")\n    .then((module) => {\n      if (module.showCategoryManagerModal) {\n        module.showCategoryManagerModal();\n      } else {\n        console.error(\"showCategoryManagerModal function not found\");\n      }\n    })\n    .catch((err) => {\n      console.error(\"Error loading category manager module:\", err);\n      // Fallback to alternative category modal\n      import(\"../ui/categoryModal.js\")\n        .then((fallbackModule) => {\n          if (fallbackModule.showCategoryManagerModal) {\n            fallbackModule.showCategoryManagerModal();\n          }\n        })\n        .catch((fallbackErr) => {\n          console.error(\"Error loading fallback category modal:\", fallbackErr);\n        });\n    });\n}\n\n/**\n * FIXED: Add missing save log handler for debug buttons\n */\nfunction handleSaveLogClick() {\n  console.log(\"Save log button clicked\");\n\n  try {\n    // Check if console logger is available\n    if (\n      window.saveConsoleLogs &&\n      typeof window.saveConsoleLogs === \"function\"\n    ) {\n      window.saveConsoleLogs();\n    } else {\n      // Try to wait for console logger to initialize\n      setTimeout(() => {\n        if (\n          window.saveConsoleLogs &&\n          typeof window.saveConsoleLogs === \"function\"\n        ) {\n          window.saveConsoleLogs();\n        } else {\n          console.error(\"Console logger not available\");\n          showErrorToast(\"Console logger not available\");\n        }\n      }, 100);\n    }\n  } catch (error) {\n    console.error(\"Error saving console logs:\", error);\n    showErrorToast(\"Error saving console logs\");\n  }\n}\n\n/**\n * Resets categories to default\n */\nasync function resetToDefaultCategories() {\n  try {\n    const categoryModule = await import(\"./categoryManager.js\");\n    if (categoryModule.resetToDefaultCategories) {\n      categoryModule.resetToDefaultCategories();\n      console.log(\n        \"CRITICAL: Called resetToDefaultCategories() exactly like the reset button\"\n      );\n    }\n  } catch (error) {\n    console.warn(\"Could not call resetToDefaultCategories:\", error);\n  }\n}\n\n/**\n * Handles export button click\n */\nasync function handleExportClick() {\n  try {\n    // FIXED: Check if export modal exists first, then fallback to direct export\n    try {\n      const exportModalModule = await import(\"../ui/exportManager.js\");\n      if (exportModalModule.showExportModal) {\n        exportModalModule.showExportModal();\n        return;\n      }\n    } catch (modalError) {\n      console.log(\n        \"Export modal not available, using direct export:\",\n        modalError.message\n      );\n      // Intentionally continue to fallback\n    }\n\n    // Fallback to direct export\n    const module = await import(\"../exports/exportManager.js\");\n    if (module.exportTransactionsAsCSV) {\n      module.exportTransactionsAsCSV();\n    } else {\n      console.error(\"exportTransactionsAsCSV function not found\");\n      await showErrorToast(\"Export function not available\");\n    }\n  } catch (err) {\n    console.error(\"Error loading export manager:\", err);\n    await showErrorToast(\"Error loading export function\");\n  }\n}\n\n/**\n * Waits for console logger to initialize\n */\nasync function waitForConsoleLogger() {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      if (window.saveConsoleLogs) {\n        window.saveConsoleLogs();\n        resolve();\n      } else {\n        console.error(\"Console logger failed to initialize\");\n        showErrorToast(\"Console logger not available\");\n        resolve();\n      }\n    }, 100);\n  });\n}\n\n/**\n * Shows error toast message\n */\nasync function showErrorToast(message) {\n  try {\n    const uiModule = await import(\"../ui/uiManager.js\");\n    if (uiModule.showToast) {\n      uiModule.showToast(message, \"error\");\n    }\n  } catch (error) {\n    console.error(\"Could not show error toast:\", error);\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\ui\\transactionFilters.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\ui\\transactionManager.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\ui\\transaction\\transactionCoordinator.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'updateCharts' is assigned a value but never used.","line":21,"column":55,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":67},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":22,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":22,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[712,812],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":29,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":29,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[983,1078],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":45,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":45,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1516,1617],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":65,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":65,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2135,2230],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":69,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":69,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2259,2361],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":79,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":79,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2488,2538],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":83,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":83,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2631,2769],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":93,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":93,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2973,3096],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":112,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":112,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3646,3739],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":118,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":118,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3765,3891],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":133,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":133,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4136,4197],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":138,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":138,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4351,4465],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":143,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":143,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4566,4626],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":152,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":152,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4768,4820],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":155,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":155,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4896,4952],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":159,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":159,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4972,5066],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":169,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":169,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5280,5390],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":186,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":186,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5865,5956],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":190,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":190,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5985,6100],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":207,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":207,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6348,6452],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":216,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":216,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6567,6641],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":219,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":219,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6699,6743],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":236,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":236,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7275,7402],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":265,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":265,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8084,8173],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":284,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":284,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8532,8626],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":303,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":303,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8985,9078],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":336,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":336,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9851,9942],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":357,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":357,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10418,10514],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":367,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":367,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"group"},"fix":{"range":[10636,10681],"text":""},"desc":"Remove the console.group()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":385,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":385,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11105,11209],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":389,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":389,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"groupEnd"},"fix":{"range":[11216,11235],"text":""},"desc":"Remove the console.groupEnd()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'updateCategoryCounts' is defined but never used.","line":397,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":397,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * TRANSACTION MANAGER COORDINATOR\n *\n * Main coordinator for transaction management functionality.\n * This module orchestrates the interaction between renderer, summary, table generator,\n * editor, and event handler modules.\n */\n\nimport { AppState } from \"../../core/appState.js\";\nimport {\n  ensureTransactionContainer,\n  renderFiltersSection,\n  renderTransactionTable,\n} from \"./transactionRenderer.js\";\nimport { updateTransactionSummary } from \"./transactionSummary.js\";\nimport { attachTransactionEventListeners } from \"./transactionEventHandler.js\";\n\n/**\n * Main render function - orchestrates all transaction rendering\n */\nexport function renderTransactions(transactions = [], updateCharts = false) {\n  console.log(\n    `CRITICAL: renderTransactions called with ${transactions.length} transactions`\n  );\n\n  // Always use AppState.transactions if no transactions passed\n  const actualTransactions =\n    transactions.length > 0 ? transactions : AppState.transactions || [];\n  console.log(\n    `CRITICAL: Using ${actualTransactions.length} transactions for rendering`\n  );\n\n  // Ensure all transactions have IDs before rendering\n  ensureTransactionIds(actualTransactions);\n\n  // Ensure main container exists first AND remove any duplicates\n  let container = ensureTransactionContainer();\n  if (!container) {\n    console.error(\"CRITICAL: Could not create transaction container\");\n    return;\n  }\n\n  // Apply filters to get display transactions\n  const filteredTransactions = applyFilters(actualTransactions);\n  console.log(\n    `CRITICAL: Filtered to ${filteredTransactions.length} transactions for display`\n  );\n\n  // Update summary\n  updateTransactionSummary(filteredTransactions);\n\n  // Render filters section\n  renderFiltersSection(container, actualTransactions);\n\n  // Render transaction table with proper structure\n  renderTransactionTable(container, filteredTransactions);\n\n  // Update category dropdown options from transaction data\n  setTimeout(async () => {\n    try {\n      const { updateCategoryFilterOptions } = await import(\n        \"../filters/advancedFilters.js\"\n      );\n      updateCategoryFilterOptions();\n      console.log(\n        \"CRITICAL: Category filter options updated from transaction data\"\n      );\n    } catch (error) {\n      console.log(\n        \"Info: Could not update category filter options:\",\n        error.message\n      );\n    }\n  }, 25);\n\n  // Attach event listeners after DOM update\n  setTimeout(() => {\n    attachTransactionEventListeners();\n    console.log(\"CRITICAL: Event listeners attached\");\n  }, 50);\n\n  // FIXED: NEVER update charts from here - charts are updated once in main.js\n  console.log(\n    `CRITICAL: Transaction rendering complete - displayed ${filteredTransactions.length} transactions (no chart update)`\n  );\n}\n\n/**\n * Update transaction display with filtered transactions\n * This function is called by the filter system when filters change\n */\nexport function updateTransactionDisplay(filteredTransactions) {\n  console.log(\n    `CRITICAL: updateTransactionDisplay called with ${filteredTransactions.length} filtered transactions`\n  );\n\n  try {\n    // Update the transaction summary with the filtered transactions\n    updateTransactionSummary(filteredTransactions);\n\n    // Update the transaction table to show only filtered transactions\n    const tableWrapper = document.getElementById(\"transactionTableWrapper\");\n    if (tableWrapper) {\n      renderTransactionTable(\n        { querySelector: () => tableWrapper },\n        filteredTransactions\n      );\n\n      // Re-attach event listeners after table update\n      setTimeout(() => {\n        attachTransactionEventListeners();\n        console.log(\n          \"CRITICAL: Event listeners re-attached after filter update\"\n        );\n      }, 50);\n    }\n\n    console.log(\n      `CRITICAL: Transaction display updated successfully for ${filteredTransactions.length} transactions`\n    );\n  } catch (error) {\n    console.error(\n      \"CRITICAL ERROR: Failed to update transaction display:\",\n      error\n    );\n  }\n}\n\n/**\n * Initialize transaction manager and load existing data\n */\nexport function initializeTransactionManager() {\n  console.log(\"CRITICAL: Initializing transaction manager...\");\n\n  // Render immediately without setTimeout to prevent blinking\n  const transactions = AppState.transactions || [];\n  if (transactions.length > 0) {\n    console.log(\n      `CRITICAL: Rendering ${transactions.length} existing transactions without chart updates`\n    );\n    renderTransactions(transactions, false); // FIXED: Never update charts from here\n  } else {\n    console.log(\"CRITICAL: No existing transactions to render\");\n    renderTransactions([], false);\n  }\n}\n\n/**\n * Update transactions from file upload\n */\nexport function updateTransactionsFromUpload() {\n  console.log(\"≡ƒöä UPDATING TRANSACTIONS FROM UPLOAD\");\n\n  if (!AppState.transactions || AppState.transactions.length === 0) {\n    console.log(\"Γä╣∩╕Å No transactions to update from upload\");\n    return;\n  }\n\n  console.log(\n    `≡ƒôè Processing ${AppState.transactions.length} transactions from upload`\n  );\n\n  // Ensure all transactions have proper IDs\n  ensureTransactionIds(AppState.transactions);\n\n  // Save to localStorage\n  try {\n    localStorage.setItem(\"transactions\", JSON.stringify(AppState.transactions));\n    console.log(\n      `≡ƒÆ╛ Saved ${AppState.transactions.length} transactions to localStorage after upload`\n    );\n  } catch (error) {\n    console.error(\"Γ¥î Error saving transactions after upload:\", error);\n  }\n\n  // Re-render with the new transactions\n  renderTransactions(AppState.transactions, false);\n\n  // Update category dropdown options after upload to include categories from new transactions\n  setTimeout(async () => {\n    try {\n      const { updateCategoryFilterOptions } = await import(\n        \"../filters/advancedFilters.js\"\n      );\n      updateCategoryFilterOptions();\n      console.log(\n        \"CRITICAL: Category filter options updated after file upload\"\n      );\n    } catch (error) {\n      console.log(\n        \"Info: Could not update category filter options after upload:\",\n        error.message\n      );\n    }\n  }, 100);\n\n  // Show success message\n  import(\"./uiManager.js\").then((module) => {\n    if (module.showToast) {\n      module.showToast(\n        `Loaded ${AppState.transactions.length} transactions`,\n        \"success\"\n      );\n    }\n  });\n\n  console.log(\n    `Γ£à UPLOAD UPDATE COMPLETE: ${AppState.transactions.length} transactions processed`\n  );\n}\n\n/**\n * Apply filters to transactions\n */\nfunction applyFilters(transactions = AppState.transactions || []) {\n  console.log(`≡ƒöì APPLYING FILTERS to ${transactions.length} transactions`);\n\n  if (!transactions || transactions.length === 0) {\n    console.log(\"Γä╣∩╕Å No transactions to filter\");\n    return [];\n  }\n\n  let filteredTransactions = [...transactions];\n\n  try {\n    filteredTransactions = applyDateFilter(filteredTransactions);\n    filteredTransactions = applyCategoryFilter(filteredTransactions);\n    filteredTransactions = applyCurrencyFilter(filteredTransactions);\n    filteredTransactions = applyAmountFilter(filteredTransactions);\n    filteredTransactions = applyDescriptionFilter(filteredTransactions);\n  } catch (error) {\n    console.error(\"Γ¥î Error applying filters:\", error);\n    return transactions;\n  }\n\n  console.log(\n    `Γ£à FILTER COMPLETE: ${filteredTransactions.length} of ${transactions.length} transactions match criteria`\n  );\n  return filteredTransactions;\n}\n\n/**\n * Apply date range filter\n */\nfunction applyDateFilter(transactions) {\n  const startDateInput = document.getElementById(\"startDate\");\n  const endDateInput = document.getElementById(\"endDate\");\n\n  if (!startDateInput?.value && !endDateInput?.value) {\n    return transactions;\n  }\n\n  const startDate = startDateInput?.value\n    ? new Date(startDateInput.value)\n    : null;\n  const endDate = endDateInput?.value ? new Date(endDateInput.value) : null;\n\n  const filtered = transactions.filter((tx) => {\n    const txDate = new Date(tx.date);\n    return (\n      (!startDate || txDate >= startDate) && (!endDate || txDate <= endDate)\n    );\n  });\n\n  console.log(\n    `≡ƒôà Date filter applied: ${filtered.length} transactions remaining`\n  );\n  return filtered;\n}\n\n/**\n * Apply category filter\n */\nfunction applyCategoryFilter(transactions) {\n  const categoryFilter = document.getElementById(\"categoryFilter\");\n\n  if (!categoryFilter?.value || categoryFilter.value === \"\") {\n    return transactions;\n  }\n\n  const filtered = transactions.filter(\n    (tx) => tx.category === categoryFilter.value\n  );\n  console.log(\n    `≡ƒÅ╖∩╕Å Category filter applied: ${filtered.length} transactions remaining`\n  );\n  return filtered;\n}\n\n/**\n * Apply currency filter\n */\nfunction applyCurrencyFilter(transactions) {\n  const currencyFilter = document.getElementById(\"currencyFilter\");\n\n  if (!currencyFilter?.value || currencyFilter.value === \"\") {\n    return transactions;\n  }\n\n  const filtered = transactions.filter(\n    (tx) => tx.currency === currencyFilter.value\n  );\n  console.log(\n    `≡ƒÆ▒ Currency filter applied: ${filtered.length} transactions remaining`\n  );\n  return filtered;\n}\n\n/**\n * Apply amount range filter\n */\nfunction applyAmountFilter(transactions) {\n  const amountMinInput = document.getElementById(\"amountMin\");\n  const amountMaxInput = document.getElementById(\"amountMax\");\n\n  if (!amountMinInput?.value && !amountMaxInput?.value) {\n    return transactions;\n  }\n\n  const minAmount = amountMinInput?.value\n    ? parseFloat(amountMinInput.value)\n    : null;\n  const maxAmount = amountMaxInput?.value\n    ? parseFloat(amountMaxInput.value)\n    : null;\n\n  const filtered = transactions.filter((tx) => {\n    const totalAmount =\n      (parseFloat(tx.income) || 0) + (parseFloat(tx.expenses) || 0);\n    return (\n      (!minAmount || totalAmount >= minAmount) &&\n      (!maxAmount || totalAmount <= maxAmount)\n    );\n  });\n\n  console.log(\n    `≡ƒÆ░ Amount filter applied: ${filtered.length} transactions remaining`\n  );\n  return filtered;\n}\n\n/**\n * Apply description filter\n */\nfunction applyDescriptionFilter(transactions) {\n  const descriptionFilter = document.getElementById(\"descriptionFilter\");\n\n  if (!descriptionFilter?.value || descriptionFilter.value.trim() === \"\") {\n    return transactions;\n  }\n\n  const searchTerm = descriptionFilter.value.toLowerCase().trim();\n  const filtered = transactions.filter((tx) => {\n    return tx.description?.toLowerCase().includes(searchTerm);\n  });\n\n  console.log(\n    `≡ƒô¥ Description filter applied: ${filtered.length} transactions remaining`\n  );\n  return filtered;\n}\n\n/**\n * Ensure all transactions have unique IDs\n */\nfunction ensureTransactionIds(transactions) {\n  console.group(\"≡ƒåö ENSURING TRANSACTION IDS\");\n  let idsAdded = 0;\n  let existingIds = 0;\n\n  transactions.forEach((tx, index) => {\n    if (!tx.id) {\n      tx.id = `tx_${Date.now()}_${Math.random()\n        .toString(36)\n        .substring(2, 11)}_${index}`;\n      idsAdded++;\n      // Only log when IDs are actually added, not for every transaction\n    } else {\n      existingIds++;\n    }\n  });\n\n  // Only log summary if IDs were actually added\n  if (idsAdded > 0) {\n    console.log(\n      `≡ƒåö SUMMARY: ${idsAdded} new IDs added, ${existingIds} existing IDs preserved`\n    );\n  }\n  console.groupEnd();\n\n  return transactions;\n}\n\n/**\n * Helper function to get and update category counts\n */\nfunction updateCategoryCounts(transactions) {\n  const categoryCounts = {};\n\n  transactions.forEach((tx) => {\n    const category = tx.category || \"Uncategorized\";\n    categoryCounts[category] = (categoryCounts[category] || 0) + 1;\n  });\n\n  return categoryCounts;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\ui\\transaction\\transactionEditor.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":31,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":31,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"group"},"fix":{"range":[802,848],"text":""},"desc":"Remove the console.group()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":32,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":32,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[851,902],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":33,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":33,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[905,943],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":34,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":34,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[946,989],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":38,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":38,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"groupEnd"},"fix":{"range":[1126,1145],"text":""},"desc":"Remove the console.groupEnd()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":44,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":44,"endColumn":21,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"groupEnd"},"fix":{"range":[1263,1282],"text":""},"desc":"Remove the console.groupEnd()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":62,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":62,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"groupEnd"},"fix":{"range":[1809,1828],"text":""},"desc":"Remove the console.groupEnd()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":77,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":77,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2178,2381],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":94,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":94,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2531,2596],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":95,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":95,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2599,2690],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":98,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":98,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2693,2758],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":99,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":99,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2761,2831],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":133,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":133,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3678,3771],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":144,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":144,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4001,4048],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":166,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":166,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4696,4819],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":172,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":172,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4906,5013],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'transaction' is defined but never used. Allowed unused args must match /^_/u.","line":183,"column":61,"nodeType":"Identifier","messageId":"unusedVar","endLine":183,"endColumn":72},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":185,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":185,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5285,5381],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":195,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":195,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5645,5752],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'transaction' is defined but never used. Allowed unused args must match /^_/u.","line":209,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":209,"endColumn":14},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":238,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":238,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6733,6781],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":272,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":272,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7616,7669],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":306,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":306,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8454,8545],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":322,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":322,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9065,9133],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":324,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":324,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9162,9228],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":335,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":335,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9505,9577],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":337,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":337,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9606,9676],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":354,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":354,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10339,10394],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":356,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":356,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10418,10478],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":359,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":359,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10515,10614],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":371,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":371,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10748,10840],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":382,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":382,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11086,11141],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":384,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":384,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11170,11223],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":399,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":399,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11686,11754],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":401,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":401,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11783,11849],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":440,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":440,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12749,12810],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":475,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":475,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13801,13872],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":549,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":549,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15662,15771],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":555,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":555,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15850,15947],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":590,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":590,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16834,16887],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'dateChanged' is defined but never used. Allowed unused args must match /^_/u.","line":619,"column":60,"nodeType":"Identifier","messageId":"unusedVar","endLine":619,"endColumn":71},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":622,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":622,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17837,17930],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":625,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":625,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17935,18037],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":662,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":662,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18972,19110],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":758,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":758,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[21807,21876],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":782,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":782,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[22779,22875],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":808,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":808,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[23475,23602],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":829,"column":59,"nodeType":"Identifier","messageId":"unusedVar","endLine":829,"endColumn":64},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":830,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":830,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[23986,24050],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":861,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":861,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[24973,25097],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":866,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":866,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25128,25187],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":870,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":870,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25222,25281],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":874,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":874,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25337,25395],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":893,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":893,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25817,25868],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":905,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":905,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[26179,26277],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":912,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":912,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[26398,26493],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":924,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":924,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[26823,26935],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":949,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":949,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[27461,27519],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":978,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":978,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[28275,28395],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":985,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":985,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[28516,28615],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":60,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * TRANSACTION EDITOR MODULE\n *\n * Handles transaction editing functionality including edit mode, field validation,\n * and save/revert operations. Extracted from transactionManager.js for better\n * separation of concerns.\n */\n\nimport { AppState } from \"../../core/appState.js\";\nimport { convertDDMMYYYYToISO } from \"../../utils/dateUtils.js\";\n\n/**\n * Check if a row has any changes\n */\nexport function checkRowForChanges(row) {\n  const fields = row.querySelectorAll(\n    \".edit-field:not(.currency-field):not(.category-select)\"\n  );\n  for (let field of fields) {\n    if (field.value !== field.dataset.original) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Save individual field change using transaction ID\n */\nexport function saveFieldChangeById(transactionId, fieldName, newValue) {\n  console.group(`≡ƒÆ╛ SAVING FIELD CHANGE BY ID`);\n  console.log(`≡ƒåö Transaction ID: ${transactionId}`);\n  console.log(`≡ƒô¥ Field: ${fieldName}`);\n  console.log(`≡ƒöä New Value: \"${newValue}\"`);\n\n  if (!AppState.transactions || !Array.isArray(AppState.transactions)) {\n    console.error(\"Γ¥î No transactions array in AppState\");\n    console.groupEnd();\n    return;\n  }\n\n  const transactionIndex = findTransactionById(transactionId);\n  if (transactionIndex === -1) {\n    console.groupEnd();\n    return;\n  }\n\n  const transaction = AppState.transactions[transactionIndex];\n  logTransactionInfo(transaction, transactionIndex);\n\n  prepareTransactionForEdit(transaction, fieldName);\n  updateTransactionField(transaction, fieldName, newValue);\n\n  try {\n    saveTransactionToStorage(transactionId, fieldName, transaction);\n    updateUIAfterFieldChange(transactionId, fieldName, newValue, transaction);\n    handleSpecialFieldUpdates(transactionId, fieldName, newValue);\n  } catch (error) {\n    handleSaveError(error);\n  }\n\n  console.groupEnd();\n}\n\n/**\n * Helper function to find transaction by ID\n */\nfunction findTransactionById(transactionId) {\n  const transactionIndex = AppState.transactions.findIndex(\n    (tx) => tx.id === transactionId\n  );\n\n  if (transactionIndex === -1) {\n    console.error(\n      `Γ¥î Transaction with ID ${transactionId} not found in AppState.transactions`\n    );\n    console.log(\n      `≡ƒôï Available transaction IDs:`,\n      AppState.transactions.map((tx, idx) => ({\n        index: idx,\n        id: tx.id,\n        desc: tx.description?.substring(0, 30),\n      }))\n    );\n  }\n\n  return transactionIndex;\n}\n\n/**\n * Helper function to log transaction info\n */\nfunction logTransactionInfo(transaction, transactionIndex) {\n  console.log(`Γ£ô Found transaction at index ${transactionIndex}:`);\n  console.log(\n    `  ≡ƒô¥ Description: \"${transaction.description?.substring(0, 50)}...\"`\n  );\n  console.log(`  ≡ƒÅ╖∩╕Å Current category: \"${transaction.category}\"`);\n  console.log(`  ≡ƒôé Current subcategory: \"${transaction.subcategory}\"`);\n}\n\n/**\n * Helper function to prepare transaction for editing\n */\nfunction prepareTransactionForEdit(transaction, fieldName) {\n  const isDataField = [\"date\", \"description\", \"income\", \"expenses\"].includes(\n    fieldName\n  );\n\n  if (isDataField && !transaction.originalData) {\n    transaction.originalData = {\n      date: transaction.date,\n      description: transaction.description,\n      income: transaction.income,\n      expenses: transaction.expenses,\n    };\n  }\n\n  if (!transaction.editedFields) {\n    transaction.editedFields = {};\n  }\n}\n\n/**\n * Helper function to update transaction field\n */\nfunction updateTransactionField(transaction, fieldName, newValue) {\n  if (fieldName === \"category\") {\n    updateCategoryField(transaction, newValue);\n  } else {\n    const oldValue = transaction[fieldName];\n    transaction[fieldName] = newValue;\n    console.log(\n      `≡ƒöä Updated field ${fieldName} from \"${oldValue}\" to \"${newValue}\"`\n    );\n    transaction.editedFields[fieldName] = true;\n  }\n\n  const isDataField = [\"date\", \"description\", \"income\", \"expenses\"].includes(\n    fieldName\n  );\n  if (isDataField && !transaction.edited) {\n    transaction.edited = true;\n    console.log(`Γ£Å∩╕Å Marked transaction as edited`);\n  }\n}\n\n/**\n * Helper function to update category field with subcategory handling\n */\nfunction updateCategoryField(transaction, newValue) {\n  const oldCategory = transaction.category;\n  const oldSubcategory = transaction.subcategory;\n\n  if (transaction.originalCategory === undefined) {\n    transaction.originalCategory = oldCategory;\n  }\n  if (transaction.originalSubcategory === undefined) {\n    transaction.originalSubcategory = oldSubcategory;\n  }\n\n  if (newValue.includes(\":\")) {\n    const [mainCategory, subCategory] = newValue.split(\":\");\n    transaction.category = mainCategory.trim();\n    transaction.subcategory = subCategory.trim();\n    console.log(\n      `≡ƒöä Updated category from \"${oldCategory}:${oldSubcategory}\" to \"${mainCategory}:${subCategory}\"`\n    );\n  } else {\n    transaction.category = newValue;\n    transaction.subcategory = \"\";\n    console.log(\n      `≡ƒöä Updated category from \"${oldCategory}\" to \"${newValue}\", cleared subcategory`\n    );\n  }\n\n  transaction.editedFields.category = true;\n}\n\n/**\n * Helper function to save transaction to localStorage\n */\nfunction saveTransactionToStorage(transactionId, fieldName, transaction) {\n  localStorage.setItem(\"transactions\", JSON.stringify(AppState.transactions));\n  console.log(\n    `≡ƒÆ╛ Saved transaction ${transactionId} field ${fieldName} to localStorage`\n  );\n\n  // Verify the save worked\n  const savedData = localStorage.getItem(\"transactions\");\n  if (savedData) {\n    const parsedData = JSON.parse(savedData);\n    const savedTransaction = parsedData.find((t) => t.id === transactionId);\n    if (savedTransaction) {\n      console.log(\n        `Γ£à Verified: ${fieldName} = \"${savedTransaction[fieldName]}\" in localStorage`\n      );\n    }\n  }\n}\n\n/**\n * Helper function to update UI after field change\n */\nfunction updateUIAfterFieldChange(\n  transactionId,\n  fieldName,\n  newValue,\n  transaction\n) {\n  if (fieldName === \"category\") {\n    updateCategoryDisplay(transactionId, newValue);\n  }\n\n  const isDataField = [\"date\", \"description\", \"income\", \"expenses\"].includes(\n    fieldName\n  );\n  if (isDataField) {\n    markCellAsEdited(transactionId, fieldName);\n    showRevertButton(transactionId);\n  }\n}\n\n/**\n * Helper function to update category display\n */\nfunction updateCategoryDisplay(transactionId, categoryName) {\n  const row = document.querySelector(\n    `tr[data-transaction-id=\"${transactionId}\"]`\n  );\n  if (row) {\n    const categoryCell = row.querySelector(\".category-cell\");\n    if (categoryCell && categoryName) {\n      const categoryColor = getCategoryColor(categoryName);\n      categoryCell.style.cssText = `background-color: ${categoryColor}20; border-left: 3px solid ${categoryColor};`;\n    }\n  }\n  console.log(\"≡ƒöä Category updated successfully\");\n}\n\n/**\n * Helper function to mark cell as edited\n */\nfunction markCellAsEdited(transactionId, fieldName) {\n  const row = document.querySelector(\n    `tr[data-transaction-id=\"${transactionId}\"]`\n  );\n  if (!row) return;\n\n  let cellClass;\n  if (fieldName === \"income\" || fieldName === \"expenses\") {\n    cellClass = \".amount-cell\";\n  } else if (fieldName === \"description\") {\n    cellClass = \".description-cell\";\n  } else if (fieldName === \"date\") {\n    cellClass = \".date-cell\";\n  } else {\n    cellClass = `.${fieldName}-cell`;\n  }\n\n  let cell;\n  if (fieldName === \"income\") {\n    cell = row.querySelectorAll(\".amount-cell\")[0];\n  } else if (fieldName === \"expenses\") {\n    cell = row.querySelectorAll(\".amount-cell\")[1];\n  } else {\n    cell = row.querySelector(cellClass);\n  }\n\n  if (cell) {\n    cell.classList.add(\"edited-cell\");\n    console.log(`Γ£Å∩╕Å Marked ${fieldName} cell as edited`);\n  }\n}\n\n/**\n * Helper function to show revert button\n */\nfunction showRevertButton(transactionId) {\n  const row = document.querySelector(\n    `tr[data-transaction-id=\"${transactionId}\"]`\n  );\n  if (row) {\n    const revertAllBtn = row.querySelector(\".btn-revert-all\");\n    if (revertAllBtn) {\n      revertAllBtn.style.display = \"inline-block\";\n    }\n  }\n}\n\n/**\n * Helper function to handle special field updates\n */\nfunction handleSpecialFieldUpdates(transactionId, fieldName, newValue) {\n  if (fieldName === \"currency\") {\n    handleCurrencyUpdate(transactionId, newValue);\n  } else if (fieldName === \"category\") {\n    handleCategoryUpdate(transactionId, newValue);\n  }\n}\n\n/**\n * Helper function to handle currency updates\n */\nfunction handleCurrencyUpdate(transactionId, newValue) {\n  console.log(\n    `≡ƒÆ▒ Currency changed for transaction ${transactionId} to ${newValue}`\n  );\n\n  // Update transaction summary to reflect new currency distribution\n  setTimeout(async () => {\n    try {\n      const { updateTransactionSummary } = await import(\n        \"./transactionSummary.js\"\n      );\n      // Use modern filtering approach instead of deprecated applyFilters\n      const { filterTransactions } = await import(\n        \"../filters/advancedFilters.js\"\n      );\n      const filteredTransactions = filterTransactions(AppState.transactions);\n      updateTransactionSummary(filteredTransactions);\n      console.log(\"≡ƒöä Transaction summary updated after currency change\");\n    } catch (error) {\n      console.log(\"Error updating transaction summary:\", error.message);\n    }\n  }, 100);\n\n  // Update currency filter dropdown options to include new currency\n  setTimeout(async () => {\n    try {\n      const { updateCurrencyFilterOptions } = await import(\n        \"../filters/advancedFilters.js\"\n      );\n      updateCurrencyFilterOptions();\n      console.log(\"≡ƒÆ▒ Currency filter options updated after currency change\");\n    } catch (error) {\n      console.log(\"Error updating currency filter options:\", error.message);\n    }\n  }, 150);\n\n  // Update charts to reflect currency changes in real-time\n  setTimeout(async () => {\n    try {\n      // Only update charts if chart canvases exist (charts section is visible)\n      const incomeChartCanvas = document.getElementById(\"incomeExpenseChart\");\n      const expenseChartCanvas = document.getElementById(\"expenseChart\");\n      const timelineChartCanvas = document.getElementById(\"timelineChart\");\n\n      if (incomeChartCanvas || expenseChartCanvas || timelineChartCanvas) {\n        const { updateChartsWithCurrentData } = await import(\n          \"../../charts/chartManager.js\"\n        );\n        updateChartsWithCurrentData();\n        console.log(\"≡ƒôè Charts updated after currency change\");\n      } else {\n        console.log(\"≡ƒôè Charts not visible, skipping chart update\");\n      }\n    } catch (error) {\n      console.log(\n        \"Error updating charts after currency change:\",\n        error.message\n      );\n    }\n  }, 200);\n}\n\n/**\n * Helper function to handle category updates\n */\nfunction handleCategoryUpdate(transactionId, newValue) {\n  console.log(\n    `≡ƒÅ╖∩╕Å Category changed for transaction ${transactionId} to ${newValue}`\n  );\n\n  // Update charts to reflect new category distribution\n  setTimeout(async () => {\n    try {\n      const { updateChartsWithCurrentData } = await import(\n        \"../../charts/chartManager.js\"\n      );\n      updateChartsWithCurrentData();\n      console.log(\"≡ƒôè Charts updated after category change\");\n    } catch (error) {\n      console.log(\"Error updating charts:\", error.message);\n    }\n  }, 100);\n\n  // Update transaction summary to reflect new category distribution\n  setTimeout(async () => {\n    try {\n      const { updateTransactionSummary } = await import(\n        \"./transactionSummary.js\"\n      );\n      const { filterTransactions } = await import(\n        \"../filters/advancedFilters.js\"\n      );\n      const filteredTransactions = filterTransactions(AppState.transactions);\n      updateTransactionSummary(filteredTransactions);\n      console.log(\"≡ƒöä Transaction summary updated after category change\");\n    } catch (error) {\n      console.log(\"Error updating transaction summary:\", error.message);\n    }\n  }, 150);\n}\n\n/**\n * Helper function to handle save errors\n */\nfunction handleSaveError(error) {\n  console.error(\"Γ¥î Error saving transaction:\", error);\n  import(\"../uiManager.js\").then((module) => {\n    if (module.showToast) {\n      module.showToast(\"Error saving transaction\", \"error\");\n    }\n  });\n}\n\n/**\n * Get category color helper function\n */\nfunction getCategoryColor(categoryName) {\n  if (!categoryName || !AppState.categories) return \"#cccccc\";\n\n  const categoryData = AppState.categories[categoryName];\n  if (!categoryData) return \"#cccccc\";\n\n  if (typeof categoryData === \"string\") {\n    return categoryData;\n  } else if (typeof categoryData === \"object\" && categoryData.color) {\n    return categoryData.color;\n  }\n\n  return \"#cccccc\";\n}\n\n/**\n * Save changes to a transaction using transaction ID (safer than index)\n */\nexport function saveTransactionChangesById(transactionId) {\n  console.log(`≡ƒÆ╛ SAVING BY ID: Transaction ${transactionId}`);\n\n  if (!AppState.transactions || !Array.isArray(AppState.transactions)) {\n    console.error(\"Γ¥î No transactions array in AppState\");\n    return;\n  }\n\n  // Find transaction by ID instead of relying on index\n  const transactionIndex = AppState.transactions.findIndex(\n    (tx) => tx.id === transactionId\n  );\n  if (transactionIndex === -1) {\n    console.error(`Γ¥î Transaction with ID ${transactionId} not found`);\n    return;\n  }\n\n  const transaction = AppState.transactions[transactionIndex];\n  const row = document.querySelector(\n    `tr[data-transaction-id=\"${transactionId}\"]`\n  );\n  if (!row) {\n    console.error(`Γ¥î Row not found for transaction ID ${transactionId}`);\n    return;\n  }\n\n  const fields = row.querySelectorAll(\n    \".edit-field:not(.currency-field):not(.category-select)\"\n  );\n\n  // Store original data before first edit\n  prepareTransactionForBatchEdit(transaction);\n\n  const { hasChanges, dateChanged } = processFieldChanges(fields, transaction);\n\n  if (!hasChanges) {\n    console.log(`Γä╣∩╕Å No changes detected for transaction ${transactionId}`);\n    return;\n  }\n\n  // Mark as edited and save\n  transaction.edited = true;\n  saveBatchChanges(transactionId, transaction, row, dateChanged);\n}\n\n/**\n * Helper function to prepare transaction for batch editing\n */\nfunction prepareTransactionForBatchEdit(transaction) {\n  if (!transaction.originalData) {\n    transaction.originalData = {\n      date: transaction.date,\n      description: transaction.description,\n      income: transaction.income,\n      expenses: transaction.expenses,\n    };\n  }\n\n  if (!transaction.editedFields) {\n    transaction.editedFields = {};\n  }\n}\n\n/**\n * Helper function to process field changes\n */\nfunction processFieldChanges(fields, transaction) {\n  let dateChanged = false;\n  let hasChanges = false;\n\n  fields.forEach((field) => {\n    const fieldName = field.dataset.field;\n    let newValue = field.value;\n    const originalValue = field.dataset.original;\n\n    // Skip if value hasn't changed\n    if (newValue === originalValue) return;\n\n    hasChanges = true;\n\n    // Handle date conversion for storage\n    if (fieldName === \"date\" && newValue) {\n      const result = processDateField(field, newValue);\n      if (result.success) {\n        newValue = result.isoDate;\n        dateChanged = true;\n      } else {\n        return; // Skip invalid dates\n      }\n    }\n\n    // Update the transaction\n    updateFieldInTransaction(transaction, fieldName, newValue, field);\n  });\n\n  return { hasChanges, dateChanged };\n}\n\n/**\n * Helper function to process date field conversion\n */\nfunction processDateField(field, newValue) {\n  const datePattern = /^(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})$/;\n  const match = datePattern.exec(newValue);\n\n  if (match) {\n    const day = parseInt(match[1], 10);\n    const month = parseInt(match[2], 10);\n    const year = parseInt(match[3], 10);\n\n    console.log(\n      `≡ƒöì Date input parsed: Day=${day}, Month=${month}, Year=${year} from \"${newValue}\"`\n    );\n\n    const isoDate = convertDDMMYYYYToISO(newValue);\n    if (isoDate) {\n      console.log(\n        `≡ƒöä Date converted: ${field.value} (dd/mm/yyyy) ΓåÆ ${isoDate} (ISO)`\n      );\n      return { success: true, isoDate };\n    } else {\n      console.warn(\"Invalid date format:\", newValue);\n      return { success: false };\n    }\n  } else {\n    console.warn(\"Date does not match dd/mm/yyyy format:\", newValue);\n    return { success: false };\n  }\n}\n\n/**\n * Helper function to update field in transaction\n */\nfunction updateFieldInTransaction(transaction, fieldName, newValue, field) {\n  transaction[fieldName] = newValue;\n  transaction.editedFields[fieldName] = true;\n\n  // Update the original value\n  if (fieldName === \"date\") {\n    field.dataset.original = field.value; // Keep dd/mm/yyyy format\n  } else {\n    field.dataset.original = newValue;\n  }\n\n  // Update display value\n  updateFieldDisplayValue(field, fieldName, newValue, transaction);\n\n  // Mark the cell as edited\n  const cell = field.closest(\"td\");\n  if (cell) {\n    cell.classList.add(\"edited-cell\");\n    console.log(`Γ£Å∩╕Å Marked ${fieldName} cell as edited`);\n  }\n}\n\n/**\n * Helper function to update field display value\n */\nfunction updateFieldDisplayValue(field, fieldName, newValue, transaction) {\n  const cell = field.closest(\"td\");\n  const displayValue = cell.querySelector(\".display-value\");\n  if (!displayValue) return;\n\n  if (fieldName === \"income\" || fieldName === \"expenses\") {\n    const numValue = parseFloat(newValue) || 0;\n    displayValue.textContent = numValue > 0 ? numValue.toFixed(2) : \"\";\n  } else if (fieldName === \"description\") {\n    const cleanValue = String(newValue)\n      .replace(/\\s*data-field=.*$/i, \"\")\n      .trim();\n    displayValue.textContent = cleanValue;\n    transaction[fieldName] = cleanValue;\n  } else {\n    displayValue.textContent = field.value;\n  }\n}\n\n/**\n * Helper function to save batch changes\n */\nfunction saveBatchChanges(transactionId, transaction, row, dateChanged) {\n  try {\n    localStorage.setItem(\"transactions\", JSON.stringify(AppState.transactions));\n    console.log(\n      `Γ£à TRANSACTION SAVED BY ID: ${transactionId} saved to localStorage`\n    );\n    console.log(\n      `≡ƒô¥ SAVE VERIFICATION: Transaction marked as edited = ${transaction.edited}`\n    );\n\n    // Immediate verification\n    verifyBatchSave(transactionId);\n\n    // Exit edit mode using transaction ID for reliable lookup\n    exitEditModeById(transactionId);\n\n    // Update UI\n    updateUIAfterBatchSave(row);\n\n    // Show success feedback\n    import(\"../uiManager.js\").then((module) => {\n      if (module.showToast) {\n        module.showToast(\"Transaction updated\", \"success\");\n      }\n    });\n  } catch (error) {\n    console.error(\"Error saving transaction by ID:\", error);\n    import(\"../uiManager.js\").then((module) => {\n      if (module.showToast) {\n        module.showToast(\"Error saving changes\", \"error\");\n      }\n    });\n  }\n}\n\n/**\n * Helper function to verify batch save\n */\nfunction verifyBatchSave(transactionId) {\n  const verification = localStorage.getItem(\"transactions\");\n  if (verification) {\n    const parsed = JSON.parse(verification);\n    const savedTx = parsed.find((tx) => tx.id === transactionId);\n    console.log(\n      `≡ƒöì VERIFICATION: Saved transaction has edited flag = ${\n        savedTx ? savedTx.edited : \"NOT FOUND\"\n      }`\n    );\n  }\n}\n\n/**\n * Helper function to update UI after batch save\n */\nfunction updateUIAfterBatchSave(row) {\n  // Mark row as edited\n  row.classList.add(\"edited-row\");\n\n  // Show revert-all button when edits are made\n  const revertAllBtn = row.querySelector(\".btn-revert-all\");\n  if (revertAllBtn) {\n    revertAllBtn.style.display = \"inline-block\";\n  }\n}\n\n/**\n * Enter edit mode for a specific row\n */\nexport function enterEditMode(index) {\n  const row = document.querySelector(`tr[data-transaction-index=\"${index}\"]`);\n  if (!row) return;\n\n  // Set edit mode\n  row.dataset.editMode = \"true\";\n  row.classList.add(\"editing-mode\");\n\n  // Hide display values and show input fields (except currency and category)\n  const displayValues = row.querySelectorAll(\".display-value\");\n  const editFields = row.querySelectorAll(\n    \".edit-field:not(.currency-field):not(.category-select)\"\n  );\n\n  displayValues.forEach((span) => (span.style.display = \"none\"));\n  editFields.forEach((input) => (input.style.display = \"block\"));\n\n  // Hide edit button, show save/revert buttons\n  const editBtn = row.querySelector(\".btn-edit\");\n  const saveBtn = row.querySelector(\".btn-save\");\n  const revertBtn = row.querySelector(\".btn-revert\");\n\n  editBtn.style.display = \"none\";\n  saveBtn.style.display = \"inline-block\";\n  revertBtn.style.display = \"inline-block\";\n}\n\n/**\n * Exit edit mode for a specific row\n */\nexport function exitEditMode(index) {\n  const row = document.querySelector(`tr[data-transaction-index=\"${index}\"]`);\n  if (!row) return;\n\n  // Unset edit mode\n  row.dataset.editMode = \"false\";\n  row.classList.remove(\"editing-mode\", \"has-changes\");\n\n  // Show display values and hide input fields (except currency and category)\n  const displayValues = row.querySelectorAll(\".display-value\");\n  const editFields = row.querySelectorAll(\n    \".edit-field:not(.currency-field):not(.category-select)\"\n  );\n\n  displayValues.forEach((span) => (span.style.display = \"block\"));\n  editFields.forEach((input) => (input.style.display = \"none\"));\n\n  // Show edit button, hide save/revert buttons\n  const editBtn = row.querySelector(\".btn-edit\");\n  const saveBtn = row.querySelector(\".btn-save\");\n  const revertBtn = row.querySelector(\".btn-revert\");\n\n  editBtn.style.display = \"inline-block\";\n  saveBtn.style.display = \"none\";\n  revertBtn.style.display = \"none\";\n}\n\n/**\n * Exit edit mode for a specific row using transaction ID (more reliable)\n */\nexport function exitEditModeById(transactionId) {\n  const row = document.querySelector(\n    `tr[data-transaction-id=\"${transactionId}\"]`\n  );\n  if (!row) {\n    console.warn(\n      `ΓÜá∩╕Å Row not found for transaction ID ${transactionId} in exitEditModeById`\n    );\n    return;\n  }\n\n  console.log(`≡ƒöä EXITING EDIT MODE: Transaction ID ${transactionId}`);\n\n  // Unset edit mode\n  row.dataset.editMode = \"false\";\n  row.classList.remove(\"editing-mode\", \"has-changes\");\n\n  // Show display values and hide input fields (except currency and category)\n  const displayValues = row.querySelectorAll(\".display-value\");\n  const editFields = row.querySelectorAll(\n    \".edit-field:not(.currency-field):not(.category-select)\"\n  );\n\n  displayValues.forEach((span) => (span.style.display = \"block\"));\n  editFields.forEach((input) => (input.style.display = \"none\"));\n\n  // Show edit button, hide save/revert buttons\n  const editBtn = row.querySelector(\".btn-edit\");\n  const saveBtn = row.querySelector(\".btn-save\");\n  const revertBtn = row.querySelector(\".btn-revert\"); // This is the \"Cancel changes\" button\n\n  if (editBtn) editBtn.style.display = \"inline-block\";\n  if (saveBtn) saveBtn.style.display = \"none\";\n  if (revertBtn) {\n    revertBtn.style.display = \"none\";\n    console.log(\n      `Γ£à HIDDEN: Cancel changes button (Γå╢) for transaction ${transactionId}`\n    );\n  }\n}\n\n/**\n * Revert changes to a transaction\n */\nexport function revertTransactionChanges(index) {\n  const row = document.querySelector(`tr[data-transaction-index=\"${index}\"]`);\n  if (!row) {\n    console.warn(\n      `ΓÜá∩╕Å Row not found for index ${index} in revertTransactionChanges`\n    );\n    return;\n  }\n\n  const fields = row.querySelectorAll(\n    \".edit-field:not(.currency-field):not(.category-select)\"\n  );\n\n  fields.forEach((field) => {\n    const originalValue = field.dataset.original;\n    if (originalValue !== undefined && originalValue !== null) {\n      field.value = originalValue;\n      console.log(\n        `≡ƒöä Reverted field ${\n          field.dataset.field || \"unknown\"\n        } to \"${originalValue}\"`\n      );\n    } else {\n      console.warn(\n        `ΓÜá∩╕Å No original value found for field ${\n          field.dataset.field || \"unknown\"\n        }, keeping current value`\n      );\n    }\n  });\n\n  // Exit edit mode\n  exitEditMode(index);\n}\n\n/**\n * Revert all changes to original values from file upload using transaction ID\n */\nexport function revertAllChangesToOriginal(transactionId, index) {\n  console.log(`≡ƒöä REVERTING BY ID: Transaction ${transactionId}`);\n\n  if (!AppState.transactions || !Array.isArray(AppState.transactions)) {\n    console.error(\"Γ¥î No transactions array in AppState\");\n    return;\n  }\n\n  // Find transaction by ID instead of relying on index\n  const transactionIndex = AppState.transactions.findIndex(\n    (tx) => tx.id === transactionId\n  );\n  if (transactionIndex === -1) {\n    console.error(`Γ¥î Transaction with ID ${transactionId} not found`);\n    import(\"../uiManager.js\").then((module) => {\n      if (module.showToast) {\n        module.showToast(\"Transaction not found\", \"error\");\n      }\n    });\n    return;\n  }\n\n  const transaction = AppState.transactions[transactionIndex];\n\n  // Check if we have original data to revert to\n  const hasOriginalData =\n    transaction.originalData &&\n    Object.keys(transaction.originalData).length > 0;\n  const hasEditedFields =\n    transaction.editedFields &&\n    Object.keys(transaction.editedFields).length > 0;\n\n  console.log(\n    `≡ƒöì REVERT CHECK: Original data exists = ${hasOriginalData}, Edited fields exist = ${hasEditedFields}`\n  );\n\n  if (hasOriginalData) {\n    console.log(`≡ƒôï ORIGINAL DATA:`, transaction.originalData);\n  }\n\n  if (hasEditedFields) {\n    console.log(`≡ƒô¥ EDITED FIELDS:`, transaction.editedFields);\n  }\n\n  if (!hasOriginalData && !hasEditedFields) {\n    console.log(\"Γä╣∩╕Å No original data or edited fields found\");\n    import(\"../uiManager.js\").then((module) => {\n      if (module.showToast) {\n        module.showToast(\"No changes to revert\", \"info\");\n      }\n    });\n    return;\n  }\n\n  // Confirm with user\n  if (\n    !confirm(\"Revert all changes to the original values from the file upload?\")\n  ) {\n    return;\n  }\n\n  // Revert to original data if available\n  if (hasOriginalData) {\n    const original = transaction.originalData;\n    console.log(`≡ƒöä REVERTING TO ORIGINAL:`, original);\n    transaction.date = original.date;\n    transaction.description = original.description;\n    transaction.income = original.income;\n    transaction.expenses = original.expenses;\n  }\n\n  // Clear edit tracking\n  delete transaction.originalData;\n  delete transaction.editedFields;\n  delete transaction.edited;\n\n  console.log(\n    `Γ£à REVERT COMPLETE: Transaction ${transactionId} reverted to original state`\n  );\n\n  // Save to localStorage\n  try {\n    localStorage.setItem(\"transactions\", JSON.stringify(AppState.transactions));\n    console.log(\n      `≡ƒÆ╛ REVERT SAVED: Transaction ${transactionId} saved to localStorage`\n    );\n\n    // Hide the revert-all button since there's nothing left to revert\n    const row = document.querySelector(\n      `tr[data-transaction-id=\"${transactionId}\"]`\n    );\n    if (row) {\n      const revertAllBtn = row.querySelector(\".btn-revert-all\");\n      if (revertAllBtn) {\n        revertAllBtn.style.display = \"none\";\n        console.log(\n          `≡ƒæü∩╕Å BUTTON HIDDEN: Revert-all button hidden for transaction ${transactionId}`\n        );\n      }\n    }\n\n    import(\"../uiManager.js\").then((module) => {\n      if (module.showToast) {\n        module.showToast(\"Transaction reverted successfully\", \"success\");\n      }\n    });\n  } catch (error) {\n    console.error(\"Error reverting transaction:\", error);\n    import(\"../uiManager.js\").then((module) => {\n      if (module.showToast) {\n        module.showToast(\"Error reverting transaction\", \"error\");\n      }\n    });\n  }\n}\n\n/**\n * Delete a transaction by ID\n */\nexport function deleteTransactionById(transactionId) {\n  console.log(`≡ƒùæ∩╕Å DELETING TRANSACTION: ${transactionId}`);\n\n  if (!AppState.transactions || !Array.isArray(AppState.transactions)) {\n    console.error(\"Γ¥î No transactions array in AppState\");\n    return;\n  }\n\n  // Find transaction by ID\n  const transactionIndex = AppState.transactions.findIndex(\n    (tx) => tx.id === transactionId\n  );\n  if (transactionIndex === -1) {\n    console.error(`Γ¥î Transaction with ID ${transactionId} not found`);\n    import(\"../uiManager.js\").then((module) => {\n      if (module.showToast) {\n        module.showToast(\"Transaction not found\", \"error\");\n      }\n    });\n    return;\n  }\n\n  // Confirm deletion\n  if (!confirm(\"Are you sure you want to delete this transaction?\")) {\n    return;\n  }\n\n  // Remove transaction from array\n  AppState.transactions.splice(transactionIndex, 1);\n\n  console.log(\n    `Γ£à TRANSACTION DELETED: ${transactionId}, remaining transactions: ${AppState.transactions.length}`\n  );\n\n  // Save to localStorage\n  try {\n    localStorage.setItem(\"transactions\", JSON.stringify(AppState.transactions));\n    console.log(\n      `≡ƒÆ╛ DELETE SAVED: Transaction ${transactionId} removed from localStorage`\n    );\n\n    import(\"../uiManager.js\").then((module) => {\n      if (module.showToast) {\n        module.showToast(\"Transaction deleted successfully\", \"success\");\n      }\n    });\n\n    // Trigger refresh of transaction display\n    import(\"./transactionCoordinator.js\").then((module) => {\n      if (module.refreshTransactionDisplay) {\n        module.refreshTransactionDisplay();\n      }\n    });\n  } catch (error) {\n    console.error(\"Error deleting transaction:\", error);\n    import(\"../uiManager.js\").then((module) => {\n      if (module.showToast) {\n        module.showToast(\"Error deleting transaction\", \"error\");\n      }\n    });\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\ui\\transaction\\transactionEventHandler.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":23,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":23,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[589,645],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":79,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":79,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2393,2465],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":84,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":84,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2565,2632],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":108,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":108,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3293,3334],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":124,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":124,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3728,3769],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":143,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":143,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4183,4256],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":193,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":193,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5810,5902],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":215,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":215,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6457,6578],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":239,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":239,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7100,7211],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":267,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":267,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7856,7958],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":291,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":291,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8495,8603],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":318,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":318,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9199,9302],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'saveTransactionChanges' is defined but never used.","line":326,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":326,"endColumn":32},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":360,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":360,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10296,10347],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":367,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":367,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10470,10713],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":393,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":393,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11313,11413],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":405,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":405,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11579,11654],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":426,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":426,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12113,12172],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":436,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":436,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12367,12473],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":450,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":450,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12729,12807],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":472,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":472,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13398,13536],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * TRANSACTION EVENT HANDLER MODULE\n *\n * Handles all event listeners and user interactions for transaction management.\n * Extracted from transactionManager.js for better separation of concerns.\n */\n\nimport {\n  checkRowForChanges,\n  saveFieldChangeById,\n  saveTransactionChangesById,\n  enterEditMode,\n  revertTransactionChanges,\n  revertAllChangesToOriginal,\n  deleteTransactionById,\n} from \"./transactionEditor.js\";\nimport { AppState } from \"../../core/appState.js\";\n\n/**\n * Attach event listeners to transaction table fields\n */\nexport function attachTransactionEventListeners() {\n  console.log(\"≡ƒöº Attaching transaction event listeners\");\n\n  // Bulk edit toggle\n  const bulkEditToggle = document.getElementById(\"bulkEditToggle\");\n  if (bulkEditToggle) {\n    bulkEditToggle.addEventListener(\"click\", toggleBulkEditMode);\n  }\n\n  // Select all checkbox\n  const selectAllCheckbox = document.getElementById(\"selectAllCheckbox\");\n  if (selectAllCheckbox) {\n    selectAllCheckbox.addEventListener(\"change\", toggleSelectAll);\n  }\n\n  // Individual transaction checkboxes\n  document.querySelectorAll(\".transaction-checkbox\").forEach((checkbox) => {\n    checkbox.addEventListener(\"change\", updateBulkActionState);\n  });\n\n  // Bulk category select\n  const bulkCategorySelect = document.getElementById(\"bulkCategorySelect\");\n  if (bulkCategorySelect) {\n    bulkCategorySelect.addEventListener(\"change\", updateBulkApplyButton);\n  }\n\n  // Apply bulk category button\n  const applyBulkCategory = document.getElementById(\"applyBulkCategory\");\n  if (applyBulkCategory) {\n    applyBulkCategory.addEventListener(\"click\", applyBulkCategoryChange);\n  }\n\n  // Quick category buttons\n  document.querySelectorAll(\".quick-category-btn\").forEach((btn) => {\n    btn.addEventListener(\"click\", (e) => {\n      const category = e.target.getAttribute(\"data-category\");\n      applyQuickCategory(category);\n    });\n  });\n\n  // Use event delegation for transaction buttons and fields\n  const transactionTableWrapper = document.getElementById(\n    \"transactionTableWrapper\"\n  );\n  if (transactionTableWrapper) {\n    transactionTableWrapper.addEventListener(\n      \"click\",\n      handleTransactionTableClick\n    );\n    transactionTableWrapper.addEventListener(\n      \"change\",\n      handleTransactionFieldChange\n    );\n    transactionTableWrapper.addEventListener(\n      \"input\",\n      handleTransactionFieldInput\n    );\n    console.log(\"Γ£ô Event delegation attached to transaction table wrapper\");\n  } else {\n    console.warn(\"ΓÜá∩╕Å Transaction table wrapper not found, events may not work\");\n  }\n\n  console.log(\"Γ£ô Transaction event listeners attached successfully\");\n}\n\n/**\n * Toggle bulk edit mode\n */\nexport function toggleBulkEditMode() {\n  const bulkActions = document.getElementById(\"bulkActions\");\n  const bulkToggle = document.getElementById(\"bulkEditToggle\");\n  const checkboxes = document.querySelectorAll(\n    \".transaction-checkbox, #selectAllCheckbox\"\n  );\n\n  if (bulkActions.style.display === \"none\" || !bulkActions.style.display) {\n    // Enable bulk edit mode\n    bulkActions.style.display = \"flex\";\n    bulkToggle.textContent = \"Γ¥î Exit Bulk Edit\";\n    bulkToggle.classList.add(\"active\");\n\n    // Show checkboxes\n    checkboxes.forEach((checkbox) => {\n      checkbox.style.display = \"inline-block\";\n    });\n\n    console.log(\"≡ƒô¥ Bulk edit mode enabled\");\n  } else {\n    // Disable bulk edit mode\n    bulkActions.style.display = \"none\";\n    bulkToggle.textContent = \"≡ƒô¥ Bulk Edit\";\n    bulkToggle.classList.remove(\"active\");\n\n    // Hide checkboxes and uncheck all\n    checkboxes.forEach((checkbox) => {\n      checkbox.style.display = \"none\";\n      checkbox.checked = false;\n    });\n\n    // Reset bulk action state\n    updateBulkActionState();\n\n    console.log(\"Γ¥î Bulk edit mode disabled\");\n  }\n}\n\n/**\n * Toggle select all checkbox\n */\nexport function toggleSelectAll() {\n  const selectAllCheckbox = document.getElementById(\"selectAllCheckbox\");\n  const transactionCheckboxes = document.querySelectorAll(\n    \".transaction-checkbox\"\n  );\n  const isChecked = selectAllCheckbox.checked;\n\n  transactionCheckboxes.forEach((checkbox) => {\n    checkbox.checked = isChecked;\n  });\n\n  updateBulkActionState();\n  console.log(`${isChecked ? \"Γ£à\" : \"Γ¥î\"} Select all toggled: ${isChecked}`);\n}\n\n/**\n * Update bulk action state based on selections\n */\nexport function updateBulkActionState() {\n  const transactionCheckboxes = document.querySelectorAll(\n    \".transaction-checkbox\"\n  );\n  const selectedCheckboxes = document.querySelectorAll(\n    \".transaction-checkbox:checked\"\n  );\n  const selectedCount = selectedCheckboxes.length;\n\n  // Update selected count display\n  const selectedCountSpan = document.querySelector(\".selected-count\");\n  if (selectedCountSpan) {\n    selectedCountSpan.textContent = `${selectedCount} selected`;\n  }\n\n  // Update select all checkbox state\n  const selectAllCheckbox = document.getElementById(\"selectAllCheckbox\");\n  if (selectAllCheckbox) {\n    if (selectedCount === 0) {\n      selectAllCheckbox.indeterminate = false;\n      selectAllCheckbox.checked = false;\n    } else if (selectedCount === transactionCheckboxes.length) {\n      selectAllCheckbox.indeterminate = false;\n      selectAllCheckbox.checked = true;\n    } else {\n      selectAllCheckbox.indeterminate = true;\n    }\n  }\n\n  // Enable/disable bulk actions based on selection\n  const bulkCategorySelect = document.getElementById(\"bulkCategorySelect\");\n  const applyBulkCategoryBtn = document.getElementById(\"applyBulkCategory\");\n\n  if (selectedCount > 0) {\n    if (bulkCategorySelect) bulkCategorySelect.disabled = false;\n    updateBulkApplyButton();\n  } else {\n    if (bulkCategorySelect) {\n      bulkCategorySelect.disabled = true;\n      bulkCategorySelect.value = \"\";\n    }\n    if (applyBulkCategoryBtn) applyBulkCategoryBtn.disabled = true;\n  }\n\n  console.log(\n    `≡ƒôè Bulk action state updated: ${selectedCount} transactions selected`\n  );\n}\n\n/**\n * Update bulk apply button state\n */\nexport function updateBulkApplyButton() {\n  const bulkCategorySelect = document.getElementById(\"bulkCategorySelect\");\n  const applyBulkCategoryBtn = document.getElementById(\"applyBulkCategory\");\n  const selectedCheckboxes = document.querySelectorAll(\n    \".transaction-checkbox:checked\"\n  );\n\n  const hasSelection = selectedCheckboxes.length > 0;\n  const hasCategory = bulkCategorySelect?.value !== \"\";\n\n  if (applyBulkCategoryBtn) {\n    applyBulkCategoryBtn.disabled = !(hasSelection && hasCategory);\n  }\n\n  console.log(\n    `≡ƒöä Bulk apply button updated: ${\n      hasSelection && hasCategory ? \"enabled\" : \"disabled\"\n    }`\n  );\n}\n\n/**\n * Apply bulk category change to selected transactions\n */\nexport function applyBulkCategoryChange() {\n  const selectedCheckboxes = document.querySelectorAll(\n    \".transaction-checkbox:checked\"\n  );\n  const bulkCategorySelect = document.getElementById(\"bulkCategorySelect\");\n\n  if (!selectedCheckboxes.length || !bulkCategorySelect?.value) {\n    console.warn(\n      \"ΓÜá∩╕Å No transactions selected or no category chosen for bulk update\"\n    );\n    return;\n  }\n\n  const selectedCategory = bulkCategorySelect.value;\n  console.log(\n    `≡ƒöä Applying category \"${selectedCategory}\" to ${selectedCheckboxes.length} transactions`\n  );\n\n  selectedCheckboxes.forEach((checkbox) => {\n    const transactionId = checkbox.dataset.transactionId;\n    if (transactionId) {\n      saveFieldChangeById(transactionId, \"category\", selectedCategory);\n    }\n  });\n\n  // Reset bulk selection\n  bulkCategorySelect.value = \"\";\n  selectedCheckboxes.forEach((checkbox) => {\n    checkbox.checked = false;\n  });\n  updateBulkActionState();\n\n  // Show success message\n  import(\"../uiManager.js\").then((module) => {\n    if (module.showToast) {\n      module.showToast(\n        `Applied category \"${selectedCategory}\" to ${selectedCheckboxes.length} transactions`,\n        \"success\"\n      );\n    }\n  });\n\n  console.log(\n    `Γ£à Bulk category update completed for ${selectedCheckboxes.length} transactions`\n  );\n}\n\n/**\n * Apply quick category to selected transactions\n */\nexport function applyQuickCategory(category) {\n  const selectedCheckboxes = document.querySelectorAll(\n    \".transaction-checkbox:checked\"\n  );\n\n  if (!selectedCheckboxes.length) {\n    // Show warning message\n    import(\"../uiManager.js\").then((module) => {\n      if (module.showToast) {\n        module.showToast(\"Please select transactions first\", \"warning\");\n      }\n    });\n    console.warn(\"ΓÜá∩╕Å No transactions selected for quick category application\");\n    return;\n  }\n\n  console.log(\n    `ΓÜí Applying quick category \"${category}\" to ${selectedCheckboxes.length} transactions`\n  );\n\n  selectedCheckboxes.forEach((checkbox) => {\n    const transactionId = checkbox.dataset.transactionId;\n    if (transactionId) {\n      saveFieldChangeById(transactionId, \"category\", category);\n    }\n  });\n\n  // Reset bulk selection\n  selectedCheckboxes.forEach((checkbox) => {\n    checkbox.checked = false;\n  });\n  updateBulkActionState();\n\n  // Show success message\n  import(\"../uiManager.js\").then((module) => {\n    if (module.showToast) {\n      module.showToast(\n        `Applied category \"${category}\" to ${selectedCheckboxes.length} transactions`,\n        \"success\"\n      );\n    }\n  });\n\n  console.log(\n    `Γ£à Quick category update completed for ${selectedCheckboxes.length} transactions`\n  );\n}\n\n/**\n * Legacy save function for backward compatibility\n */\nfunction saveTransactionChanges(index) {\n  console.warn(\n    \"ΓÜá∩╕Å Using legacy saveTransactionChanges function - should migrate to ID-based saving\"\n  );\n\n  if (!AppState.transactions?.[index]) {\n    console.error(\"Γ¥î Transaction not found at index:\", index);\n    return;\n  }\n\n  const transaction = AppState.transactions[index];\n  const transactionId = transaction.id;\n\n  if (transactionId) {\n    // Redirect to ID-based saving if transaction has ID\n    saveTransactionChangesById(transactionId);\n  } else {\n    console.error(\"Γ¥î Transaction has no ID, cannot save safely\");\n  }\n}\n\n/**\n * Handle click events on transaction table buttons\n */\nfunction handleTransactionTableClick(e) {\n  let target = e.target;\n\n  // If the clicked element is not a button, find the closest button\n  if (!target.classList.contains(\"action-btn\")) {\n    target = target.closest(\".action-btn\");\n  }\n\n  // If still no button found, exit\n  if (!target) {\n    console.log(\"≡ƒöì No action button found for click\");\n    return;\n  }\n\n  const transactionId = target.dataset.transactionId;\n  const index = parseInt(target.dataset.index);\n\n  console.log(\"≡ƒöì Transaction button clicked:\", {\n    tagName: target.tagName,\n    classList: Array.from(target.classList),\n    transactionId,\n    index,\n    hasDataset: !!target.dataset,\n    allDataAttributes: Object.keys(target.dataset),\n  });\n\n  if (target.classList.contains(\"btn-edit\")) {\n    handleEditButtonClick(transactionId, index);\n  } else if (target.classList.contains(\"btn-save\")) {\n    handleSaveButtonClick(transactionId);\n  } else if (target.classList.contains(\"btn-revert\")) {\n    handleRevertButtonClick(index);\n  } else if (target.classList.contains(\"btn-revert-all\")) {\n    handleRevertAllButtonClick(transactionId, index);\n  } else if (target.classList.contains(\"btn-delete\")) {\n    handleDeleteButtonClick(transactionId);\n  }\n}\n\n/**\n * Handle edit button click\n */\nfunction handleEditButtonClick(transactionId, index) {\n  console.log(\n    `Γ£Å∩╕Å Edit button clicked for transaction ID: ${transactionId}, index: ${index}`\n  );\n  if (index !== undefined && !isNaN(index)) {\n    enterEditMode(index);\n  }\n}\n\n/**\n * Handle save button click\n */\nfunction handleSaveButtonClick(transactionId) {\n  console.log(`≡ƒÆ╛ Save button clicked for transaction ID: ${transactionId}`);\n\n  if (!transactionId) {\n    console.error(\"Γ¥î No transaction ID provided to save button handler\");\n    console.error(\n      \"Γ¥î This means the data-transaction-id attribute is missing from the button\"\n    );\n    return;\n  }\n\n  if (transactionId) {\n    saveTransactionChangesById(transactionId);\n  } else {\n    console.warn(\"ΓÜá∩╕Å No transaction ID found for save button\");\n  }\n}\n\n/**\n * Handle revert button click\n */\nfunction handleRevertButtonClick(index) {\n  console.log(`Γå╢ Revert button clicked for index: ${index}`);\n  if (index !== undefined && !isNaN(index)) {\n    revertTransactionChanges(index);\n  }\n}\n\n/**\n * Handle revert all button click\n */\nfunction handleRevertAllButtonClick(transactionId, index) {\n  console.log(\n    `≡ƒöä Revert all button clicked for transaction ID: ${transactionId}, index: ${index}`\n  );\n  if (transactionId) {\n    revertAllChangesToOriginal(transactionId, index);\n  } else {\n    console.warn(\"ΓÜá∩╕Å No transaction ID found for revert all button\");\n  }\n}\n\n/**\n * Handle delete button click\n */\nfunction handleDeleteButtonClick(transactionId) {\n  console.log(`≡ƒùæ∩╕Å Delete button clicked for transaction ID: ${transactionId}`);\n  if (transactionId) {\n    deleteTransactionById(transactionId);\n  } else {\n    console.warn(\"ΓÜá∩╕Å No transaction ID found for delete button\");\n  }\n}\n\n/**\n * Handle change events on transaction form fields\n */\nfunction handleTransactionFieldChange(e) {\n  const target = e.target;\n  if (target.classList.contains(\"edit-field\")) {\n    const transactionId = target.dataset.transactionId;\n    const fieldName = target.dataset.field;\n    const newValue = target.value;\n\n    if (\n      target.classList.contains(\"currency-field\") ||\n      target.classList.contains(\"category-select\")\n    ) {\n      console.log(\n        `≡ƒöä Field change detected for transaction ID ${transactionId}, field ${fieldName}, new value: \"${newValue}\"`\n      );\n      if (transactionId && fieldName) {\n        saveFieldChangeById(transactionId, fieldName, newValue);\n      }\n    }\n  }\n}\n\n/**\n * Handle input events on transaction text fields\n */\nfunction handleTransactionFieldInput(e) {\n  const target = e.target;\n  if (\n    target.classList.contains(\"edit-field\") &&\n    !target.classList.contains(\"currency-field\") &&\n    !target.classList.contains(\"category-select\")\n  ) {\n    const row = target.closest(\"tr\");\n    if (row && row.dataset.editMode === \"true\") {\n      const saveBtn = row.querySelector(\".btn-save\");\n      const revertBtn = row.querySelector(\".btn-revert\");\n\n      const hasChanges = checkRowForChanges(row);\n\n      if (hasChanges) {\n        saveBtn.style.display = \"inline-block\";\n        revertBtn.style.display = \"inline-block\";\n        row.classList.add(\"has-changes\");\n      } else {\n        saveBtn.style.display = \"none\";\n        revertBtn.style.display = \"none\";\n        row.classList.remove(\"has-changes\");\n      }\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\ui\\transaction\\transactionRenderer.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":22,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":22,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[662,782],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":56,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":56,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1678,1744],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'transactions' is defined but never used. Allowed unused args must match /^_/u.","line":64,"column":49,"nodeType":"Identifier","messageId":"unusedVar","endLine":64,"endColumn":61},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":74,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":74,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2168,2227],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":87,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":87,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2557,2646],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":101,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":101,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3056,3102],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":121,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":121,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3830,3880],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":125,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":125,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3908,4028],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * TRANSACTION RENDERER MODULE\n *\n * Handles DOM rendering and container management for transactions.\n * Extracted from transactionManager.js for better separation of concerns.\n */\n\nimport {\n  createAdvancedFilterSection,\n  initializeAdvancedFilters,\n} from \"../filters/advancedFilters.js\";\n\n/**\n * Ensure transaction container exists with proper structure and remove duplicates\n */\nexport function ensureTransactionContainer() {\n  // Remove ALL existing transaction sections first\n  const existingSections = document.querySelectorAll(\n    '.transactions-section, #transactionsSection, [id*=\"transaction\"]'\n  );\n  existingSections.forEach((section) => {\n    console.log(\n      \"CRITICAL: Removing duplicate transaction section:\",\n      section.className,\n      section.id\n    );\n    section.remove();\n  });\n\n  const mainContent = document.querySelector(\".main-content\");\n  if (!mainContent) {\n    console.error(\"CRITICAL: Main content not found\");\n    return null;\n  }\n\n  // Create ONE clean transaction section\n  const section = document.createElement(\"div\");\n  section.className = \"section transactions-section\";\n  section.id = \"transactionsSection\";\n  section.innerHTML = `\n    <div class=\"section-header\">\n      <h2>≡ƒÆ░ Transactions</h2>\n      <div class=\"transaction-summary\" id=\"transactionSummary\">\n        <!-- Summary will be updated dynamically -->\n      </div>\n    </div>\n    <div class=\"section-content\">\n      <div id=\"transactionFilters\" class=\"transaction-filters\"></div>\n      <div id=\"transactionTableWrapper\" class=\"transaction-table-wrapper\">\n        <!-- Table will be rendered here -->\n      </div>\n    </div>\n  `;\n\n  mainContent.appendChild(section);\n  console.log(\"CRITICAL: Created single clean transaction section\");\n\n  return section;\n}\n\n/**\n * Render filters section using advanced filters\n */\nexport function renderFiltersSection(container, transactions) {\n  const filtersContainer = container.querySelector(\"#transactionFilters\");\n  if (!filtersContainer) return;\n\n  // Use the new advanced filter section\n  filtersContainer.innerHTML = createAdvancedFilterSection();\n\n  // Initialize advanced filters\n  initializeAdvancedFilters();\n\n  console.log(\"CRITICAL: Advanced filters section rendered\");\n}\n\n/**\n * Render transaction table with guaranteed structure and proper date sorting\n */\nexport function renderTransactionTable(container, transactions) {\n  const tableWrapper = container.querySelector(\"#transactionTableWrapper\");\n  if (!tableWrapper) {\n    console.error(\"CRITICAL: Table wrapper not found\");\n    return;\n  }\n\n  console.log(\n    `CRITICAL: Rendering table for ${transactions.length} transactions`\n  );\n\n  if (transactions.length === 0) {\n    tableWrapper.innerHTML = `\n      <div class=\"no-transactions\">\n        <div class=\"empty-state-content\">\n          <h3>≡ƒôä No Transactions Available</h3>\n          <p>Import transaction files using the \"Upload File\" button in the sidebar to see your data here.</p>\n          <p>Supported formats: CSV, Excel (.xlsx, .xls), XML</p>\n        </div>\n      </div>\n    `;\n    console.log(\"CRITICAL: Rendered empty state\");\n    return;\n  }\n\n  // Sort transactions by date (oldest to newest) - ensure proper date parsing\n  const sortedTransactions = [...transactions].sort((a, b) => {\n    const dateA = new Date(a.date || \"1900-01-01\");\n    const dateB = new Date(b.date || \"1900-01-01\");\n    return dateA - dateB;\n  });\n\n  // Import table generator and generate HTML\n  import(\"./transactionTableGenerator.js\").then((module) => {\n    const tableHTML = module.generateTransactionTableHTML(sortedTransactions);\n    tableWrapper.innerHTML = tableHTML;\n\n    // Attach event listeners after DOM update\n    setTimeout(() => {\n      import(\"./transactionEventHandler.js\").then((eventModule) => {\n        eventModule.attachTransactionEventListeners();\n        console.log(\"CRITICAL: Event listeners attached\");\n      });\n    }, 50);\n\n    console.log(\n      `CRITICAL: Transaction table rendered with ${sortedTransactions.length} rows (sorted by date)`\n    );\n  });\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\ui\\transaction\\transactionSummary.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":150,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":150,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12407,12496],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * TRANSACTION SUMMARY MODULE\n *\n * Handles transaction summary calculations and display with multi-currency support.\n * Extracted from transactionManager.js for better separation of concerns.\n */\n\nimport { CURRENCIES } from \"../../constants/currencies.js\";\n\n/**\n * Update transaction summary with multi-currency support\n */\nexport function updateTransactionSummary(transactions) {\n  const summaryContainer = document.getElementById(\"transactionSummary\");\n  if (!summaryContainer) return;\n\n  // Handle null or undefined transactions\n  if (!transactions || !Array.isArray(transactions)) {\n    summaryContainer.innerHTML = \"<p>No transaction data available</p>\";\n    return;\n  }\n\n  // Group transactions by currency\n  const currencyGroups = {};\n  transactions.forEach((tx) => {\n    const currency = tx.currency || \"USD\";\n    if (!currencyGroups[currency]) {\n      currencyGroups[currency] = {\n        income: 0,\n        expenses: 0,\n        count: 0,\n      };\n    }\n    currencyGroups[currency].income += parseFloat(tx.income) || 0;\n    currencyGroups[currency].expenses += parseFloat(tx.expenses) || 0;\n    currencyGroups[currency].count += 1;\n  });\n\n  const currencies = Object.keys(currencyGroups);\n\n  if (currencies.length === 1) {\n    // Single currency - show traditional summary\n    const currency = currencies[0];\n    const data = currencyGroups[currency];\n    const netBalance = data.income - data.expenses;\n    const currencyIcon = CURRENCIES[currency]?.icon || \"≡ƒÆ▒\";\n\n    summaryContainer.innerHTML = `\n      <div class=\"summary-cards-row\" style=\"display: flex !important; flex-direction: row !important; flex-wrap: wrap !important; gap: 1rem !important; justify-content: flex-start !important;\">\n        <div class=\"summary-card income\" style=\"display: flex !important; align-items: center !important; gap: 0.75rem !important; flex: 1 1 auto !important; min-width: 200px !important; max-width: none !important; padding: 1rem !important; background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%) !important; border: 1px solid #e9ecef !important; border-radius: 10px !important; word-wrap: break-word !important; overflow-wrap: break-word !important;\">\n          <div class=\"summary-icon\" style=\"font-size: 1.5rem !important; width: 40px !important; height: 40px !important; border-radius: 50% !important; background: rgba(40, 167, 69, 0.1) !important; color: #28a745 !important; display: flex !important; align-items: center !important; justify-content: center !important; flex-shrink: 0 !important;\">≡ƒÆ░</div>\n          <div class=\"summary-content\" style=\"display: flex !important; flex-direction: column !important; gap: 0.25rem !important; flex: 1 !important; min-width: 0 !important; word-wrap: break-word !important; overflow-wrap: break-word !important;\">\n            <span class=\"summary-label\" style=\"font-size: 0.85rem !important; font-weight: 500 !important; color: #6c757d !important; text-transform: uppercase !important; white-space: nowrap !important;\">Income</span>\n            <span class=\"summary-value\" style=\"font-size: 1.25rem !important; font-weight: 700 !important; color: #28a745 !important; word-wrap: break-word !important; overflow-wrap: break-word !important; line-height: 1.2 !important; max-width: 100% !important;\">${currencyIcon} ${data.income.toFixed(\n      2\n    )}</span>\n          </div>\n        </div>\n        <div class=\"summary-card expenses\" style=\"display: flex !important; align-items: center !important; gap: 0.75rem !important; flex: 1 1 auto !important; min-width: 200px !important; max-width: none !important; padding: 1rem !important; background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%) !important; border: 1px solid #e9ecef !important; border-radius: 10px !important; word-wrap: break-word !important; overflow-wrap: break-word !important;\">\n          <div class=\"summary-icon\" style=\"font-size: 1.5rem !important; width: 40px !important; height: 40px !important; border-radius: 50% !important; background: rgba(220, 53, 69, 0.1) !important; color: #dc3545 !important; display: flex !important; align-items: center !important; justify-content: center !important; flex-shrink: 0 !important;\">≡ƒÆ╕</div>\n          <div class=\"summary-content\" style=\"display: flex !important; flex-direction: column !important; gap: 0.25rem !important; flex: 1 !important; min-width: 0 !important; word-wrap: break-word !important; overflow-wrap: break-word !important;\">\n            <span class=\"summary-label\" style=\"font-size: 0.85rem !important; font-weight: 500 !important; color: #6c757d !important; text-transform: uppercase !important; white-space: nowrap !important;\">Expenses</span>\n            <span class=\"summary-value\" style=\"font-size: 1.25rem !important; font-weight: 700 !important; color: #dc3545 !important; word-wrap: break-word !important; overflow-wrap: break-word !important; line-height: 1.2 !important; max-width: 100% !important;\">${currencyIcon} ${data.expenses.toFixed(\n      2\n    )}</span>\n          </div>\n        </div>\n        <div class=\"summary-card net ${\n          netBalance >= 0 ? \"positive\" : \"negative\"\n        }\" style=\"display: flex !important; align-items: center !important; gap: 0.75rem !important; flex: 1 1 auto !important; min-width: 200px !important; max-width: none !important; padding: 1rem !important; background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%) !important; border: 1px solid #e9ecef !important; border-radius: 10px !important; word-wrap: break-word !important; overflow-wrap: break-word !important;\">\n          <div class=\"summary-icon\" style=\"font-size: 1.5rem !important; width: 40px !important; height: 40px !important; border-radius: 50% !important; background: ${\n            netBalance >= 0\n              ? \"rgba(40, 167, 69, 0.1)\"\n              : \"rgba(220, 53, 69, 0.1)\"\n          } !important; color: ${\n      netBalance >= 0 ? \"#28a745\" : \"#dc3545\"\n    } !important; display: flex !important; align-items: center !important; justify-content: center !important; flex-shrink: 0 !important;\">${\n      netBalance >= 0 ? \"≡ƒôê\" : \"≡ƒôë\"\n    }</div>\n          <div class=\"summary-content\" style=\"display: flex !important; flex-direction: column !important; gap: 0.25rem !important; flex: 1 !important; min-width: 0 !important; word-wrap: break-word !important; overflow-wrap: break-word !important;\">\n            <span class=\"summary-label\" style=\"font-size: 0.85rem !important; font-weight: 500 !important; color: #6c757d !important; text-transform: uppercase !important; white-space: nowrap !important;\">Net Balance</span>\n            <span class=\"summary-value\" style=\"font-size: 1.25rem !important; font-weight: 700 !important; color: ${\n              netBalance >= 0 ? \"#28a745\" : \"#dc3545\"\n            } !important; word-wrap: break-word !important; overflow-wrap: break-word !important; line-height: 1.2 !important; max-width: 100% !important;\">${currencyIcon} ${netBalance.toFixed(\n      2\n    )}</span>\n          </div>\n        </div>\n        <div class=\"summary-card count\" style=\"display: flex !important; align-items: center !important; gap: 0.75rem !important; flex: 1 1 auto !important; min-width: 200px !important; max-width: none !important; padding: 1rem !important; background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%) !important; border: 1px solid #e9ecef !important; border-radius: 10px !important; word-wrap: break-word !important; overflow-wrap: break-word !important;\">\n          <div class=\"summary-icon\" style=\"font-size: 1.5rem !important; width: 40px !important; height: 40px !important; border-radius: 50% !important; background: rgba(0, 123, 255, 0.1) !important; color: #007bff !important; display: flex !important; align-items: center !important; justify-content: center !important; flex-shrink: 0 !important;\">≡ƒôè</div>\n          <div class=\"summary-content\" style=\"display: flex !important; flex-direction: column !important; gap: 0.25rem !important; flex: 1 !important; min-width: 0 !important; word-wrap: break-word !important; overflow-wrap: break-word !important;\">\n            <span class=\"summary-label\" style=\"font-size: 0.85rem !important; font-weight: 500 !important; color: #6c757d !important; text-transform: uppercase !important; white-space: nowrap !important;\">Transactions</span>\n            <span class=\"summary-value\" style=\"font-size: 1.25rem !important; font-weight: 700 !important; color: #007bff !important; word-wrap: break-word !important; overflow-wrap: break-word !important; line-height: 1.2 !important; max-width: 100% !important;\">${\n              data.count\n            }</span>\n          </div>\n        </div>\n      </div>\n    `;\n  } else {\n    // Multiple currencies - show by currency\n    let cardsHTML = \"\";\n    currencies.forEach((currency) => {\n      const data = currencyGroups[currency];\n      const netBalance = data.income - data.expenses;\n      const currencyIcon = CURRENCIES[currency]?.icon || \"≡ƒÆ▒\";\n\n      cardsHTML += `\n        <div class=\"summary-card currency-summary\" style=\"display: flex !important; flex-direction: column !important; gap: 0.5rem !important; flex: 1 1 auto !important; min-width: 220px !important; max-width: none !important; padding: 1rem !important; background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%) !important; border: 1px solid #e9ecef !important; border-radius: 10px !important; word-wrap: break-word !important; overflow-wrap: break-word !important;\">\n          <div class=\"currency-header\" style=\"display: flex !important; align-items: center !important; gap: 0.5rem !important; font-weight: 600 !important; color: #495057 !important; white-space: nowrap !important;\">\n            <span style=\"font-size: 1.2rem !important;\">${currencyIcon}</span>\n            <span>${currency}</span>\n          </div>\n          <div class=\"currency-stats\" style=\"display: flex !important; justify-content: space-between !important; gap: 0.5rem !important; flex-wrap: wrap !important;\">\n            <div style=\"text-align: center !important; flex: 1 1 auto !important; min-width: 60px !important; word-wrap: break-word !important; overflow-wrap: break-word !important;\">\n              <div style=\"font-size: 0.75rem !important; color: #6c757d !important; text-transform: uppercase !important; white-space: nowrap !important;\">Income</div>\n              <div style=\"font-size: 1rem !important; font-weight: 600 !important; color: #28a745 !important; word-wrap: break-word !important; overflow-wrap: break-word !important; line-height: 1.2 !important;\">${data.income.toFixed(\n                2\n              )}</div>\n            </div>\n            <div style=\"text-align: center !important; flex: 1 1 auto !important; min-width: 60px !important; word-wrap: break-word !important; overflow-wrap: break-word !important;\">\n              <div style=\"font-size: 0.75rem !important; color: #6c757d !important; text-transform: uppercase !important; white-space: nowrap !important;\">Expenses</div>\n              <div style=\"font-size: 1rem !important; font-weight: 600 !important; color: #dc3545 !important; word-wrap: break-word !important; overflow-wrap: break-word !important; line-height: 1.2 !important;\">${data.expenses.toFixed(\n                2\n              )}</div>\n            </div>\n            <div style=\"text-align: center !important; flex: 1 1 auto !important; min-width: 60px !important; word-wrap: break-word !important; overflow-wrap: break-word !important;\">\n              <div style=\"font-size: 0.75rem !important; color: #6c757d !important; text-transform: uppercase !important; white-space: nowrap !important;\">Net</div>\n              <div style=\"font-size: 1rem !important; font-weight: 600 !important; color: ${\n                netBalance >= 0 ? \"#28a745\" : \"#dc3545\"\n              } !important; word-wrap: break-word !important; overflow-wrap: break-word !important; line-height: 1.2 !important;\">${netBalance.toFixed(\n        2\n      )}</div>\n            </div>\n          </div>\n          <div style=\"text-align: center !important; font-size: 0.85rem !important; color: #6c757d !important;\">${\n            data.count\n          } transactions</div>\n        </div>\n      `;\n    });\n\n    summaryContainer.innerHTML = `\n      <div class=\"summary-cards-row\" style=\"display: flex !important; flex-direction: row !important; flex-wrap: wrap !important; gap: 1rem !important; justify-content: flex-start !important;\">\n        ${cardsHTML}\n      </div>\n    `;\n  }\n\n  console.log(\n    \"CRITICAL: Transaction summary updated with multi-currency support\"\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\ui\\transaction\\transactionTableGenerator.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'categoryData' is defined but never used. Allowed unused args must match /^_/u.","line":46,"column":43,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":55},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":155,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":155,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4622,4795],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":183,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":183,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5504,5592],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":343,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":343,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11814,11865],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * TRANSACTION TABLE GENERATOR MODULE\n *\n * Handles HTML generation for transaction tables.\n * Extracted from transactionManager.js for better separation of concerns.\n */\n\nimport { AppState } from \"../../core/appState.js\";\nimport { formatDateToDDMMYYYY } from \"../../utils/dateUtils.js\";\nimport { CURRENCIES } from \"../../constants/currencies.js\";\n\n/**\n * Get category color helper function\n */\nfunction getCategoryColor(categoryName) {\n  if (!categoryName || !AppState.categories) return \"#cccccc\";\n\n  const categoryData = AppState.categories[categoryName];\n  if (!categoryData) return \"#cccccc\";\n\n  if (typeof categoryData === \"string\") {\n    return categoryData;\n  } else if (typeof categoryData === \"object\" && categoryData.color) {\n    return categoryData.color;\n  }\n\n  return \"#cccccc\";\n}\n\n// ensureTransactionIds function removed - now handled by transactionCoordinator\n// to avoid duplicate processing and excessive logging\n\n/**\n * Generate category dropdown HTML\n */\nfunction generateCategoryDropdown(\n  selectedCategory,\n  selectedSubcategory,\n  transactionId\n) {\n  const categories = AppState.categories || {};\n  const categoryEntries = Object.entries(categories);\n\n  let options = '<option value=\"\">Select Category</option>';\n\n  categoryEntries.forEach(([categoryName, categoryData]) => {\n    const isSelected = selectedCategory === categoryName ? \"selected\" : \"\";\n    options += `<option value=\"${categoryName}\" ${isSelected}>${categoryName}</option>`;\n  });\n\n  return `\n    <select class=\"edit-field category-select\"\n            data-field=\"category\"\n            data-transaction-id=\"${transactionId}\"\n            data-original=\"${selectedCategory}\">\n      ${options}\n    </select>\n  `;\n}\n\n/**\n * Generate proper transaction table HTML with edit mode and counter\n */\n/**\n * Generates the table header HTML\n */\nfunction generateTableHeader(transactionCount) {\n  return `\n    <div class=\"transaction-table-header\">\n      <div class=\"table-header-left\">\n        <h4>≡ƒôï Transaction Data (${transactionCount} transactions)</h4>\n        <div class=\"table-info\">\n          <span>Use the Edit button to modify transactions ΓÇó Changes are saved automatically</span>\n        </div>\n      </div>\n      <div class=\"table-header-right\">\n        <button id=\"bulkEditToggle\" class=\"btn secondary-btn\">≡ƒô¥ Bulk Edit</button>\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Generates the bulk actions section HTML\n */\nfunction generateBulkActionsHTML() {\n  return `\n    <div id=\"bulkActions\" class=\"bulk-actions\" style=\"display: none;\">\n      <div class=\"bulk-selection\">\n        <input type=\"checkbox\" id=\"selectAllCheckbox\" class=\"bulk-checkbox\" style=\"display: none;\">\n        <label for=\"selectAllCheckbox\" style=\"display: none;\">Select All</label>\n        <span class=\"selected-count\">0 selected</span>\n      </div>\n\n      <div class=\"bulk-category-assignment\">\n        <select id=\"bulkCategorySelect\" class=\"bulk-action-btn\">\n          <option value=\"\">Choose Category</option>\n          ${Object.keys(AppState.categories || {})\n            .sort((a, b) => a.localeCompare(b))\n            .map((cat) => `<option value=\"${cat}\">${cat}</option>`)\n            .join(\"\")}\n        </select>\n        <button id=\"applyBulkCategory\" class=\"bulk-action-btn primary-btn\" disabled>Apply Category</button>\n      </div>\n\n      <div class=\"quick-categories\">\n        ${Object.entries(AppState.categories || {})\n          .slice(0, 6)\n          .map(([cat, catData]) => {\n            const color =\n              typeof catData === \"string\"\n                ? catData\n                : catData.color || \"#cccccc\";\n            return `<button class=\"quick-category-btn\" data-category=\"${cat}\" style=\"background-color: ${color};\">${cat}</button>`;\n          })\n          .join(\"\")}\n      </div>\n    </div>\n  `;\n}\n\n/**\n * Generates the table structure start HTML\n */\nfunction generateTableStart() {\n  return `\n    <div class=\"table-container\">\n      <table class=\"transaction-table\">\n        <thead>\n          <tr>\n            <th>\n              <input type=\"checkbox\" id=\"selectAllCheckbox\" class=\"bulk-checkbox\" style=\"display: none;\">\n              #\n            </th>\n            <th>Date</th>\n            <th>Description</th>\n            <th>Category</th>\n            <th>Income</th>\n            <th>Expenses</th>\n            <th>Currency</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n  `;\n}\n\n/**\n * Processes transaction data for display\n */\nfunction processTransactionForDisplay(tx, index) {\n  // Transaction IDs should already be ensured by transactionCoordinator\n  // No need to generate IDs here\n\n  console.log(\n    `≡ƒöº Rendering transaction ID ${tx.id} at index ${index}, category: \"${\n      tx.category\n    }\", description: \"${tx.description?.substring(0, 50)}...\"`\n  );\n\n  return {\n    id: tx.id,\n    date: tx.date ? formatDateToDDMMYYYY(tx.date) : \"\",\n    description: (tx.description || \"\")\n      .toString()\n      .replace(/\\s*data-field=.*$/i, \"\")\n      .trim(),\n    isRTL: /[\\u0590-\\u05FF\\u0600-\\u06FF\\u0750-\\u077F]/.test(\n      tx.description || \"\"\n    ),\n    category: tx.category || \"\",\n    subcategory: tx.subcategory || \"\",\n    income: parseFloat(tx.income) || 0,\n    expenses: parseFloat(tx.expenses) || 0,\n    currency: tx.currency || \"USD\",\n    isEdited: tx.edited || false,\n    editedFields: tx.editedFields || {},\n    hasDataEdits: tx.originalData && Object.keys(tx.originalData).length > 0,\n  };\n}\n\nexport function generateTransactionTableHTML(transactions) {\n  console.log(\n    `≡ƒöº Generating table HTML for ${transactions.length} transactions`\n  );\n\n  // Transaction IDs are ensured by transactionCoordinator before calling this function\n  // No need to duplicate ID assignment here\n\n  let html = generateTableHeader(transactions.length);\n  html += generateBulkActionsHTML();\n  html += generateTableStart();\n\n  transactions.forEach((tx, index) => {\n    const processedTx = processTransactionForDisplay(tx, index);\n\n    // Get category color for cell background - preserve category styling\n    const categoryColor = getCategoryColor(processedTx.category);\n    const categoryStyle = processedTx.category\n      ? `background-color: ${categoryColor}20; border-left: 3px solid ${categoryColor};`\n      : \"\";\n\n    // Generate currency dropdown with proper symbols\n    const currencyOptions = Object.entries(CURRENCIES)\n      .sort(([a], [b]) => a.localeCompare(b))\n      .map(([currencyCode, currencyData]) => {\n        const isSelected =\n          processedTx.currency === currencyCode ? \"selected\" : \"\";\n        const symbol = currencyData.symbol || currencyCode;\n        return `<option value=\"${currencyCode}\" ${isSelected}>${symbol} ${currencyCode}</option>`;\n      })\n      .join(\"\");\n\n    // Check which fields have been edited for styling - preserve edited state\n    const dateEditedClass = processedTx.editedFields.date ? \"edited-cell\" : \"\";\n    const descEditedClass = processedTx.editedFields.description\n      ? \"edited-cell\"\n      : \"\";\n    const categoryEditedClass = processedTx.editedFields.category\n      ? \"edited-cell\"\n      : \"\";\n    const incomeEditedClass = processedTx.editedFields.income\n      ? \"edited-cell\"\n      : \"\";\n    const expensesEditedClass = processedTx.editedFields.expenses\n      ? \"edited-cell\"\n      : \"\";\n\n    html += `\n      <tr data-transaction-id=\"${\n        processedTx.id\n      }\" data-transaction-index=\"${index}\" class=\"transaction-row ${\n      processedTx.isEdited ? \"edited-row\" : \"\"\n    }\" data-edit-mode=\"false\">\n        <td class=\"counter-cell\">\n          <input type=\"checkbox\" class=\"transaction-checkbox\" data-transaction-id=\"${\n            processedTx.id\n          }\" style=\"display: none;\">\n          ${index + 1}\n        </td>\n        <td class=\"date-cell ${dateEditedClass}\">\n          <span class=\"display-value\">${processedTx.date}</span>\n          <input type=\"text\"\n                 class=\"edit-field date-field\"\n                 value=\"${processedTx.date}\"\n                 data-transaction-id=\"${processedTx.id}\"\n                 data-field=\"date\"\n                 data-index=\"${index}\"\n                 style=\"display: none;\"\n                 placeholder=\"dd/mm/yyyy\">\n        </td>\n        <td class=\"description-cell ${descEditedClass}\" ${\n      processedTx.isRTL ? 'dir=\"rtl\"' : \"\"\n    }>\n          <span class=\"display-value\" title=\"${processedTx.description}\">${\n      processedTx.description\n    }</span>\n          <input type=\"text\"\n                 class=\"edit-field description-field\"\n                 value=\"${processedTx.description.replace(/\"/g, \"&quot;\")}\"\n                 data-transaction-id=\"${processedTx.id}\"\n                 data-field=\"description\"\n                 data-index=\"${index}\"\n                 style=\"display: none;\"\n                 ${processedTx.isRTL ? 'dir=\"rtl\"' : \"\"}\n                 placeholder=\"Transaction description\">\n        </td>\n        <td class=\"category-cell ${categoryEditedClass}\" style=\"${categoryStyle}\">\n          <span class=\"display-value\">${processedTx.category}</span>\n          ${generateCategoryDropdown(\n            processedTx.category,\n            processedTx.subcategory,\n            processedTx.id\n          )}\n        </td>\n        <td class=\"income-cell ${incomeEditedClass}\">\n          <span class=\"display-value\">${\n            processedTx.income > 0 ? processedTx.income.toFixed(2) : \"\"\n          }</span>\n          <input type=\"number\"\n                 class=\"edit-field income-field\"\n                 value=\"${processedTx.income || \"\"}\"\n                 data-transaction-id=\"${processedTx.id}\"\n                 data-field=\"income\"\n                 data-index=\"${index}\"\n                 style=\"display: none;\"\n                 step=\"0.01\"\n                 min=\"0\"\n                 placeholder=\"0.00\">\n        </td>\n        <td class=\"expenses-cell ${expensesEditedClass}\">\n          <span class=\"display-value\">${\n            processedTx.expenses > 0 ? processedTx.expenses.toFixed(2) : \"\"\n          }</span>\n          <input type=\"number\"\n                 class=\"edit-field expenses-field\"\n                 value=\"${processedTx.expenses || \"\"}\"\n                 data-transaction-id=\"${processedTx.id}\"\n                 data-field=\"expenses\"\n                 data-index=\"${index}\"\n                 style=\"display: none;\"\n                 step=\"0.01\"\n                 min=\"0\"\n                 placeholder=\"0.00\">\n        </td>\n        <td class=\"currency-cell\">\n          <select class=\"edit-field currency-field\"\n                  data-transaction-id=\"${processedTx.id}\"\n                  data-field=\"currency\"\n                  data-index=\"${index}\">\n            ${currencyOptions}\n          </select>\n        </td>\n        <td class=\"actions-cell\">\n          <button class=\"btn-edit action-btn\" data-transaction-id=\"${\n            processedTx.id\n          }\" data-index=\"${index}\" title=\"Edit transaction\">Γ£Å∩╕Å</button>\n          <button class=\"btn-delete action-btn\" data-transaction-id=\"${\n            processedTx.id\n          }\" data-index=\"${index}\" title=\"Delete transaction\">≡ƒùæ∩╕Å</button>\n          <button class=\"btn-save action-btn\" data-transaction-id=\"${\n            processedTx.id\n          }\" data-index=\"${index}\" style=\"display: none;\" title=\"Save changes\">≡ƒÆ╛</button>\n          <button class=\"btn-revert action-btn\" data-transaction-id=\"${\n            processedTx.id\n          }\" data-index=\"${index}\" style=\"display: none;\" title=\"Cancel changes\">Γå╢</button>\n          <button class=\"btn-revert-all action-btn\" data-transaction-id=\"${\n            processedTx.id\n          }\" data-index=\"${index}\" ${\n      processedTx.hasDataEdits ? \"\" : 'style=\"display: none;\"'\n    } title=\"Revert all changes to original\">≡ƒöä</button>\n        </td>\n      </tr>\n    `;\n  });\n\n  html += `\n        </tbody>\n      </table>\n    </div>\n  `;\n\n  console.log(\"Γ£ô Generated table HTML successfully\");\n  return html;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\ui\\uiManager.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'activeToast' is assigned a value but never used.","line":3,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'updateDebugModeToggle' is defined but never used.","line":52,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":31},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":63,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":63,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1605,1648],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'setupSidebar' is defined but never used.","line":276,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":276,"endColumn":22},{"ruleId":"no-unused-vars","severity":1,"message":"'setupUIEventListeners' is defined but never used.","line":292,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":292,"endColumn":31},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":294,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":294,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7597,7638],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'initializeDebugActionButtons' is defined but never used.","line":328,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":328,"endColumn":38},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":347,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":347,"endColumn":26,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9158,9213],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":394,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":394,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10579,10695],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":426,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":426,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11539,11673],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'initializeDarkModeToggle' is defined but never used.","line":436,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":436,"endColumn":34},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":459,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":459,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12467,12524],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'toggleDebugMode' is defined but never used.","line":465,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":465,"endColumn":25},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":471,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":471,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12819,12870],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Directory: /src/ui/uiManager.js\n\nlet activeToast = null;\n\nexport function showElement(id) {\n  const el = document.getElementById(id);\n  if (!el) return;\n  el.style.display = \"block\";\n}\n\nexport function hideElement(id) {\n  const el = document.getElementById(id);\n  if (!el) return;\n  el.style.display = \"none\";\n}\n\nexport function clearElement(id) {\n  const el = document.getElementById(id);\n  if (!el) return;\n  el.innerHTML = \"\";\n}\n\nexport function toggleDarkMode() {\n  document.body.classList.toggle(\"dark-mode\");\n  const isDarkMode = document.body.classList.contains(\"dark-mode\");\n  localStorage.setItem(\"darkMode\", isDarkMode);\n\n  // Update the toggle icon state\n  updateDarkModeToggle(isDarkMode);\n\n  showToast(`Dark mode ${isDarkMode ? \"enabled\" : \"disabled\"}`, \"info\");\n}\n\n/**\n * Updates the dark mode toggle icon state\n * @param {boolean} isDarkMode - Whether dark mode is enabled\n */\nfunction updateDarkModeToggle(isDarkMode) {\n  const darkModeToggle = document.getElementById(\"darkModeToggle\");\n  if (darkModeToggle) {\n    const icon = darkModeToggle.querySelector(\".toggle-icon\");\n    if (icon) {\n      icon.textContent = isDarkMode ? \"≡ƒîÖ\" : \"ΓÿÇ∩╕Å\";\n    }\n    darkModeToggle.classList.toggle(\"active\", isDarkMode);\n  }\n}\n\n/**\n * Updates the debug mode toggle icon state\n */\nfunction updateDebugModeToggle(isDebugMode) {\n  const debugToggle = document.getElementById(\"debugModeToggle\");\n  if (debugToggle) {\n    debugToggle.checked = isDebugMode;\n  }\n}\n\n/**\n * Shows a simple toast notification at the top of the screen\n */\nexport function showToast(message, type = \"info\", duration = 3000) {\n  console.log(`Toast: ${type} - ${message}`);\n\n  // Create toast container if it doesn't exist\n  let toastContainer = document.getElementById(\"toastContainer\");\n  if (!toastContainer) {\n    toastContainer = document.createElement(\"div\");\n    toastContainer.id = \"toastContainer\";\n    toastContainer.className = \"toast-container\";\n    toastContainer.style.cssText = `\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      z-index: 10000;\n      display: flex;\n      flex-direction: column;\n      gap: 10px;\n    `;\n    document.body.appendChild(toastContainer);\n  }\n\n  // Create toast element\n  const toast = document.createElement(\"div\");\n  toast.className = `toast toast-${type}`;\n  toast.style.cssText = `\n    background: white;\n    border-left: 4px solid ${getToastColor(type)};\n    padding: 12px 16px;\n    border-radius: 6px;\n    box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n    max-width: 300px;\n    transform: translateX(400px);\n    transition: transform 0.3s ease;\n    font-size: 14px;\n    color: #333;\n  `;\n  toast.textContent = message;\n\n  toastContainer.appendChild(toast);\n\n  // Animate in\n  setTimeout(() => {\n    toast.style.transform = \"translateX(0)\";\n  }, 10);\n\n  // Remove after duration\n  setTimeout(() => {\n    toast.style.transform = \"translateX(400px)\";\n    setTimeout(() => {\n      if (toast.parentNode) {\n        toast.parentNode.removeChild(toast);\n      }\n    }, 300);\n  }, duration);\n}\n\nfunction getToastColor(type) {\n  switch (type) {\n    case \"success\":\n      return \"#28a745\";\n    case \"error\":\n      return \"#dc3545\";\n    case \"warning\":\n      return \"#ffc107\";\n    default:\n      return \"#17a2b8\";\n  }\n}\n\n/**\n * Shows a loading indicator on an element\n */\nexport function showLoading(elementId, message = \"Loading...\") {\n  const element = document.getElementById(elementId);\n  if (!element) return;\n\n  const originalContent = element.innerHTML;\n  element.dataset.originalContent = originalContent;\n\n  element.innerHTML = `\n    <div class=\"loading-indicator\">\n      <div class=\"spinner\"></div>\n      <span>${message}</span>\n    </div>\n  `;\n}\n\n/**\n * Hides the loading indicator and restores original content\n */\nexport function hideLoading(elementId) {\n  const element = document.getElementById(elementId);\n  if (!element) return;\n\n  const originalContent = element.dataset.originalContent;\n  if (originalContent) {\n    element.innerHTML = originalContent;\n    delete element.dataset.originalContent;\n  }\n}\n\n/**\n * Shows a loading overlay for the entire page\n */\nexport function showPageLoadingOverlay(message = \"Loading...\") {\n  const overlay = document.createElement(\"div\");\n  overlay.className = \"page-loading-overlay\";\n  overlay.innerHTML = `\n    <div class=\"loading-content\">\n      <div class=\"spinner\"></div>\n      <p>${message}</p>\n    </div>\n  `;\n\n  document.body.appendChild(overlay);\n\n  return {\n    close: () => {\n      if (document.body.contains(overlay)) {\n        document.body.removeChild(overlay);\n      }\n    },\n  };\n}\n\n/**\n * Shows chart loading with blink effect\n */\nexport function showChartLoading(elementId, message = \"Loading chart...\") {\n  const element = document.getElementById(elementId);\n  if (!element) return;\n\n  // FIXED: Store original content more carefully\n  if (!element.dataset.originalContent) {\n    element.dataset.originalContent = element.innerHTML;\n  }\n\n  // FIXED: Add loading with blink effect while preserving chart structure\n  const originalContent = element.innerHTML;\n  element.innerHTML = `\n    <div class=\"chart-loading-overlay\" style=\"\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      justify-content: center;\n      background: rgba(255, 255, 255, 0.9);\n      z-index: 1000;\n      animation: chartLoadingBlink 1.5s ease-in-out infinite;\n      border-radius: 8px;\n    \">\n      <div class=\"chart-loading-spinner\" style=\"\n        width: 40px;\n        height: 40px;\n        border: 4px solid #e3e3e3;\n        border-top: 4px solid #667eea;\n        border-radius: 50%;\n        animation: spin 1s linear infinite;\n        margin-bottom: 15px;\n      \"></div>\n      <div class=\"chart-loading-text\" style=\"\n        color: #667eea;\n        font-weight: 600;\n        font-size: 0.9rem;\n        text-align: center;\n        animation: chartTextPulse 2s ease-in-out infinite;\n      \">${message}</div>\n    </div>\n    ${originalContent}\n    <style>\n      @keyframes chartLoadingBlink {\n        0%, 100% { opacity: 0.8; background-color: rgba(255, 255, 255, 0.8); }\n        50% { opacity: 1; background-color: rgba(102, 126, 234, 0.1); }\n      }\n      @keyframes spin {\n        0% { transform: rotate(0deg); }\n        100% { transform: rotate(360deg); }\n      }\n      @keyframes chartTextPulse {\n        0%, 100% { opacity: 0.7; }\n        50% { opacity: 1; }\n      }\n    </style>\n  `;\n\n  // FIXED: Ensure wrapper is positioned relative for overlay\n  element.style.position = \"relative\";\n}\n\n/**\n * Hides chart loading and restores original content\n */\nexport function hideChartLoading(elementId) {\n  const element = document.getElementById(elementId);\n  if (!element) return;\n\n  // FIXED: Remove only the loading overlay, preserve chart content\n  const overlay = element.querySelector(\".chart-loading-overlay\");\n  if (overlay) {\n    overlay.remove();\n  }\n\n  // FIXED: Don't restore original content, just ensure visibility\n  element.style.visibility = \"visible\";\n  element.style.display = \"block\";\n}\n\n/**\n * Set up sidebar functionality\n */\nfunction setupSidebar() {\n  // Import and initialize sidebar manager\n  import(\"./sidebarManager.js\")\n    .then((module) => {\n      if (module.setupSidebarManager) {\n        module.setupSidebarManager();\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error loading sidebar manager:\", error);\n    });\n}\n\n/**\n * Set up all UI event listeners\n */\nfunction setupUIEventListeners() {\n  // Remove this hamburger menu setup - it's handled in sidebarManager\n  console.log(\"UI event listeners set up\");\n}\n\n/**\n * Initialize theme based on saved preferences\n */\nexport function initializeTheme() {\n  const isDarkMode = localStorage.getItem(\"darkMode\") === \"true\";\n  if (isDarkMode) {\n    document.body.classList.add(\"dark-mode\");\n  }\n}\n\n/**\n * Hide element utility (overloaded to accept element object or id string)\n */\nexport function hideElementByObject(element) {\n  if (element) {\n    element.style.display = \"none\";\n  }\n}\n\n/**\n * Show element utility (overloaded to accept element object or id string)\n */\nexport function showElementByObject(element) {\n  if (element) {\n    element.style.display = \"block\";\n  }\n}\n\n/**\n * Initialize debug action buttons\n */\nfunction initializeDebugActionButtons() {\n  const clearDataBtn = document.getElementById(\"clearDataBtn\");\n  if (clearDataBtn) {\n    clearDataBtn.addEventListener(\"click\", () => {\n      if (confirm(\"This will clear all your data. Are you sure?\")) {\n        try {\n          // FIXED: Ensure default categories are loaded after clearing data\n          localStorage.clear();\n\n          // Initialize default categories immediately\n          import(\"../constants/categories.js\").then((categoriesModule) => {\n            import(\"../core/appState.js\").then((appStateModule) => {\n              appStateModule.AppState.categories = {\n                ...categoriesModule.DEFAULT_CATEGORIES,\n              };\n              localStorage.setItem(\n                \"categories\",\n                JSON.stringify(appStateModule.AppState.categories)\n              );\n              console.log(\"Clear Data: Restored default categories\");\n              location.reload();\n            });\n          });\n        } catch (error) {\n          console.error(\"Error clearing data:\", error);\n          showToast(\"Error clearing data\", \"error\");\n        }\n      }\n    });\n  }\n\n  const exportDebugBtn = document.getElementById(\"exportDebugBtn\");\n  if (exportDebugBtn) {\n    exportDebugBtn.addEventListener(\"click\", () => {\n      try {\n        const debugData = {\n          localStorage: { ...localStorage },\n          appState: window.AppState || {},\n          timestamp: new Date().toISOString(),\n          userAgent: navigator.userAgent,\n        };\n\n        const blob = new Blob([JSON.stringify(debugData, null, 2)], {\n          type: \"application/json\",\n        });\n        const url = URL.createObjectURL(blob);\n        const link = document.createElement(\"a\");\n        link.href = url;\n        link.download = `expense-tracker-debug-${Date.now()}.json`;\n        link.click();\n        URL.revokeObjectURL(url);\n\n        showToast(\"Debug data exported\", \"success\");\n      } catch (error) {\n        console.error(\"Error exporting debug data:\", error);\n        showToast(\"Error exporting debug data\", \"error\");\n      }\n    });\n  }\n}\n\n/**\n * Updates UI elements based on debug mode state\n */\nexport function updateDebugVisibility(isDebugMode) {\n  const debugElements = document.querySelectorAll(\".debug-only\");\n  console.log(\n    `Found ${debugElements.length} debug elements to ${\n      isDebugMode ? \"show\" : \"hide\"\n    }`\n  );\n\n  debugElements.forEach((element) => {\n    if (isDebugMode) {\n      // Show the element with proper display type\n      if (element.classList.contains(\"inline-element\")) {\n        element.style.display = \"inline-block\";\n      } else if (element.classList.contains(\"flex-element\")) {\n        element.style.display = \"flex\";\n      } else {\n        element.style.display = \"block\";\n      }\n      element.style.visibility = \"visible\";\n      element.style.opacity = \"1\";\n    } else {\n      // Hide the element\n      element.style.display = \"none\";\n      element.style.visibility = \"hidden\";\n      element.style.opacity = \"0\";\n    }\n  });\n\n  // Update console logs button visibility\n  const saveButton = document.querySelector('button[onclick*=\"saveLogs\"]');\n  if (saveButton) {\n    saveButton.style.display = isDebugMode ? \"block\" : \"none\";\n  }\n\n  console.log(\n    `Debug visibility updated: ${isDebugMode ? \"shown\" : \"hidden\"} for ${\n      debugElements.length\n    } elements`\n  );\n}\n\n/**\n * Initialize dark mode toggle functionality\n */\nfunction initializeDarkModeToggle() {\n  const darkModeToggle = document.getElementById(\"darkModeToggle\");\n\n  if (!darkModeToggle) {\n    console.warn(\"Dark mode toggle not found\");\n    return;\n  }\n\n  // Set initial state\n  const isDarkMode = localStorage.getItem(\"darkMode\") === \"true\";\n  darkModeToggle.checked = isDarkMode;\n  document.body.classList.toggle(\"dark-mode\", isDarkMode);\n\n  // Add event listener\n  darkModeToggle.addEventListener(\"change\", (e) => {\n    const isEnabled = e.target.checked;\n    document.body.classList.toggle(\"dark-mode\", isEnabled);\n    localStorage.setItem(\"darkMode\", isEnabled.toString());\n\n    // Show toast notification\n    showToast(`Dark mode ${isEnabled ? \"enabled\" : \"disabled\"}`, \"info\");\n  });\n\n  console.log(\"Dark mode toggle initialized successfully\");\n}\n\n/**\n * Toggle debug mode\n */\nfunction toggleDebugMode() {\n  const currentDebugMode = localStorage.getItem(\"debugMode\") === \"true\";\n  const newDebugMode = !currentDebugMode;\n  updateDebugVisibility(newDebugMode);\n  showToast(`Debug mode ${newDebugMode ? \"enabled\" : \"disabled\"}`, \"info\");\n\n  console.log(`Debug mode toggled: ${newDebugMode}`);\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\utils\\analytics.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\utils\\categoryUtils.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\utils\\console-logger.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":44,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":44,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1340,1437],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":118,"column":8,"nodeType":"MemberExpression","messageId":"unexpected","endLine":118,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":124,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":124,"endColumn":12},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":145,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":145,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3812,3882],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":235,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":235,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6652,6762],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":242,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":242,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6889,6928],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":257,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":257,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7332,7380],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":267,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":267,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7633,7672],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":273,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":273,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7838,7936],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":286,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":286,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8188,8241],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// FIXED: Initialize logging immediately when script loads, not on DOMContentLoaded\nlet logContent = [];\n\n// FIXED: Export to global scope immediately\nwindow.saveConsoleLogs = function () {\n  try {\n    const timestamp = new Date()\n      .toISOString()\n      .replace(/[:.]/g, \"-\")\n      .split(\".\")[0];\n    const filename = `console-logs-${timestamp}.json`;\n\n    const logData = {\n      exportInfo: {\n        timestamp: new Date().toISOString(),\n        userAgent: navigator.userAgent,\n        url: window.location.href,\n        totalLogs: logContent.length,\n      },\n      appState: {\n        transactions: window.AppState?.transactions?.length || 0,\n        mergedFiles: window.AppState?.mergedFiles?.length || 0,\n        categories: Object.keys(window.AppState?.categories || {}).length,\n      },\n      logs: logContent.map((log) => ({\n        ...log,\n        timestamp: new Date(log.timestamp).toISOString(),\n      })),\n    };\n\n    const jsonString = JSON.stringify(logData, null, 2);\n    const blob = new Blob([jsonString], { type: \"application/json\" });\n    const url = URL.createObjectURL(blob);\n\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = filename;\n    a.style.display = \"none\";\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n\n    console.log(\n      `Γ£à Successfully saved ${logContent.length} console logs to ${filename}`\n    );\n  } catch (error) {\n    console.error(\"Γ¥î Error saving logs:\", error);\n    alert(\"Error saving logs: \" + error.message);\n  }\n};\n\n// FIXED: Enhanced log capture with proper JSON serialization\nfunction appendToLog(type, args) {\n  const timestamp = new Date().toISOString();\n\n  // Convert arguments to serializable format\n  const serializedArgs = args.map((arg) => {\n    if (arg === null) return null;\n    if (arg === undefined) return \"[undefined]\";\n\n    if (typeof arg === \"object\") {\n      try {\n        // Handle special objects\n        if (arg instanceof Error) {\n          return {\n            type: \"Error\",\n            name: arg.name,\n            message: arg.message,\n            stack: arg.stack,\n          };\n        }\n\n        if (arg instanceof Date) {\n          return {\n            type: \"Date\",\n            value: arg.toISOString(),\n          };\n        }\n\n        // Try to serialize object\n        return JSON.parse(JSON.stringify(arg));\n      } catch (e) {\n        // Log the serialization error and return a fallback representation\n        console.warn(\"Failed to serialize object:\", e.message);\n        return `[Object: ${Object.prototype.toString.call(arg)}]`;\n      }\n    }\n\n    return arg;\n  });\n\n  // Create log entry\n  const logEntry = {\n    timestamp,\n    type: type.toUpperCase(),\n    message: args\n      .map((arg) =>\n        typeof arg === \"object\" && arg !== null\n          ? JSON.stringify(arg, null, 2)\n          : String(arg)\n      )\n      .join(\" \"),\n    args: serializedArgs,\n    url: window.location.href,\n  };\n\n  logContent.push(logEntry);\n\n  // Keep only last 1000 entries to prevent memory issues\n  if (logContent.length > 1000) {\n    logContent = logContent.slice(-1000);\n  }\n}\n\n// FIXED: Override console methods immediately\nconst originalMethods = {\n  log: console.log,\n  error: console.error,\n  warn: console.warn,\n  info: console.info,\n};\n\nconsole.log = function (...args) {\n  appendToLog(\"log\", args);\n  originalMethods.log.apply(console, args);\n};\n\nconsole.error = function (...args) {\n  appendToLog(\"error\", args);\n  originalMethods.error.apply(console, args);\n};\n\nconsole.warn = function (...args) {\n  appendToLog(\"warn\", args);\n  originalMethods.warn.apply(console, args);\n};\n\nconsole.info = function (...args) {\n  appendToLog(\"info\", args);\n  originalMethods.info.apply(console, args);\n};\n\n// Log that console logger is active\nconsole.log(\"≡ƒô¥ Console logger initialized with JSON export support\");\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  // Create save button\n  const saveButton = document.createElement(\"button\");\n  saveButton.textContent = \"Save Logs\";\n  saveButton.style.cssText = `\n    position: fixed;\n    bottom: 10px;\n    right: 10px;\n    padding: 10px 15px;\n    background: #007BFF;\n    color: white;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n    z-index: 9999;\n    font-size: 12px;\n    box-shadow: 0 2px 5px rgba(0,0,0,0.2);\n  `;\n\n  // Show/hide based on debug mode\n  function updateButtonVisibility() {\n    const isDebugMode = localStorage.getItem(\"debugMode\") === \"true\";\n    saveButton.style.display = isDebugMode ? \"block\" : \"none\";\n  }\n\n  updateButtonVisibility();\n  document.body.appendChild(saveButton);\n\n  // Listen for debug mode changes\n  window.addEventListener(\"storage\", function (e) {\n    if (e.key === \"debugMode\") {\n      updateButtonVisibility();\n    }\n  });\n\n  // FIXED: Save logs function with clear logs option\n  function saveLogs() {\n    try {\n      const timestamp = new Date()\n        .toISOString()\n        .replace(/[:.]/g, \"-\")\n        .split(\".\")[0];\n      const filename = `console-logs-${timestamp}.json`;\n\n      // Create comprehensive JSON log structure\n      const logData = {\n        exportInfo: {\n          timestamp: new Date().toISOString(),\n          userAgent: navigator.userAgent,\n          url: window.location.href,\n          totalLogs: logContent.length,\n        },\n        appState: {\n          transactions: window.AppState?.transactions?.length || 0,\n          mergedFiles: window.AppState?.mergedFiles?.length || 0,\n          categories: Object.keys(window.AppState?.categories || {}).length,\n          currentFile: window.AppState?.currentFileName || null,\n        },\n        localStorage: {\n          transactions: localStorage.getItem(\"transactions\")\n            ? \"present\"\n            : \"missing\",\n          mergedFiles: localStorage.getItem(\"mergedFiles\")\n            ? \"present\"\n            : \"missing\",\n          debugMode: localStorage.getItem(\"debugMode\"),\n          darkMode: localStorage.getItem(\"darkMode\"),\n        },\n        logs: logContent.map((log) => ({\n          ...log,\n          timestamp: new Date(log.timestamp).toISOString(),\n        })),\n      };\n\n      // CRITICAL FIX: Create and download JSON file properly\n      const jsonString = JSON.stringify(logData, null, 2);\n      const blob = new Blob([jsonString], { type: \"application/json\" });\n      const url = URL.createObjectURL(blob);\n\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = filename;\n      a.style.display = \"none\";\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n\n      console.log(\n        `Γ£à CRITICAL: Successfully saved ${logContent.length} log entries to ${filename}`\n      );\n\n      // Optional: Clear logs after saving\n      if (confirm(\"Clear logs after saving?\")) {\n        logContent = [];\n        console.log(\"≡ƒô¥ Console logs cleared\");\n      }\n    } catch (error) {\n      console.error(\"Γ¥î CRITICAL ERROR: Error saving logs:\", error);\n      alert(\"Error saving logs: \" + error.message);\n    }\n  }\n\n  // Attach save function to button\n  saveButton.addEventListener(\"click\", saveLogs);\n\n  // FIXED: Update global function to use the same logic\n  window.saveConsoleLogs = saveLogs;\n  window.clearConsoleLogs = () => {\n    logContent = [];\n    console.log(\"≡ƒô¥ Console logs cleared manually\");\n  };\n\n  // HTTP request logger\n  const originalFetch = window.fetch;\n  if (originalFetch) {\n    window.fetch = function (...args) {\n      const url = args[0] instanceof Request ? args[0].url : args[0];\n      const startTime = performance.now();\n\n      console.log(`≡ƒîÉ HTTP REQUEST: ${url}`);\n\n      return originalFetch\n        .apply(this, args)\n        .then((response) => {\n          const duration = Math.round(performance.now() - startTime);\n          console.log(\n            `Γ£à HTTP RESPONSE: ${response.status} ${url} (${duration}ms)`\n          );\n          return response;\n        })\n        .catch((err) => {\n          const duration = Math.round(performance.now() - startTime);\n          console.error(`Γ¥î HTTP ERROR: ${url} (${duration}ms)`, err);\n          throw err;\n        });\n    };\n  }\n\n  console.log(\"≡ƒô¥ Console logger DOM setup completed\");\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\utils\\dateUtils.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":425,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":425,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12024,12139],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":499,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":499,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14168,14225],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Centralized date utilities for consistent date handling across the application\n */\n\n/**\n * Supported date formats for parsing\n */\nconst DATE_FORMATS = {\n  ISO: /^\\d{4}-\\d{2}-\\d{2}$/, // YYYY-MM-DD\n  US: /^(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})$/, // MM/DD/YYYY\n  EU: /^(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})$/, // DD/MM/YYYY (same pattern, context-dependent)\n  DOT: /^(\\d{1,2})\\.(\\d{1,2})\\.(\\d{4})$/, // DD.MM.YYYY\n  DASH: /^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/, // DD-MM-YYYY\n  REVERSE: /^(\\d{4})\\/(\\d{1,2})\\/(\\d{1,2})$/, // YYYY/MM/DD\n};\n\n/**\n * Check if a value is an Excel date serial number\n * @param {any} value - Value to check\n * @returns {boolean} True if it appears to be an Excel date\n */\nexport function isExcelDate(value) {\n  if (!value && value !== 0) return false;\n\n  const num = parseFloat(value);\n  if (isNaN(num)) return false;\n\n  // FIXED: Only convert numbers that are actual Excel dates (from 1900 onwards)\n  // Excel dates start from 1 (January 1, 1900) to around 2958465 (December 31, 9999)\n  // Typical modern dates are between 25000 (1968) and 55000 (2050+)\n  return num >= 25000 && num <= 100000 && Number.isInteger(num);\n}\n\n/**\n * Convert Excel date serial number to JavaScript Date\n * @param {number} excelDate - Excel date serial number\n * @returns {Date|null} JavaScript Date object or null if invalid\n */\nexport function excelDateToJSDate(excelDate) {\n  if (!isExcelDate(excelDate)) return null;\n\n  try {\n    // FIXED: Use the correct Excel epoch and calculation\n    // Excel's epoch is January 1, 1900, but Excel incorrectly considers 1900 a leap year\n    // The correct calculation is: (excelDate - 1) days from January 1, 1900\n    const excelEpoch = new Date(1900, 0, 1); // January 1, 1900\n    const msPerDay = 24 * 60 * 60 * 1000;\n\n    // FIXED: Use (excelDate - 1) instead of (excelDate - 2) for correct date calculation\n    const jsDate = new Date(excelEpoch.getTime() + (excelDate - 1) * msPerDay);\n\n    // Validate the resulting date\n    if (isNaN(jsDate.getTime())) return null;\n\n    return jsDate;\n  } catch (error) {\n    console.error(\"Error converting Excel date:\", error);\n    return null;\n  }\n}\n\n/**\n * Convert Excel date to ISO string format (YYYY-MM-DD)\n * @param {number} excelDate - Excel date serial number\n * @returns {string|null} ISO date string or null if invalid\n */\nexport function excelDateToISOString(excelDate) {\n  const jsDate = excelDateToJSDate(excelDate);\n  if (!jsDate) return null;\n\n  const year = jsDate.getFullYear();\n  const month = String(jsDate.getMonth() + 1).padStart(2, \"0\");\n  const day = String(jsDate.getDate()).padStart(2, \"0\");\n\n  return `${year}-${month}-${day}`;\n}\n\n/**\n * Format Excel date for preview display\n * @param {number} excelDate - Excel date serial number\n * @returns {string} Formatted preview string\n */\nexport function formatExcelDateForPreview(excelDate) {\n  const isoDate = excelDateToISOString(excelDate);\n  if (!isoDate) return String(excelDate);\n\n  return `${isoDate} (Excel: ${excelDate})`;\n}\n\n/**\n * Validate if a string represents a valid date\n * @param {string} dateStr - Date string to validate\n * @returns {boolean} True if valid date\n */\nexport function isValidDateString(dateStr) {\n  if (!dateStr || typeof dateStr !== \"string\") return false;\n\n  const date = new Date(dateStr);\n  return !isNaN(date.getTime()) && date.getFullYear() > 1900;\n}\n\n/**\n * Parse various date formats into a standardized ISO format (YYYY-MM-DD)\n * @param {any} value - Value to parse as date\n * @returns {string|null} ISO date string or null if invalid\n */\nexport function parseToISODate(value) {\n  if (!value && value !== 0) return null;\n\n  // Handle Excel dates first\n  if (isExcelDate(value)) {\n    return excelDateToISOString(parseFloat(value));\n  }\n\n  // Convert to string for parsing\n  const str = String(value).trim();\n  if (!str) return null;\n\n  // Check if already in ISO format\n  if (DATE_FORMATS.ISO.test(str)) {\n    if (isValidDateString(str)) return str;\n  }\n\n  // Try to parse other formats\n  return parseCustomDateFormats(str);\n}\n\n/**\n * Parse custom date formats and convert to ISO\n * @param {string} dateStr - Date string to parse\n * @returns {string|null} ISO date string or null if invalid\n */\nfunction parseCustomDateFormats(dateStr) {\n  // Try specific format parsers\n  return (\n    parseUSFormat(dateStr) ||\n    parseEUFormat(dateStr) ||\n    parseDotFormat(dateStr) ||\n    parseDashFormat(dateStr) ||\n    parseReverseFormat(dateStr) ||\n    parseNativeFormat(dateStr)\n  );\n}\n\n/**\n * Try to parse US format: MM/DD/YYYY\n */\nfunction parseUSFormat(dateStr) {\n  const dateRegex = DATE_FORMATS.US;\n  const match = dateRegex.exec(dateStr);\n  if (match) {\n    const [, month, day, year] = match;\n    if (isValidDateComponents(year, month, day)) {\n      return formatISODate(year, month, day);\n    }\n  }\n  return null;\n}\n\n/**\n * Try to parse EU format: DD/MM/YYYY (assume if day > 12)\n */\nfunction parseEUFormat(dateStr) {\n  const dateRegex = DATE_FORMATS.EU;\n  const match = dateRegex.exec(dateStr);\n  if (match) {\n    const [, part1, part2, year] = match;\n    if (parseInt(part1) > 12 && isValidDateComponents(year, part2, part1)) {\n      return formatISODate(year, part2, part1);\n    }\n  }\n  return null;\n}\n\n/**\n * Try to parse dot format: DD.MM.YYYY\n */\nfunction parseDotFormat(dateStr) {\n  const dateRegex = DATE_FORMATS.DOT;\n  const match = dateRegex.exec(dateStr);\n  if (match) {\n    const [, day, month, year] = match;\n    if (isValidDateComponents(year, month, day)) {\n      return formatISODate(year, month, day);\n    }\n  }\n  return null;\n}\n\n/**\n * Try to parse dash format: DD-MM-YYYY\n */\nfunction parseDashFormat(dateStr) {\n  const dateRegex = DATE_FORMATS.DASH;\n  const match = dateRegex.exec(dateStr);\n  if (match) {\n    const [, day, month, year] = match;\n    if (isValidDateComponents(year, month, day)) {\n      return formatISODate(year, month, day);\n    }\n  }\n  return null;\n}\n\n/**\n * Try to parse reverse format: YYYY/MM/DD\n */\nfunction parseReverseFormat(dateStr) {\n  const dateRegex = DATE_FORMATS.REVERSE;\n  const match = dateRegex.exec(dateStr);\n  if (match) {\n    const [, year, month, day] = match;\n    if (isValidDateComponents(year, month, day)) {\n      return formatISODate(year, month, day);\n    }\n  }\n  return null;\n}\n\n/**\n * Try parsing with native Date constructor\n */\nfunction parseNativeFormat(dateStr) {\n  try {\n    const date = new Date(dateStr);\n    if (!isNaN(date.getTime()) && date.getFullYear() > 1900) {\n      const year = date.getFullYear();\n      const month = String(date.getMonth() + 1).padStart(2, \"0\");\n      const day = String(date.getDate()).padStart(2, \"0\");\n      return `${year}-${month}-${day}`;\n    }\n  } catch (error) {\n    console.warn(\"Failed to parse date string:\", dateStr, error.message);\n  }\n  return null;\n}\n\n/**\n * Format components into ISO date string\n */\nfunction formatISODate(year, month, day) {\n  return `${year}-${month.padStart(2, \"0\")}-${day.padStart(2, \"0\")}`;\n}\n\n/**\n * Validate date components\n * @param {string} year - Year component\n * @param {string} month - Month component\n * @param {string} day - Day component\n * @returns {boolean} True if valid components\n */\nfunction isValidDateComponents(year, month, day) {\n  const y = parseInt(year);\n  const m = parseInt(month);\n  const d = parseInt(day);\n\n  if (y < 1900 || y > 2100) return false;\n  if (m < 1 || m > 12) return false;\n  if (d < 1 || d > 31) return false;\n\n  // Create date and check if it's valid\n  const date = new Date(y, m - 1, d);\n  return (\n    date.getFullYear() === y &&\n    date.getMonth() === m - 1 &&\n    date.getDate() === d\n  );\n}\n\n/**\n * Format date for display in different locales\n * @param {string} isoDate - ISO date string (YYYY-MM-DD)\n * @param {string} format - Display format ('US', 'EU', 'ISO')\n * @returns {string} Formatted date string\n */\nexport function formatDateForDisplay(isoDate, format = \"ISO\") {\n  if (!isoDate || !isValidDateString(isoDate)) return isoDate || \"\";\n\n  const date = new Date(isoDate);\n  if (isNaN(date.getTime())) return isoDate;\n\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\n  const day = String(date.getDate()).padStart(2, \"0\");\n\n  switch (format.toUpperCase()) {\n    case \"US\":\n      return `${month}/${day}/${year}`;\n    case \"EU\":\n      return `${day}/${month}/${year}`;\n    case \"ISO\":\n    default:\n      return `${year}-${month}-${day}`;\n  }\n}\n\n/**\n * Check if a column contains date-like values\n * @param {Array} columnValues - Array of values from a column\n * @returns {boolean} True if column appears to contain dates\n */\nexport function isDateColumn(columnValues) {\n  if (!columnValues || columnValues.length === 0) return false;\n\n  let dateCount = 0;\n  let totalValidValues = 0;\n\n  for (const value of columnValues) {\n    if (value !== null && value !== undefined && value !== \"\") {\n      totalValidValues++;\n\n      // Check if it's an Excel date or parseable date\n      if (isExcelDate(value) || parseToISODate(value)) {\n        dateCount++;\n      }\n    }\n  }\n\n  // If at least 60% of non-empty values are dates, consider it a date column\n  return totalValidValues > 0 && dateCount / totalValidValues >= 0.6;\n}\n\n/**\n * Get current date in ISO format\n * @returns {string} Current date as YYYY-MM-DD\n */\nexport function getCurrentISODate() {\n  const now = new Date();\n  const year = now.getFullYear();\n  const month = String(now.getMonth() + 1).padStart(2, \"0\");\n  const day = String(now.getDate()).padStart(2, \"0\");\n  return `${year}-${month}-${day}`;\n}\n\n/**\n * Validate and normalize a date value for storage\n * @param {any} value - Date value to normalize\n * @returns {{isValid: boolean, normalizedDate: string|null, originalValue: any}} Validation result\n */\nexport function validateAndNormalizeDate(value) {\n  const result = {\n    isValid: false,\n    normalizedDate: null,\n    originalValue: value,\n  };\n\n  if (!value && value !== 0) {\n    return result;\n  }\n\n  const normalizedDate = parseToISODate(value);\n\n  if (normalizedDate) {\n    result.isValid = true;\n    result.normalizedDate = normalizedDate;\n  }\n\n  return result;\n}\n\n// Legacy compatibility functions (deprecated but maintained for backward compatibility)\n\n/**\n * FIXED: Use formatDateForDisplay instead of deprecated function\n */\nexport function formatDateToDDMMYYYYDeprecated(dateInput) {\n  console.warn(\n    \"formatDateToDDMMYYYY is deprecated. Use formatDateForDisplay with EU format instead.\"\n  );\n  const isoDate = parseToISODate(dateInput);\n  return isoDate ? formatDateForDisplay(isoDate, \"EU\") : \"\";\n}\n\n/**\n * FIXED: Convert dd/mm/yyyy format to ISO date string with proper validation\n * @param {string} ddmmyyyy - Date in dd/mm/yyyy format\n * @returns {string|null} ISO date string or null if invalid\n */\nexport function convertDDMMYYYYToISO(ddmmyyyy) {\n  if (!ddmmyyyy || typeof ddmmyyyy !== \"string\") {\n    return null;\n  }\n\n  // FIXED: Strict dd/mm/yyyy pattern matching\n  const datePattern = /^(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})$/;\n  const match = datePattern.exec(ddmmyyyy.trim());\n\n  if (!match) {\n    console.warn(\"Date format does not match dd/mm/yyyy:\", ddmmyyyy);\n    return null;\n  }\n\n  const day = parseInt(match[1], 10);\n  const month = parseInt(match[2], 10);\n  const year = parseInt(match[3], 10);\n\n  // FIXED: Validate date components\n  if (\n    day < 1 ||\n    day > 31 ||\n    month < 1 ||\n    month > 12 ||\n    year < 1900 ||\n    year > 2100\n  ) {\n    console.warn(\"Invalid date components:\", { day, month, year });\n    return null;\n  }\n\n  // FIXED: Create date with explicit day/month order - Use UTC to avoid timezone issues\n  const date = new Date(Date.UTC(year, month - 1, day));\n\n  // FIXED: Verify the date was created correctly (handles invalid dates like 31/02)\n  if (\n    date.getUTCFullYear() !== year ||\n    date.getUTCMonth() !== month - 1 ||\n    date.getUTCDate() !== day\n  ) {\n    console.warn(\"Invalid date created:\", ddmmyyyy, \"resulted in:\", date);\n    return null;\n  }\n\n  // FIXED: Return ISO string in YYYY-MM-DD format using UTC\n  const isoString = date.toISOString().split(\"T\")[0];\n  console.log(\n    `Γ£ô Date conversion: ${ddmmyyyy} ΓåÆ ${isoString} (Day: ${day}, Month: ${month}, Year: ${year})`\n  );\n\n  return isoString;\n}\n\n/**\n * @deprecated Use parseToISODate instead\n */\nexport function parseDDMMYYYY(dateStr) {\n  console.warn(\"parseDDMMYYYY is deprecated. Use parseToISODate instead.\");\n  const isoDate = parseToISODate(dateStr);\n  return isoDate ? new Date(isoDate) : null;\n}\n\n/**\n * @deprecated Use getCurrentISODate instead\n */\nexport function getCurrentDateDDMMYYYY() {\n  console.warn(\n    \"getCurrentDateDDMMYYYY is deprecated. Use getCurrentISODate instead.\"\n  );\n  return formatDateForDisplay(getCurrentISODate(), \"EU\");\n}\n\n/**\n * @deprecated Use validateAndNormalizeDate instead\n */\nexport function isValidDDMMYYYY(dateStr) {\n  console.warn(\n    \"isValidDDMMYYYY is deprecated. Use validateAndNormalizeDate instead.\"\n  );\n  return validateAndNormalizeDate(dateStr).isValid;\n}\n\n/**\n * FIXED: Format ISO date or Date object to dd/mm/yyyy with proper validation\n * @param {string|Date} date - ISO date string or Date object\n * @returns {string} Formatted date as dd/mm/yyyy\n */\nexport function formatDateToDDMMYYYY(date) {\n  if (!date) return \"\";\n\n  let dateObj;\n  if (typeof date === \"string\") {\n    // FIXED: Parse ISO date string using UTC to avoid timezone shifts\n    if (date.includes(\"T\")) {\n      dateObj = new Date(date);\n    } else {\n      // For YYYY-MM-DD format, parse as UTC to avoid timezone issues\n      const [yearPart, monthPart, dayPart] = date\n        .split(\"-\")\n        .map((num) => parseInt(num, 10));\n      dateObj = new Date(Date.UTC(yearPart, monthPart - 1, dayPart));\n    }\n  } else if (date instanceof Date) {\n    dateObj = date;\n  } else {\n    return \"\";\n  }\n\n  // FIXED: Validate date object\n  if (isNaN(dateObj.getTime())) {\n    console.warn(\"Invalid date for formatting:\", date);\n    return \"\";\n  }\n\n  // FIXED: Format as dd/mm/yyyy using UTC to maintain consistency\n  const day = String(dateObj.getUTCDate()).padStart(2, \"0\");\n  const month = String(dateObj.getUTCMonth() + 1).padStart(2, \"0\");\n  const year = dateObj.getUTCFullYear();\n\n  const formatted = `${day}/${month}/${year}`;\n  console.log(`Γ£ô Date formatting: ${date} ΓåÆ ${formatted}`);\n\n  return formatted;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\utils\\debug.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":8,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":8,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[224,284],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":251,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":251,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8228,8294],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":340,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":340,"endColumn":21},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":394,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":394,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12653,12703],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":413,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":413,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13160,13211],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":417,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":417,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13299,13373],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":435,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":435,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14011,14053],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":440,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":440,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14115,14175],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'appStateModule' is defined but never used. Allowed unused args must match /^_/u.","line":447,"column":43,"nodeType":"Identifier","messageId":"unusedVar","endLine":447,"endColumn":57},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":452,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":452,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14504,14609],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":491,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":491,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15568,15694],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":521,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":521,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16253,16296],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AppState } from \"../core/appState.js\";\nimport { showModal } from \"../ui/modalManager.js\";\n\n/**\n * Enhanced debug function for transaction data with detailed analysis\n */\nexport function inspectTransactionData() {\n  console.log(\"Opening transaction data inspection modal...\");\n\n  const transactions = AppState.transactions || [];\n\n  if (transactions.length === 0) {\n    showModal({\n      title: \"Transaction Data Analysis\",\n      content: `\n        <div class=\"debug-info\">\n          <p style=\"text-align: center; color: #666; padding: 40px;\">\n            No transactions available to analyze\n          </p>\n        </div>\n      `,\n    });\n    return;\n  }\n\n  // Analyze transaction data\n  const analysis = analyzeTransactionData(transactions);\n\n  const modalContent = `\n    <div class=\"debug-info\" style=\"max-height: 500px; overflow-y: auto;\">\n      <div class=\"debug-section\">\n        <h3>Transaction Summary</h3>\n        <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 15px;\">\n          <div>\n            <p><strong>Total Transactions:</strong> ${analysis.total}</p>\n            <p><strong>Date Range:</strong> ${analysis.dateRange}</p>\n            <p><strong>Total Income:</strong> ${analysis.totalIncome}</p>\n            <p><strong>Total Expenses:</strong> ${analysis.totalExpenses}</p>\n            <p><strong>Net Balance:</strong> ${analysis.netBalance}</p>\n          </div>\n          <div>\n            <p><strong>Currencies:</strong> ${analysis.currencies.join(\n              \", \"\n            )}</p>\n            <p><strong>Categories:</strong> ${analysis.categoryCount} unique</p>\n            <p><strong>Uncategorized:</strong> ${analysis.uncategorized}</p>\n            <p><strong>Average Transaction:</strong> ${analysis.avgAmount}</p>\n            <p><strong>Source Files:</strong> ${analysis.sourceFiles.length}</p>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"debug-section\">\n        <h3>Category Breakdown</h3>\n        <div style=\"max-height: 150px; overflow-y: auto;\">\n          <table style=\"width: 100%; border-collapse: collapse; font-size: 12px;\">\n            <thead>\n              <tr style=\"background: #f5f5f5;\">\n                <th style=\"padding: 5px; border: 1px solid #ddd;\">Category</th>\n                <th style=\"padding: 5px; border: 1px solid #ddd;\">Count</th>\n                <th style=\"padding: 5px; border: 1px solid #ddd;\">Amount</th>\n              </tr>\n            </thead>\n            <tbody>\n              ${Object.entries(analysis.categoryBreakdown)\n                .map(\n                  ([cat, data]) => `\n                <tr>\n                  <td style=\"padding: 5px; border: 1px solid #ddd;\">${cat}</td>\n                  <td style=\"padding: 5px; border: 1px solid #ddd;\">${\n                    data.count\n                  }</td>\n                  <td style=\"padding: 5px; border: 1px solid #ddd;\">${data.amount.toFixed(\n                    2\n                  )}</td>\n                </tr>\n              `\n                )\n                .join(\"\")}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      <div class=\"debug-section\">\n        <h3>Data Quality Issues</h3>\n        <ul>\n          ${analysis.issues\n            .map((issue) => '<li style=\"color: #dc3545;\">' + issue + \"</li>\")\n            .join(\"\")}\n          ${\n            analysis.issues.length === 0\n              ? '<li style=\"color: #28a745;\">No data quality issues found</li>'\n              : \"\"\n          }\n        </ul>\n      </div>\n\n      <div class=\"debug-section\">\n        <h3>Sample Transactions (First 10)</h3>\n        <div style=\"max-height: 200px; overflow-y: auto;\">\n          <table style=\"width: 100%; border-collapse: collapse; font-size: 11px;\">\n            <thead>\n              <tr style=\"background: #f5f5f5;\">\n                <th style=\"padding: 4px; border: 1px solid #ddd;\">Date</th>\n                <th style=\"padding: 4px; border: 1px solid #ddd;\">Description</th>\n                <th style=\"padding: 4px; border: 1px solid #ddd;\">Amount</th>\n                <th style=\"padding: 4px; border: 1px solid #ddd;\">Category</th>\n                <th style=\"padding: 4px; border: 1px solid #ddd;\">Currency</th>\n              </tr>\n            </thead>\n            <tbody>\n              ${transactions\n                .slice(0, 10)\n                .map(\n                  (tx) => `\n                <tr>\n                  <td style=\"padding: 4px; border: 1px solid #ddd;\">${\n                    tx.date || \"N/A\"\n                  }</td>\n                  <td style=\"padding: 4px; border: 1px solid #ddd; max-width: 150px; overflow: hidden; text-overflow: ellipsis;\" title=\"${\n                    tx.description || \"\"\n                  }\">${tx.description || \"N/A\"}</td>\n                  <td style=\"padding: 4px; border: 1px solid #ddd;\">${\n                    (parseFloat(tx.income) || 0) -\n                    (parseFloat(tx.expenses) || 0)\n                  }</td>\n                  <td style=\"padding: 4px; border: 1px solid #ddd;\">${\n                    tx.category || \"Uncategorized\"\n                  }</td>\n                  <td style=\"padding: 4px; border: 1px solid #ddd;\">${\n                    tx.currency || \"N/A\"\n                  }</td>\n                </tr>\n              `\n                )\n                .join(\"\")}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  `;\n\n  showModal({\n    title: \"Transaction Data Analysis\",\n    content: modalContent,\n    size: \"large\",\n  });\n}\n\n/**\n * Analyze transaction data for insights\n */\nfunction analyzeTransactionData(transactions) {\n  const analysis = {\n    total: transactions.length,\n    totalIncome: 0,\n    totalExpenses: 0,\n    netBalance: 0,\n    currencies: new Set(),\n    categoryBreakdown: {},\n    categoryCount: 0,\n    uncategorized: 0,\n    sourceFiles: new Set(),\n    issues: [],\n    dateRange: \"N/A\",\n    avgAmount: 0,\n  };\n\n  let validDates = [];\n  let totalAbsoluteAmount = 0;\n\n  transactions.forEach((tx) => {\n    // Income and expenses\n    const income = parseFloat(tx.income) || 0;\n    const expenses = parseFloat(tx.expenses) || 0;\n\n    analysis.totalIncome += income;\n    analysis.totalExpenses += expenses;\n    totalAbsoluteAmount += Math.abs(income) + Math.abs(expenses);\n\n    // Currencies\n    if (tx.currency) {\n      analysis.currencies.add(tx.currency);\n    }\n\n    // Categories\n    const category = tx.category || \"Uncategorized\";\n    if (category === \"Uncategorized\") {\n      analysis.uncategorized++;\n    }\n\n    if (!analysis.categoryBreakdown[category]) {\n      analysis.categoryBreakdown[category] = { count: 0, amount: 0 };\n    }\n    analysis.categoryBreakdown[category].count++;\n    analysis.categoryBreakdown[category].amount += expenses;\n\n    // Source files\n    if (tx.fileName) {\n      analysis.sourceFiles.add(tx.fileName);\n    }\n\n    // Date validation\n    if (tx.date) {\n      const date = new Date(tx.date);\n      if (!isNaN(date.getTime())) {\n        validDates.push(date);\n      } else {\n        analysis.issues.push(`Invalid date format: ${tx.date}`);\n      }\n    } else {\n      analysis.issues.push(\"Transaction missing date\");\n    }\n\n    // Data quality checks\n    if (!tx.description || tx.description.trim() === \"\") {\n      analysis.issues.push(\"Transaction missing description\");\n    }\n\n    if (income === 0 && expenses === 0) {\n      analysis.issues.push(\"Transaction with zero amount\");\n    }\n  });\n\n  // Calculate derived values\n  analysis.netBalance = analysis.totalIncome - analysis.totalExpenses;\n  analysis.currencies = Array.from(analysis.currencies);\n  analysis.sourceFiles = Array.from(analysis.sourceFiles);\n  analysis.categoryCount = Object.keys(analysis.categoryBreakdown).length;\n  analysis.avgAmount =\n    transactions.length > 0 ? totalAbsoluteAmount / transactions.length : 0;\n\n  // Date range\n  if (validDates.length > 0) {\n    validDates.sort((a, b) => a - b);\n    const earliest = validDates[0].toDateString();\n    const latest = validDates[validDates.length - 1].toDateString();\n    analysis.dateRange =\n      earliest === latest ? earliest : `${earliest} - ${latest}`;\n  }\n\n  return analysis;\n}\n\n/**\n * Debug function for merged files\n */\nexport function debugMergedFiles() {\n  console.log(\"Debug merged files triggered\", AppState.mergedFiles);\n\n  const modalContent = document.createElement(\"div\");\n\n  if (!AppState.mergedFiles || AppState.mergedFiles.length === 0) {\n    modalContent.innerHTML = \"<p>No merged files available to debug.</p>\";\n  } else {\n    const filesInfo = AppState.mergedFiles\n      .map((file, index) => {\n        return `\n        <div style=\"border: 1px solid #ddd; padding: 10px; margin: 5px 0;\">\n          <h4>File ${index + 1}: ${file.fileName || \"Unknown\"}</h4>\n          <p><strong>Signature:</strong> ${file.signature || \"None\"}</p>\n          <p><strong>Data rows:</strong> ${file.data ? file.data.length : 0}</p>\n          <p><strong>Header row:</strong> ${file.headerRowIndex || 0}</p>\n          <p><strong>Data start row:</strong> ${file.dataRowIndex || 1}</p>\n          <p><strong>Currency:</strong> ${file.currency || \"USD\"}</p>\n        </div>\n      `;\n      })\n      .join(\"\");\n\n    modalContent.innerHTML = `\n      <h3>Merged Files Debug (${AppState.mergedFiles.length} files)</h3>\n      ${filesInfo}\n    `;\n  }\n\n  showModal({\n    title: \"Merged Files Debug\",\n    content: modalContent,\n    size: \"large\",\n  });\n}\n\n/**\n * Debug function for signatures\n */\nexport function debugSignatures() {\n  const modalContent = document.createElement(\"div\");\n\n  // Current file signature section\n  let currentFileSection = \"<h3>Current File Signature</h3>\";\n  if (AppState.currentFileSignature && AppState?.currentFileName) {\n    currentFileSection += `\n      <p><strong>File:</strong> ${AppState.currentFileName}</p>\n      <p><strong>Signature:</strong> ${AppState.currentFileSignature}</p>\n    `;\n  } else {\n    currentFileSection += \"<p>No current file signature available.</p>\";\n  }\n\n  // FIXED: Get saved mappings from localStorage\n  const mappings = JSON.parse(\n    localStorage.getItem(\"fileFormatMappings\") || \"[]\"\n  );\n  let mappingsSection = \"<h3>Saved Format Mappings</h3>\";\n\n  if (mappings.length > 0) {\n    mappingsSection += mappings\n      .map((mapping, index) => {\n        const fields = mapping.mapping\n          ? mapping.mapping.filter((m) => m !== \"ΓÇô\").join(\", \")\n          : \"No mapping\";\n        const created = mapping.created\n          ? new Date(mapping.created).toLocaleString()\n          : \"Unknown\";\n\n        return `\n        <div style=\"border: 1px solid #ddd; padding: 10px; margin: 5px 0;\">\n          <strong>Mapping ${index + 1}:</strong> ${\n          mapping.signature || \"Unknown signature\"\n        }<br>\n          <strong>File:</strong> ${mapping.fileName || \"Unknown\"}<br>\n          <strong>Fields:</strong> ${fields}<br>\n          <strong>Created:</strong> ${created}\n        </div>\n      `;\n      })\n      .join(\"\");\n  } else {\n    mappingsSection += \"<p>No saved mappings found.</p>\";\n  }\n\n  // Merged files signatures section\n  let filesSection = \"<h3>Merged Files Signatures</h3>\";\n  if (AppState.mergedFiles?.length > 0) {\n    filesSection += AppState.mergedFiles\n      .map(\n        (file, index) => `\n      <div style=\"border: 1px solid #ddd; padding: 10px; margin: 5px 0;\">\n        <strong>${file.fileName}:</strong> ${\n          file.signature || \"No signature\"\n        }<br>\n        <strong>Mapping:</strong> ${\n          file.headerMapping\n            ? file.headerMapping.filter((m) => m !== \"ΓÇô\").join(\", \")\n            : \"No mapping\"\n        }<br>\n        <strong>Transactions:</strong> ${\n          file.transactions ? file.transactions.length : 0\n        }\n      </div>\n    `\n      )\n      .join(\"\");\n  } else {\n    filesSection += \"<p>No merged files available.</p>\";\n  }\n\n  // Combine all sections\n  modalContent.innerHTML = currentFileSection + mappingsSection + filesSection;\n\n  showModal({\n    title: \"≡ƒöì Debug: File Signatures & Mappings\",\n    content: modalContent,\n    size: \"large\",\n  });\n}\n\n/**\n * Check if debug mode is active\n */\nfunction isDebugModeActive() {\n  return (\n    localStorage.getItem(\"debugMode\") === \"true\" &&\n    document.body.classList.contains(\"debug-mode\")\n  );\n}\n\n/**\n * Make sure debug functions are attached to window\n */\nexport function attachDebugFunctions() {\n  // Only attach debug functions once\n  if (window.debugFunctionsAttached) return;\n\n  // Ensure these functions are available globally\n  window.inspectTransactionData = inspectTransactionData;\n  window.debugMergedFiles = debugMergedFiles;\n  window.debugSignatures = debugSignatures;\n  window.resetApplication = resetApplication;\n\n  console.log(\"Debug functions attached to window\");\n\n  window.debugFunctionsAttached = true;\n\n  // Add event listeners to debug buttons if DOM is ready, otherwise wait\n  if (document.readyState === \"loading\") {\n    document.addEventListener(\"DOMContentLoaded\", attachDebugButtonListeners);\n  } else {\n    attachDebugButtonListeners();\n  }\n}\n\n/**\n * Update the attachDebugButtonListeners function\n */\nfunction attachDebugButtonListeners() {\n  // Only attach once\n  if (window.debugButtonsAttached) return;\n\n  console.log(\"Attaching debug button listeners...\");\n\n  // Check if debug mode is active before attaching\n  if (!isDebugModeActive()) {\n    console.log(\"Debug mode not active, skipping button listener attachment\");\n    return;\n  }\n\n  // Use a more reliable method to attach listeners\n  setTimeout(() => {\n    const debugButtons = [\n      { id: \"debugFilesBtn\", handler: debugMergedFiles },\n      { id: \"debugSignaturesBtn\", handler: debugSignatures },\n      { id: \"debugTransactionsBtn\", handler: inspectTransactionData },\n      { id: \"resetAppBtn\", handler: resetApplication },\n    ];\n\n    debugButtons.forEach(({ id, handler }) => {\n      const button = document.getElementById(id);\n      if (button && !button?.dataset?.listenerAttached) {\n        button.addEventListener(\"click\", handler);\n        button.dataset.listenerAttached = \"true\";\n        console.log(`Attached listener to ${id}`);\n      }\n    });\n\n    window.debugButtonsAttached = true;\n    console.log(\"Debug button listeners attached successfully\");\n  }, 500);\n}\n\n/**\n * Helper function to handle category manager import and reset\n */\nasync function resetCategoriesAndFinalize(appStateModule) {\n  try {\n    const categoryModule = await import(\"../ui/categoryManager.js\");\n    if (categoryModule.resetToDefaultCategories) {\n      categoryModule.resetToDefaultCategories();\n      console.log(\n        \"CRITICAL: Called resetToDefaultCategories() exactly like the reset button\"\n      );\n    }\n  } catch (error) {\n    console.warn(\"Could not call resetToDefaultCategories:\", error);\n  }\n\n  // Show confirmation and reload\n  setTimeout(async () => {\n    try {\n      const uiModule = await import(\"../ui/uiManager.js\");\n      if (uiModule.showToast) {\n        uiModule.showToast(\n          \"Application reset complete with default categories loaded. Reloading...\",\n          \"success\"\n        );\n      }\n    } catch (error) {\n      console.warn(\"Could not show toast:\", error);\n    }\n    window.location.reload();\n  }, 500);\n}\n\n/**\n * Helper function to handle app state setup\n */\nasync function setupAppStateWithDefaults(categoriesModule) {\n  const appStateModule = await import(\"../core/appState.js\");\n  appStateModule.AppState.categories = {\n    ...categoriesModule.DEFAULT_CATEGORIES,\n  };\n\n  // Save categories immediately to localStorage\n  localStorage.setItem(\n    \"categories\",\n    JSON.stringify(appStateModule.AppState.categories)\n  );\n  console.log(\n    `Reset: Loaded ${\n      Object.keys(appStateModule.AppState.categories).length\n    } default categories`\n  );\n\n  await resetCategoriesAndFinalize(appStateModule);\n}\n\n/**\n * Helper function to show error toast\n */\nasync function showResetError() {\n  try {\n    const uiModule = await import(\"../ui/uiManager.js\");\n    if (uiModule.showToast) {\n      uiModule.showToast(\n        \"Error occurred during reset. Please refresh the page manually.\",\n        \"error\"\n      );\n    }\n  } catch (error) {\n    console.warn(\"Could not show error toast:\", error);\n  }\n}\n\n/**\n * Reset application function with improved error handling\n */\nexport async function resetApplication() {\n  console.log(\"Reset application triggered\");\n\n  if (\n    confirm(\n      \"Are you sure you want to reset the application? This will clear all data and reload the page.\"\n    )\n  ) {\n    try {\n      // Clear all localStorage\n      localStorage.clear();\n\n      // Clear sessionStorage\n      sessionStorage.clear();\n\n      // CRITICAL FIX: Reset AppState data immediately\n      const appStateModule = await import(\"../core/appState.js\");\n\n      // Reset all app state data\n      appStateModule.AppState.transactions = [];\n      appStateModule.AppState.files = [];\n      appStateModule.AppState.fileData = {};\n      appStateModule.AppState.mappings = {};\n      appStateModule.AppState.currentData = null;\n      appStateModule.AppState.lastFileId = 0;\n\n      // Initialize default categories\n      const categoriesModule = await import(\"../constants/categories.js\");\n      await setupAppStateWithDefaults(categoriesModule);\n\n      // Force refresh UI after reset\n      setTimeout(() => {\n        window.location.reload();\n      }, 100);\n    } catch (error) {\n      console.error(\"Error during reset:\", error);\n      await showResetError();\n    }\n  }\n}\n\n// Call attachDebugFunctions immediately when module loads\nattachDebugFunctions();\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\utils\\fileUtils.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\utils\\i18n.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\utils\\utils.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'isDateColumnLegacy' is defined but never used.","line":85,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":85,"endColumn":28},{"ruleId":"no-unused-vars","severity":1,"message":"'parseToDateStringLegacy' is defined but never used.","line":128,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":128,"endColumn":33},{"ruleId":"no-unused-vars","severity":1,"message":"'formatDateLegacy' is defined but never used.","line":263,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":263,"endColumn":26},{"ruleId":"no-unused-vars","severity":1,"message":"'processTransactions' is defined but never used.","line":443,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":443,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Directory: /src/utils/utils.js\n\n/**\n * Utility functions shared across the application\n */\n\n// Import the new date utilities\nimport {\n  isExcelDate,\n  excelDateToJSDate,\n  excelDateToISOString,\n  parseToISODate,\n  isValidDateString,\n  formatDateForDisplay,\n  isDateColumn as isDateColumnUtil,\n  validateAndNormalizeDate,\n} from \"./dateUtils.js\";\n\n// Re-export date utilities for backward compatibility\nexport {\n  isExcelDate,\n  excelDateToJSDate,\n  parseToISODate as parseToDateString,\n  isValidDateString as isValidDate,\n  formatDateForDisplay as formatDate,\n  isDateColumnUtil as isDateColumn,\n  validateAndNormalizeDate,\n};\n\n/**\n * DEPRECATED: Use parseToISODate from dateUtils instead\n * @deprecated\n */\nexport function excelDateToString(excelDate) {\n  console.warn(\n    \"excelDateToString is deprecated. Use excelDateToISOString from dateUtils instead.\"\n  );\n  return excelDateToISOString(excelDate);\n}\n\n/**\n * Formats an Excel date for preview display\n * @param {any} value - The value to format\n * @returns {string} Formatted date string\n */\nexport function formatExcelDateForPreview(value) {\n  if (!isExcelDate(value)) return String(value);\n\n  const isoDate = excelDateToISOString(value);\n  if (!isoDate) return String(value);\n\n  return `${isoDate} (Excel: ${value})`;\n}\n\n/**\n * Detects if a column contains Excel date values\n * @param {Array} columnValues - Array of values from a column\n * @returns {boolean} True if column appears to contain Excel dates\n */\nexport function isExcelDateColumn(columnValues) {\n  if (!columnValues || columnValues.length === 0) return false;\n\n  let excelDateCount = 0;\n  let totalValidValues = 0;\n\n  for (const value of columnValues) {\n    if (value !== null && value !== undefined && value !== \"\") {\n      totalValidValues++;\n      if (isExcelDate(value)) {\n        excelDateCount++;\n      }\n    }\n  }\n\n  // If at least 60% of non-empty values are Excel dates, consider it an Excel date column\n  return totalValidValues > 0 && excelDateCount / totalValidValues >= 0.6;\n}\n\n/**\n * Enhanced date detection that includes Excel dates (legacy function)\n * @param {Array} columnValues - Array of values from a column\n * @returns {boolean} True if column contains date-like values\n * @deprecated Use isDateColumn from dateUtils.js instead\n */\nfunction isDateColumnLegacy(columnValues) {\n  if (!columnValues || columnValues.length === 0) return false;\n\n  // First check for Excel dates\n  if (isExcelDateColumn(columnValues)) {\n    return true;\n  }\n\n  // Then check for standard date formats\n  let dateCount = 0;\n  let totalValidValues = 0;\n\n  for (const value of columnValues) {\n    if (value !== null && value !== undefined && value !== \"\") {\n      totalValidValues++;\n\n      const str = String(value).trim();\n\n      // Check for various date formats\n      const datePatterns = [\n        /^\\d{4}[-/]\\d{1,2}[-/]\\d{1,2}$/, // YYYY-MM-DD, YYYY/MM/DD\n        /^\\d{1,2}[-/]\\d{1,2}[-/]\\d{4}$/, // DD-MM-YYYY, MM/DD/YYYY\n        /^\\d{1,2}[-/]\\d{1,2}[-/]\\d{2}$/, // DD-MM-YY, MM/DD/YY\n        /^\\d{4}\\d{2}\\d{2}$/, // YYYYMMDD\n        /^\\d{2}\\d{2}\\d{4}$/, // DDMMYYYY or MMDDYYYY\n      ];\n\n      if (datePatterns.some((pattern) => pattern.test(str))) {\n        dateCount++;\n      }\n    }\n  }\n\n  // If at least 50% of non-empty values are dates, consider it a date column\n  return totalValidValues > 0 && dateCount / totalValidValues >= 0.5;\n}\n\n/**\n * Safely attempts to parse any value into a valid date string (legacy function)\n * @param {any} value - Value to convert to a date\n * @return {string|null} Date string or null if invalid\n * @deprecated Use parseToISODate from dateUtils.js instead\n */\nfunction parseToDateStringLegacy(value) {\n  if (value === null || value === undefined || value === \"\") return null;\n  if (isExcelDate(value)) return excelDateToISOString(parseFloat(value));\n  if (typeof value === \"string\") {\n    const stringDateResult = parseStringToDateFormat(value);\n    if (stringDateResult) return stringDateResult;\n\n    const date = new Date(value);\n    if (!isNaN(date.getTime())) return date.toISOString().split(\"T\")[0];\n  }\n  if (value instanceof Date) return value.toISOString().split(\"T\")[0];\n  return null;\n}\n\n/**\n * Helper function to parse string date formats like dd/mm/yyyy\n * @param {string} value - String value to parse\n * @return {string|null} Formatted date or null\n */\nfunction parseStringToDateFormat(value) {\n  const dateRegex = /(\\d{1,4})[/\\-.](\\d{1,2})[/\\-.](\\d{1,4})/;\n  const dateMatch = dateRegex.exec(value);\n  if (!dateMatch) return null;\n\n  const [part1, part2, part3] = dateMatch.slice(1);\n  const year = determineYear(part1, part3);\n  const { month, day } = determineMonthAndDay(part1, part2, part3);\n\n  return `${year}-${month}-${day}`;\n}\n\n/**\n * Determine year value from date parts\n */\nfunction determineYear(part1, part3) {\n  if (part1.length === 4) return part1;\n  if (part3.length === 2) return `20${part3}`;\n  return part3;\n}\n\n/**\n * Determine month and day values from date parts\n */\nfunction determineMonthAndDay(part1, part2, part3) {\n  if (part1.length === 4) {\n    return {\n      month: part2.padStart(2, \"0\"),\n      day: part3.padStart(2, \"0\"),\n    };\n  }\n\n  if (parseInt(part1) > 12) {\n    return {\n      month: part2.padStart(2, \"0\"),\n      day: part1.padStart(2, \"0\"),\n    };\n  }\n\n  return {\n    month: part1.padStart(2, \"0\"),\n    day: part2.padStart(2, \"0\"),\n  };\n}\n\n/**\n * Gets the contrast color (black or white) for a given background color\n * @param {string} hexColor - Hex color code (e.g., \"#FF5733\")\n * @returns {string} - Either \"#000000\" (black) or \"#FFFFFF\" (white)\n */\nexport function getContrastColor(hexColor) {\n  // Default to black if no color provided\n  if (!hexColor) return \"#000000\";\n\n  // Convert hex to RGB\n  let r, g, b;\n\n  // Handle formats: #RGB, #RGBA, #RRGGBB, #RRGGBBAA\n  if (hexColor.length === 4) {\n    r = parseInt(hexColor[1] + hexColor[1], 16);\n    g = parseInt(hexColor[2] + hexColor[2], 16);\n    b = parseInt(hexColor[3] + hexColor[3], 16);\n  } else {\n    r = parseInt(hexColor.slice(1, 3), 16);\n    g = parseInt(hexColor.slice(3, 5), 16);\n    b = parseInt(hexColor.slice(5, 7), 16);\n  }\n\n  // Calculate luminance\n  const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;\n\n  // Return white for dark colors, black for light colors\n  return luminance > 0.5 ? \"#000000\" : \"#FFFFFF\";\n}\n\n/**\n * Deep clone an object without reference\n * @param {object} obj - Object to clone\n * @returns {object} Cloned object\n */\nexport function deepClone(obj) {\n  if (obj === null || typeof obj !== \"object\") {\n    return obj;\n  }\n  return JSON.parse(JSON.stringify(obj));\n}\n\n/**\n * Generate a unique ID\n * @param {string} prefix - Optional prefix for the ID\n * @returns {string} Unique ID\n */\nexport function generateId(prefix = \"\") {\n  return `${prefix}${Date.now()}-${Math.random()\n    .toString(36)\n    .substring(2, 11)}`;\n}\n\n/**\n * Format currency values\n * @param {number} value - Value to format\n * @returns {string} Formatted currency string\n */\nexport function formatCurrency(value) {\n  return new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n  }).format(value);\n}\n\n/**\n * Format dates consistently (legacy function - use formatDateForDisplay from dateUtils instead)\n * @param {string|Date} dateStr - Date to format\n * @returns {string} Formatted date string\n * @deprecated Use formatDateForDisplay from dateUtils.js instead\n */\nfunction formatDateLegacy(dateStr) {\n  try {\n    const date = new Date(dateStr);\n    return date.toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n    });\n  } catch (e) {\n    console.error(\"Error formatting date:\", e);\n    return dateStr;\n  }\n}\n\n/**\n * Cleans a path by removing potentially dangerous patterns\n * @param {string} path - Path to clean\n * @returns {string} Cleaned path\n */\nexport function cleanPath(path) {\n  if (!path) return \"\";\n  // Remove path traversal sequences\n  const pattern = /\\/path\\/to\\/file/; // No escaping needed with RegExp constructor\n  return path.replace(pattern, \"\");\n}\n\n/**\n * Safely parses JSON string\n * @param {string} jsonString - JSON string to parse\n * @param {*} defaultValue - Default value to return if parsing fails\n * @returns {*} Parsed object or default value\n */\nexport function parseJSON(jsonString, defaultValue = null) {\n  try {\n    return JSON.parse(jsonString);\n  } catch (error) {\n    console.error(\"JSON parsing error:\", error);\n    return defaultValue;\n  }\n}\n\n/**\n * Gets primary value when condition is met\n * @param {any} value - Value if condition is true\n * @param {any} defaultValue - Default value if condition is false\n * @returns {any} Formatted value\n */\nexport function getPrimaryValue(value, defaultValue) {\n  return value !== null && value !== undefined ? value : defaultValue;\n}\n\n/**\n * Gets secondary value when condition is met\n * @param {any} value - Value if condition is true\n * @param {any} defaultValue - Default value if condition is false\n * @returns {any} Formatted value\n */\nexport function getSecondaryValue(value, defaultValue) {\n  return value !== null && value !== undefined ? value : defaultValue;\n}\n\n/**\n * Gets fallback value\n * @param {any} value - Fallback value\n * @returns {any} Formatted value\n */\nexport function getFallbackValue(value) {\n  return value;\n}\n\n/**\n * Example of proper exception handling\n * @param {function} fn - Function to execute\n * @returns {any} Result or error\n */\nexport function handleExceptions(fn) {\n  try {\n    return fn();\n  } catch (error) {\n    console.error(\"Error in operation:\", error);\n    throw new Error(`Operation failed: ${error.message}`);\n  }\n}\n\n/**\n * Process data with multiple steps\n * @param {object} args - Input arguments\n * @returns {object} Processed data\n */\nexport function processComplexData(args) {\n  // Break this into smaller functions\n  const result1 = processFirstPart(args);\n  const result2 = processSecondPart(args);\n  return mergeResults(result1, result2);\n}\n\n// Helper functions to reduce complexity\nfunction processFirstPart(args) {\n  // Part 1 logic\n  return args ? { processed: true, source: \"part1\" } : null;\n}\n\nfunction processSecondPart(args) {\n  // Part 2 logic\n  return args ? { processed: true, source: \"part2\" } : null;\n}\n\nfunction mergeResults(result1, result2) {\n  // Combine logic\n  return {\n    combined: true,\n    parts: [result1, result2],\n  };\n}\n\n/**\n * Extract nested ternary operation\n * @param {any} value - Value to format\n * @param {object} options - Formatting options\n * @returns {any} Formatted value\n */\nexport function getFormattedValue(value, options) {\n  if (options.condition1) {\n    return options.format1(value);\n  } else if (options.condition2) {\n    return options.format2(value);\n  } else {\n    return options.defaultFormat(value);\n  }\n}\n\n/**\n * Properly handle exception\n * @param {function} callback - Function to execute safely\n * @returns {*} Result of the callback function\n */\nexport function safeOperation(callback) {\n  try {\n    return callback();\n  } catch (error) {\n    console.error(\"Operation failed:\", error);\n    // Handle the error properly\n    throw new Error(`Operation failed: ${error.message}`);\n  }\n}\n\n/**\n * Refactor complex function to reduce cognitive complexity\n * @param {object} params - Parameters for processing\n * @returns {object} Processed data and status\n */\nexport function processData(params) {\n  // Process data in single function with clear steps\n  const validatedInput = validateInput(params);\n  const transformedData = transformData(validatedInput);\n  const combinedResults = combineResults(transformedData);\n\n  return {\n    result: combinedResults,\n    status: \"success\",\n  };\n}\n\n// Helper functions\nfunction validateInput(params) {\n  // Input validation logic\n  return params;\n}\n\nfunction transformData(data) {\n  // Data transformation logic\n  return data;\n}\n\nfunction combineResults(data) {\n  // Result combination logic\n  return data;\n}\n\n// Refactor function to reduce cognitive complexity\nfunction processTransactions(transactions) {\n  if (!transactions || !Array.isArray(transactions)) return [];\n\n  return transactions.map((tx, index) => {\n    const processed = { ...tx };\n\n    // Ensure transaction has unique ID\n    if (!processed.id) {\n      processed.id = `tx_${Date.now()}_${Math.random()\n        .toString(36)\n        .substring(2, 11)}_${index}`;\n    }\n\n    // Handle income and expenses\n    if (tx.income) {\n      processed.income = parseFloat(tx.income) || 0;\n    }\n    if (tx.expenses) {\n      processed.expenses = parseFloat(tx.expenses) || 0;\n    }\n\n    // Handle date\n    if (tx.date) {\n      try {\n        processed.date = new Date(tx.date).toISOString().split(\"T\")[0];\n      } catch (e) {\n        console.error(\"Invalid date format:\", tx.date, e);\n        processed.date = null;\n        processed.hasDateError = true;\n        // Explicitly handle the exception by continuing with a null date\n        // rather than failing the entire transaction processing\n      }\n    }\n\n    return processed;\n  });\n}\n\n/**\n * Find transaction by ID\n * @param {Array} transactions - Array of transactions\n * @param {string} transactionId - Transaction ID to find\n * @returns {Object|null} Found transaction or null\n */\nexport function findTransactionById(transactions, transactionId) {\n  if (!transactions || !Array.isArray(transactions) || !transactionId) {\n    return null;\n  }\n  return transactions.find((tx) => tx.id === transactionId) || null;\n}\n\n/**\n * Find transaction index by ID\n * @param {Array} transactions - Array of transactions\n * @param {string} transactionId - Transaction ID to find\n * @returns {number} Found transaction index or -1\n */\nexport function findTransactionIndexById(transactions, transactionId) {\n  if (!transactions || !Array.isArray(transactions) || !transactionId) {\n    return -1;\n  }\n  return transactions.findIndex((tx) => tx.id === transactionId);\n}\n\n/**\n * Toggle active state on an element\n * @param {HTMLElement} element - The element to toggle active/inactive state\n * @param {boolean} [active] - Optional explicit state to set (true for active, false for inactive)\n * @returns {boolean} The new active state\n */\nexport function toggleActiveState(element, active) {\n  // Define isActive locally to avoid reference error\n  const isActive =\n    active !== undefined ? active : !element.classList.contains(\"active\");\n\n  // Apply the appropriate classes\n  element.classList.toggle(\"active\", isActive);\n  element.classList.toggle(\"inactive\", !isActive);\n\n  return isActive;\n}\n\n/**\n * Debounce a function call\n * @param {Function} func - The function to debounce\n * @param {number} wait - Milliseconds to wait\n * @returns {Function} Debounced function\n */\nexport function debounce(func, wait = 300) {\n  let timeout;\n  return function executedFunction(...args) {\n    const later = () => {\n      clearTimeout(timeout);\n      func(...args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n}\n\n/**\n * Generate a unique ID\n * @returns {string} Unique ID\n */\nexport function generateUniqueId() {\n  return Date.now().toString(36) + Math.random().toString(36).substring(2, 7);\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"D:\\project1\\expense-tracker\\src\\utils\\validation.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]
