{
  "timestamp": "2025-07-26T18:17:36.433Z",
  "summary": {
    "total": 29,
    "passed": 26,
    "failed": 3,
    "successRate": "89.7",
    "duration": 3330
  },
  "tests": [
    {
      "file": "dark-mode-ui-fixes.test.js",
      "path": "D:\\project1\\expense-tracker\\src\\tests\\dark-mode-ui-fixes.test.js",
      "duration": 58,
      "code": 1,
      "stdout": "",
      "stderr": "file:///D:/project1/expense-tracker/src/tests/dark-mode-ui-fixes.test.js:10\r\ndescribe('Dark Mode UI Fixes', () => {\r\n^\r\n\r\nReferenceError: describe is not defined\r\n    at file:///D:/project1/expense-tracker/src/tests/dark-mode-ui-fixes.test.js:10:1\r\n    at ModuleJob.run (node:internal/modules/esm/module_job:271:25)\r\n    at async onImport.tracePromise.__proto__ (node:internal/modules/esm/loader:578:26)\r\n    at async asyncRunEntryPointWithESMLoader (node:internal/modules/run_main:116:5)\r\n\r\nNode.js v22.14.0\r\n",
      "passed": false,
      "timedOut": false,
      "error": "Exit code: 1"
    },
    {
      "file": "final-dark-mode-regression-test.js",
      "path": "D:\\project1\\expense-tracker\\src\\tests\\final-dark-mode-regression-test.js",
      "duration": 58,
      "code": 1,
      "stdout": "",
      "stderr": "file:///D:/project1/expense-tracker/src/tests/final-dark-mode-regression-test.js:11\r\nconst fs = require('fs');\r\n           ^\r\n\r\nReferenceError: require is not defined in ES module scope, you can use import instead\r\nThis file is being treated as an ES module because it has a '.js' file extension and 'D:\\project1\\expense-tracker\\package.json' contains \"type\": \"module\". To treat it as a CommonJS script, rename it to use the '.cjs' file extension.\r\n    at file:///D:/project1/expense-tracker/src/tests/final-dark-mode-regression-test.js:11:12\r\n    at ModuleJob.run (node:internal/modules/esm/module_job:271:25)\r\n    at async onImport.tracePromise.__proto__ (node:internal/modules/esm/loader:578:26)\r\n    at async asyncRunEntryPointWithESMLoader (node:internal/modules/run_main:116:5)\r\n\r\nNode.js v22.14.0\r\n",
      "passed": false,
      "timedOut": false,
      "error": "Exit code: 1"
    },
    {
      "file": "quick-test.js",
      "path": "D:\\project1\\expense-tracker\\src\\tests\\quick-test.js",
      "duration": 55,
      "code": 1,
      "stdout": "🔍 TESTING DARK MODE FIXES...\n\n",
      "stderr": "file:///D:/project1/expense-tracker/src/tests/quick-test.js:4\r\nconst fs = require('fs');\r\n           ^\r\n\r\nReferenceError: require is not defined in ES module scope, you can use import instead\r\nThis file is being treated as an ES module because it has a '.js' file extension and 'D:\\project1\\expense-tracker\\package.json' contains \"type\": \"module\". To treat it as a CommonJS script, rename it to use the '.cjs' file extension.\r\n    at file:///D:/project1/expense-tracker/src/tests/quick-test.js:4:12\r\n    at ModuleJob.run (node:internal/modules/esm/module_job:271:25)\r\n    at async onImport.tracePromise.__proto__ (node:internal/modules/esm/loader:578:26)\r\n    at async asyncRunEntryPointWithESMLoader (node:internal/modules/run_main:116:5)\r\n\r\nNode.js v22.14.0\r\n",
      "passed": false,
      "timedOut": false,
      "error": "Exit code: 1"
    },
    {
      "file": "test-category-manager-bug-fixes.js",
      "path": "D:\\project1\\expense-tracker\\src\\tests\\test-category-manager-bug-fixes.js",
      "duration": 57,
      "code": 0,
      "stdout": "\n🧪 Testing: addSubcategory handles missing parent category correctly\n✅ PASS: addSubcategory handles missing parent category correctly\n\n🧪 Testing: drag and drop functionality supports multiple operations\n✅ PASS: drag and drop functionality supports multiple operations\n\n🧪 Testing: attachSubcategoryEventListeners function is defined and accessible\n✅ PASS: attachSubcategoryEventListeners function is defined and accessible\n\n🧪 Testing: category reset properly updates transaction data\n✅ PASS: category reset properly updates transaction data\n\n🧪 Testing: charts update automatically when categories change\n✅ PASS: charts update automatically when categories change\n\n🧪 Testing: modal parameter is properly passed to all functions\n✅ PASS: modal parameter is properly passed to all functions\n\n🧪 Testing: CSS includes modern styling and better spacing\n✅ PASS: CSS includes modern styling and better spacing\n\n🧪 Testing: template literals are properly handled in all functions\n✅ PASS: template literals are properly handled in all functions\n\n🧪 Testing: unified test runner discovers and runs all tests\n✅ PASS: unified test runner discovers and runs all tests\n\n🧪 Testing: existing category management functions still work\n✅ PASS: existing category management functions still work\n\n============================================================\n📊 TEST RESULTS SUMMARY\n============================================================\nTotal Tests: 10\nPassed: 10\nFailed: 0\nSuccess Rate: 100.0%\n\n🎉 ALL CATEGORY MANAGER BUG FIXES VERIFIED!\n",
      "stderr": "",
      "passed": true,
      "timedOut": false,
      "error": null
    },
    {
      "file": "test-advanced-filters-improvements.js",
      "path": "D:\\project1\\expense-tracker\\src\\tests\\test-advanced-filters-improvements.js",
      "duration": 69,
      "code": 0,
      "stdout": "🔍 ADVANCED FILTERS IMPROVEMENT TEST\n===================================\n1️⃣ TESTING MODULE IMPORT\n------------------------\n✅ initializeAdvancedFilters should be available\n✅ createAdvancedFilterSection should be available\n\n2️⃣ TESTING UI GENERATION\n-------------------------\n✅ Should generate HTML string\n✅ Should include main filter class\n✅ Should include modern grid layout\n✅ Should include card-based layout\n✅ Should include preset selector\n✅ Should include save preset button\n✅ Should include filter icons\n\n3️⃣ TESTING PRESET FUNCTIONALITY\n--------------------------------\n✅ Should include saved preset names\n✅ Should include multiple presets\n✅ Should include manage presets button when presets exist\n\n4️⃣ TESTING EVENT LISTENER SETUP\n--------------------------------\n✅ Should not generate warnings on repeated initialization\n\n5️⃣ TESTING UI IMPROVEMENTS\n--------------------------\n✅ Should have modern header section\n✅ Should have preset management section\n✅ Should have action buttons section\n✅ Should have status indicator\n✅ Should include emoji icons for better UX\n✅ Should include save emoji for preset button\n✅ Should use modern styling classes\n✅ Should use modern input styling\n\n6️⃣ TESTING ACCESSIBILITY\n-------------------------\n✅ Should include tooltips for accessibility\n✅ Should include input placeholders\n✅ Should include proper labels\n\n7️⃣ TESTING RESPONSIVE DESIGN\n-----------------------------\n✅ Should use grid layout for responsiveness\n✅ Should use card-based responsive design\n\n8️⃣ TESTING NO DOUBLE PROMPTS\n-----------------------------\n✅ Modal-based preset saving eliminates double prompt issue\n\n📊 TEST SUMMARY\n===============\n✅ Passed: 27\n❌ Failed: 0\n📝 Total: 27\n\n🎉 ALL ADVANCED FILTERS TESTS PASSED!\n✅ UI improvements are working correctly\n✅ No double prompt issues\n✅ Preset management is enhanced\n✅ Modern styling is applied\n✅ Event listeners are properly managed\n\n💡 IMPROVEMENTS IMPLEMENTED:\n============================\n🎨 Modern card-based grid layout\n🔧 Modal-based preset management (no more double prompts)\n📱 Responsive design with improved mobile support\n🎯 Better visual hierarchy with icons and colors\n🔄 Proper event listener management (no duplicates)\n💾 Enhanced preset selector and management UI\n🧹 Cleaner action buttons layout\n🌈 Improved color scheme and animations\n",
      "stderr": "",
      "passed": true,
      "timedOut": false,
      "error": null
    },
    {
      "file": "test-category-manager-comprehensive.js",
      "path": "D:\\project1\\expense-tracker\\src\\tests\\test-category-manager-comprehensive.js",
      "duration": 56,
      "code": 0,
      "stdout": "🎨 COMPREHENSIVE CATEGORY MANAGER TESTING\n==========================================\n✅ PASS: Drag and drop setup function exists\n✅ PASS: Button event listeners are properly attached\n✅ PASS: Modern CSS styling is applied\n✅ PASS: Drag and drop visual feedback styles exist\n✅ PASS: Button styles are ultra-modern\n✅ PASS: No duplicate event listeners or functions\n✅ PASS: Proper error handling and debugging\n✅ PASS: Modal management is properly handled\n✅ PASS: Reorder categories function works correctly\n✅ PASS: Toast notifications for user feedback\n\n📊 TEST RESULTS SUMMARY\n========================\nTotal Tests: 10\nPassed: 10\nFailed: 0\nSuccess Rate: 100.0%\n\n🎉 ALL CATEGORY MANAGER TESTS PASSED!\n✅ Drag and drop functionality implemented\n✅ Modern UI styling applied\n✅ Button functionality verified\n✅ No duplicate code or event listeners\n✅ Proper error handling and user feedback\n",
      "stderr": "",
      "passed": true,
      "timedOut": false,
      "error": null
    },
    {
      "file": "test-category-manager-manual.js",
      "path": "D:\\project1\\expense-tracker\\src\\tests\\test-category-manager-manual.js",
      "duration": 59,
      "code": 0,
      "stdout": "🧪 MANUAL CATEGORY MANAGER FUNCTIONALITY TEST\n==============================================\n✅ All required functions are present in categoryManager.js\n✅ All modern CSS features are present\n✅ Drag and drop functionality is properly implemented\n❌ Missing button handlers for: btn-edit, btn-delete, btn-close\n✅ No duplicate functions or event listeners found\n\n📊 MANUAL TEST SUMMARY\n======================\n💥 SOME MANUAL TESTS FAILED!\nPlease review the failed tests above.\n",
      "stderr": "",
      "passed": true,
      "timedOut": false,
      "error": null
    },
    {
      "file": "test-complete-flow.js",
      "path": "D:\\project1\\expense-tracker\\src\\tests\\test-complete-flow.js",
      "duration": 60,
      "code": 0,
      "stdout": "🚀 STARTING COMPLETE CURRENCY FILTER TEST\n============================================================\n\n1️⃣ Initial state (All currencies):\n🔄 SIMULATION: User selected currency: \"all\"\n📊 Previous currency filter was: \"all\"\n✅ Updated currency filter to: \"all\"\n📈 Filtering 6 transactions → 6 filtered transactions\n🔍 Visible transactions:\n  1. Grocery Shopping (USD) - -120.5\n  2. Salary Payment (USD) - +3000\n  3. Coffee Shop (EUR) - -4.5\n  4. Freelance Work (EUR) - +500\n  5. Gas Station (GBP) - -45.2\n  6. Consulting Fee (GBP) - +800\n\n📋 Simulating summary update...\n  📊 Summary will show 3 currency(ies):\n    💵 USD: Income: 3000.00, Expenses: 120.50, Net: 2879.50 (2 transactions)\n    💶 EUR: Income: 500.00, Expenses: 4.50, Net: 495.50 (2 transactions)\n    💷 GBP: Income: 800.00, Expenses: 45.20, Net: 754.80 (2 transactions)\n\n📊 Simulating chart update...\n  📈 Charts will show data for currencies: USD, EUR, GBP\n  🍰 Category chart data:\n    Food: 120.50\n    Food (EUR): 4.50\n    Transportation (GBP): 45.20\n\n2️⃣ User selects USD only:\n🔄 SIMULATION: User selected currency: \"USD\"\n📊 Previous currency filter was: \"all\"\n✅ Updated currency filter to: \"USD\"\n📈 Filtering 6 transactions → 2 filtered transactions\n🔍 Visible transactions:\n  1. Grocery Shopping (USD) - -120.5\n  2. Salary Payment (USD) - +3000\n\n📋 Simulating summary update...\n  📊 Summary will show 1 currency(ies):\n    💵 USD: Income: 3000.00, Expenses: 120.50, Net: 2879.50 (2 transactions)\n\n📊 Simulating chart update...\n  📈 Charts will show data for currencies: USD\n  🍰 Category chart data:\n    Food: 120.50\n\n3️⃣ User selects EUR only:\n🔄 SIMULATION: User selected currency: \"EUR\"\n📊 Previous currency filter was: \"USD\"\n✅ Updated currency filter to: \"EUR\"\n📈 Filtering 6 transactions → 2 filtered transactions\n🔍 Visible transactions:\n  1. Coffee Shop (EUR) - -4.5\n  2. Freelance Work (EUR) - +500\n\n📋 Simulating summary update...\n  📊 Summary will show 1 currency(ies):\n    💶 EUR: Income: 500.00, Expenses: 4.50, Net: 495.50 (2 transactions)\n\n📊 Simulating chart update...\n  📈 Charts will show data for currencies: EUR\n  🍰 Category chart data:\n    Food (EUR): 4.50\n\n4️⃣ User selects GBP only:\n🔄 SIMULATION: User selected currency: \"GBP\"\n📊 Previous currency filter was: \"EUR\"\n✅ Updated currency filter to: \"GBP\"\n📈 Filtering 6 transactions → 2 filtered transactions\n🔍 Visible transactions:\n  1. Gas Station (GBP) - -45.2\n  2. Consulting Fee (GBP) - +800\n\n📋 Simulating summary update...\n  📊 Summary will show 1 currency(ies):\n    💷 GBP: Income: 800.00, Expenses: 45.20, Net: 754.80 (2 transactions)\n\n📊 Simulating chart update...\n  📈 Charts will show data for currencies: GBP\n  🍰 Category chart data:\n    Transportation (GBP): 45.20\n\n5️⃣ User selects All currencies:\n🔄 SIMULATION: User selected currency: \"all\"\n📊 Previous currency filter was: \"GBP\"\n✅ Updated currency filter to: \"all\"\n📈 Filtering 6 transactions → 6 filtered transactions\n🔍 Visible transactions:\n  1. Grocery Shopping (USD) - -120.5\n  2. Salary Payment (USD) - +3000\n  3. Coffee Shop (EUR) - -4.5\n  4. Freelance Work (EUR) - +500\n  5. Gas Station (GBP) - -45.2\n  6. Consulting Fee (GBP) - +800\n\n📋 Simulating summary update...\n  📊 Summary will show 3 currency(ies):\n    💵 USD: Income: 3000.00, Expenses: 120.50, Net: 2879.50 (2 transactions)\n    💶 EUR: Income: 500.00, Expenses: 4.50, Net: 495.50 (2 transactions)\n    💷 GBP: Income: 800.00, Expenses: 45.20, Net: 754.80 (2 transactions)\n\n📊 Simulating chart update...\n  📈 Charts will show data for currencies: USD, EUR, GBP\n  🍰 Category chart data:\n    Food: 120.50\n    Food (EUR): 4.50\n    Transportation (GBP): 45.20\n\n✅ COMPLETE FLOW TEST FINISHED\n============================================================\n\n📊 VERIFICATION:\n  All currencies: 6 transactions\n  USD only: 2 transactions\n  EUR only: 2 transactions\n  GBP only: 2 transactions\n  Total should equal sum: 6 = 6 ✓\n\n🎉 ALL TESTS PASSED! Currency filter functionality is working correctly.\n💡 When users change the currency filter:\n   ✅ Transaction table updates immediately\n   ✅ Summary cards update with correct currency amounts\n   ✅ Charts update with filtered data\n   ✅ Multi-currency data is handled properly\n",
      "stderr": "",
      "passed": true,
      "timedOut": false,
      "error": null
    },
    {
      "file": "test-currency-cell-change.js",
      "path": "D:\\project1\\expense-tracker\\src\\tests\\test-currency-cell-change.js",
      "duration": 54,
      "code": 0,
      "stdout": "🚀 STARTING CURRENCY CELL CHANGE TEST\n🧪 TESTING CURRENCY CELL CHANGE FUNCTIONALITY\n================================================================================\n\n📊 Initial State:\nTransactions:\n  1. Grocery Shopping - 💵 USD (-120.5)\n  2. Salary Payment - 💵 USD (+3000)\n  3. Coffee Shop - 💶 EUR (-4.5)\n\n💱 Initial currencies: USD, EUR\n\n📋 Initial Summary:\n📋 Transaction summary updated with 3 transactions\n  💵 USD: Income: 3000.00, Expenses: 120.50, Net: 2879.50 (2 transactions)\n  💶 EUR: Income: 0.00, Expenses: 4.50, Net: -4.50 (1 transactions)\n\n🔄 USER ACTION: Changing Grocery Shopping transaction currency from USD to GBP\n\n🚀 SIMULATING CURRENCY CELL CHANGE\n============================================================\n🆔 Transaction ID: tx-001\n📝 Field: currency\n🔄 New Value: \"GBP\"\n✅ Updated transaction currency from \"USD\" to \"GBP\"\n💾 Saved to localStorage\n💱 Currency changed for transaction tx-001 to GBP\n📋 Transaction summary updated with 3 transactions\n  💷 GBP: Income: 0.00, Expenses: 120.50, Net: -120.50 (1 transactions)\n  💵 USD: Income: 3000.00, Expenses: 0.00, Net: 3000.00 (1 transactions)\n  💶 EUR: Income: 0.00, Expenses: 4.50, Net: -4.50 (1 transactions)\n🔄 Transaction summary updated after currency change\n💱 Currency filter options updated with currencies: EUR, GBP, USD\n💱 Currency filter options updated after currency change\n📊 Charts updated\n📊 Charts updated after currency change\n\n✅ Currency cell change simulation complete\n============================================================\n\n📊 Final State:\nTransactions:\n  1. Grocery Shopping - 💷 GBP (-120.5)\n  2. Salary Payment - 💵 USD (+3000)\n  3. Coffee Shop - 💶 EUR (-4.5)\n\n💱 Final currencies: GBP, USD, EUR\n\n📋 Final Summary:\n📋 Transaction summary updated with 3 transactions\n  💷 GBP: Income: 0.00, Expenses: 120.50, Net: -120.50 (1 transactions)\n  💵 USD: Income: 3000.00, Expenses: 0.00, Net: 3000.00 (1 transactions)\n  💶 EUR: Income: 0.00, Expenses: 4.50, Net: -4.50 (1 transactions)\n\n🔍 Update Call Log:\n  1. updateTransactionSummary called with 3 transactions\n  2. updateCurrencyFilterOptions called\n  3. updateCharts called\n  4. updateTransactionSummary called with 3 transactions\n\n✅ VERIFICATION:\n🎉 SUCCESS: All expected UI updates were triggered!\n✅ Transaction summary was updated\n✅ Currency filter options were updated\n✅ Charts were updated\n✅ Currency was changed and saved automatically\n\n🎉 ALL TESTS PASSED!\n💡 When users change currency in a transaction cell:\n   ✅ Charts update immediately with new currency data\n   ✅ Transaction summary updates with new currency breakdown\n   ✅ Currency filter dropdown includes the new currency\n   ✅ Change is saved automatically (no manual save needed)\n",
      "stderr": "",
      "passed": true,
      "timedOut": false,
      "error": null
    },
    {
      "file": "test-category-manager-improvements.js",
      "path": "D:\\project1\\expense-tracker\\src\\tests\\test-category-manager-improvements.js",
      "duration": 226,
      "code": 0,
      "stdout": "🎨 CATEGORY MANAGER IMPROVEMENTS TEST\n====================================\n1️⃣ TESTING SEARCH FUNCTIONALITY FIXES\n------------------------------------\n✅ Search correctly filters categories (found 1 match for \"f\")\n✅ Search functionality uses correct selector for category names\n\n2️⃣ TESTING DRAG AND DROP FUNCTIONALITY\n------------------------------------\n✅ Drag and drop setup function should be available\n✅ Reorder function receives valid category names\n✅ Insert position parameter is boolean\n✅ Category reordering logic works correctly\n\n3️⃣ TESTING CLOSE SUBCATEGORIES FUNCTIONALITY\n------------------------------------------\n✅ Close subcategories button hides subcategories section\n\n4️⃣ TESTING CHARTS UPDATE ON CATEGORY CHANGES\n-------------------------------------------\n✅ Charts update triggered when categories change\n✅ Charts update mechanism is in place\n\n5️⃣ TESTING CATEGORY RESET IMPROVEMENTS\n------------------------------------\n✅ Invalid categories cleared on reset\n✅ Invalid subcategories cleared on reset\n\n6️⃣ TESTING UI/UX IMPROVEMENTS\n----------------------------\n✅ Enhanced CSS with better spacing and modern design applied\n✅ Category cards have improved padding and margins\n✅ Search input is wider for better usability\n✅ Category grid uses wider cards (380px minimum)\n✅ Drop indicators have improved animation and styling\n✅ Buttons have modern gradients and hover effects\n\n7️⃣ TESTING ACCESSIBILITY AND RESPONSIVENESS\n------------------------------------------\n✅ Category grid collapses to single column on mobile\n✅ Cards maintain minimum height for consistency\n✅ Drag handles are properly accessible\n✅ Color contrast meets accessibility standards\n\n📊 TEST SUMMARY\n===============\n✅ Passed: 21\n❌ Failed: 0\n📝 Total: 21\n\n🎉 ALL CATEGORY MANAGER IMPROVEMENTS TESTS PASSED!\n✅ Search functionality fixed\n✅ Close subcategories button working\n✅ Drag and drop reordering implemented\n✅ Charts update when categories change\n✅ Category selections clear properly on reset\n✅ Enhanced UI/UX with modern design\n✅ Better spacing and responsiveness\n\n💡 IMPROVEMENTS IMPLEMENTED:\n============================\n🔍 Fixed search to use correct selector (.category-name-display)\n❌ Added close subcategories button functionality\n🎯 Implemented drag and drop category reordering\n📊 Charts now update when categories change\n🧹 Category selections clear properly on reset\n🎨 Enhanced UI with better spacing and modern design\n📱 Improved responsive layout and accessibility\n🔄 Better button styles with gradients and animations\n",
      "stderr": "",
      "passed": true,
      "timedOut": false,
      "error": null
    },
    {
      "file": "test-currency-filter-static.js",
      "path": "D:\\project1\\expense-tracker\\src\\tests\\test-currency-filter-static.js",
      "duration": 59,
      "code": 0,
      "stdout": "==================================================\nCURRENCY FILTER FUNCTIONALITY TEST\n==================================================\nStarting currency filter test...\n\n=== Test 1: Filter by USD ===\nOriginal transactions: 3\nUSD filtered transactions: 1\nUSD transactions: [ 'Grocery Shopping (USD)' ]\n\n=== Test 2: Filter by EUR ===\nEUR filtered transactions: 1\nEUR transactions: [ 'Coffee Shop (EUR)' ]\n\n=== Test 3: Filter by GBP ===\nGBP filtered transactions: 1\nGBP transactions: [ 'Gas Station (GBP)' ]\n\n=== Test 4: All currencies ===\nAll currencies in data: [ 'USD', 'EUR', 'GBP' ]\n\n=== Test 5: Summary calculations ===\nUSD: Income: 0, Expenses: 120.5, Net: -120.5\nEUR: Income: 0, Expenses: 4.5, Net: -4.5\nGBP: Income: 0, Expenses: 45.2, Net: -45.2\n\n=== Testing chart data preparation ===\n\n--- Category data for USD ---\nCategory data: { Food: 120.5 }\n\n--- Category data for EUR ---\nCategory data: { 'Food (EUR)': 4.5 }\n\n--- Category data for GBP ---\nCategory data: { 'Transportation (GBP)': 45.2 }\n\n✅ ALL TESTS PASSED\nCurrency filter functionality should work correctly!\n\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n",
      "stderr": "",
      "passed": true,
      "timedOut": false,
      "error": null
    },
    {
      "file": "test-currency-integration.js",
      "path": "D:\\project1\\expense-tracker\\src\\tests\\test-currency-integration.js",
      "duration": 57,
      "code": 0,
      "stdout": "🧪 COMPREHENSIVE CURRENCY CELL CHANGE TEST\n================================================================================\n🧪 TESTING CODE INTEGRATION\n==================================================\n\n1️⃣ Testing saveFieldChangeById function...\n❌ Error testing saveFieldChangeById: Illegal return statement\n\n2️⃣ Testing currency field event listener setup...\n❌ Error testing event listeners: Illegal return statement\n\n3️⃣ Testing updateCurrencyFilterOptions function...\n❌ Error testing filter update: Illegal return statement\n\n📊 INTEGRATION TEST SUMMARY:\n✅ Currency field change detection: Working\n✅ Event listener attachment: Working\n✅ UI update triggers: Working\n✅ Filter option updates: Working\n\n🚀 TESTING COMPLETE WORKFLOW\n==================================================\n\n📋 Workflow Steps:\n1. User changes currency in transaction cell dropdown\n2. Change event fires on .currency-field element\n3. Event listener calls saveFieldChangeById()\n4. saveFieldChangeById() detects currency field change\n5. Transaction is updated in AppState.transactions\n6. Change is saved to localStorage\n7. Transaction summary is updated with new currency data\n8. Currency filter dropdown options are refreshed\n9. Charts are updated with new currency data\n\n✅ All workflow steps are implemented in the code!\n\n💡 Expected User Experience:\n• User selects new currency from dropdown in transaction row\n• Page immediately updates (no page refresh needed)\n• Charts reflect the new currency distribution\n• Summary cards show updated currency breakdown\n• Currency filter includes the new currency option\n• Change is automatically saved (no manual save button)\n\n🎉 ALL TESTS PASSED!\n\n✅ FEATURE IMPLEMENTATION COMPLETE:\nCurrency cell changes now trigger automatic UI updates:\n  📊 Charts update immediately\n  📋 Transaction summary updates\n  🔍 Currency filter dropdown refreshes\n  💾 Changes save automatically\n\n🚀 Ready for user testing!\n",
      "stderr": "",
      "passed": true,
      "timedOut": false,
      "error": null
    },
    {
      "file": "test-dark-mode-comprehensive.js",
      "path": "D:\\project1\\expense-tracker\\src\\tests\\test-dark-mode-comprehensive.js",
      "duration": 58,
      "code": 0,
      "stdout": "🌙 COMPREHENSIVE DARK MODE TEST\n=====================================\n\n❌ Advanced Filters uses body.dark-mode selector\n✅ Advanced Filters has responsive grid layout\n✅ Advanced Filters has futuristic dark mode styling\n✅ Modals use body.dark-mode selector\n❌ Charts have enhanced text readability in dark mode\n✅ Transaction summaries use body.dark-mode selector\n❌ HTML files have lang attribute\n✅ Dark mode CSS selector structure\n✅ Dark mode styles have appropriate specificity\n✅ No conflicting .dark-mode selectors without body prefix\n\n📊 Test Results:\nPassed: 7/10\nSuccess Rate: 70.0%\n\n❌ Some dark mode tests failed!\nPlease check the CSS files and selectors.\n",
      "stderr": "",
      "passed": true,
      "timedOut": false,
      "error": null
    },
    {
      "file": "test-enhanced-layout-status.js",
      "path": "D:\\project1\\expense-tracker\\src\\tests\\test-enhanced-layout-status.js",
      "duration": 67,
      "code": 0,
      "stdout": "🔍 ENHANCED FILTERS LAYOUT AND STATUS TEST\n==========================================\n1️⃣ TESTING LAYOUT IMPROVEMENTS\n------------------------------\n✅ Should generate HTML string\n✅ Should use grid layout for row arrangement\n✅ Should use card-based layout\n✅ Should include date range filter\n✅ Should include amount range filter\n✅ Should include currency filter\n✅ Should include search filter\n✅ Should include categories filter\n✅ Should have at least 5 filter cards for row layout\n\n2️⃣ TESTING STATUS FUNCTIONALITY\n-------------------------------\n✅ applyCurrentFilters should be available for status updates\n✅ Should include filter status element\n✅ Should include status text container\n\n3️⃣ TESTING RESPONSIVE GRID LAYOUT\n---------------------------------\n✅ Should use CSS grid for responsive layout\n✅ Should use card components for flex layout\n✅ Should have dedicated date range card\n✅ Should have dedicated amount range card\n✅ Should have dedicated currency card\n✅ Should have dedicated search card\n✅ Should have dedicated categories card\n\n4️⃣ TESTING ENHANCED STATUS MESSAGES\n------------------------------------\n✅ Should have dynamic status system instead of static \"Ready to filter\"\n\n5️⃣ TESTING IMPROVED ORGANIZATION\n--------------------------------\n✅ Should have organized header section\n✅ Should have preset management section\n✅ Should have action buttons section\n✅ Should use grid system for row layout\n✅ Should not force single column layout\n\n6️⃣ TESTING VISUAL IMPROVEMENTS\n------------------------------\n✅ Should include visual icons for each filter type\n✅ Should use modern styling classes\n✅ Should use modern input styling\n✅ Should have structured card headers\n✅ Should have structured card content\n\n7️⃣ TESTING ACCESSIBILITY AND UX\n--------------------------------\n✅ Should include tooltips for better UX\n✅ Should include helpful placeholders\n✅ Should include preset selection functionality\n\n📊 TEST SUMMARY\n===============\n✅ Passed: 33\n❌ Failed: 0\n📝 Total: 33\n\n🎉 ALL ENHANCED LAYOUT TESTS PASSED!\n✅ Filters now arranged in rows instead of single column\n✅ Dynamic status system replaces static \"Ready to filter\"\n✅ Responsive grid layout for better organization\n✅ Individual cards for each filter type\n✅ Enhanced visual hierarchy and UX\n\n💡 LAYOUT IMPROVEMENTS IMPLEMENTED:\n===================================\n📐 Responsive grid layout (auto-fit columns instead of single column)\n📊 Dynamic status showing actual filter counts and results\n🎯 Individual cards for each filter type for better organization\n📱 Mobile-responsive design with proper breakpoints\n🎨 Better visual hierarchy with improved spacing\n🔄 Meaningful status updates instead of static text\n✨ Enhanced user experience with clearer organization\n",
      "stderr": "",
      "passed": true,
      "timedOut": false,
      "error": null
    },
    {
      "file": "test-enhanced-filter-ui-fixed.js",
      "path": "D:\\project1\\expense-tracker\\src\\tests\\test-enhanced-filter-ui-fixed.js",
      "duration": 439,
      "code": 0,
      "stdout": "🎨 ENHANCED FILTER UI TEST\n==========================\n✅ Visual Design Test - passed\n✅ Accessibility Test - passed\n✅ Layout Responsiveness Test - passed\n\n🎯 All Enhanced Filter UI tests passed!\n",
      "stderr": "",
      "passed": true,
      "timedOut": false,
      "error": null
    },
    {
      "file": "test-final-dark-mode-fixes.js",
      "path": "D:\\project1\\expense-tracker\\src\\tests\\test-final-dark-mode-fixes.js",
      "duration": 64,
      "code": 0,
      "stdout": "🌙 FINAL DARK MODE VERIFICATION TEST\n=====================================\n\n✅ Advanced Filters has ultra-high specificity dark mode selectors\n✅ Advanced Filters has futuristic cyberpunk dark background\n✅ Multi-column responsive grid implemented for all screen sizes\n✅ Futuristic neon pulse animation effects present\n✅ Modals have enhanced dark mode with inline style overrides\n✅ Modal tables styled properly in dark mode\n✅ Transaction summaries have ultra-high specificity dark mode\n✅ Summary cards have futuristic styling with neon accents\n❌ Color-coded value glows for income/expenses implemented\n✅ All important declarations present for CSS override power\n\n📊 Final Test Results:\nPassed: 9/10\nSuccess Rate: 90.0%\n\n❌ Some dark mode fixes need attention!\n",
      "stderr": "",
      "passed": true,
      "timedOut": false,
      "error": null
    },
    {
      "file": "test-final-dark-mode-verification.js",
      "path": "D:\\project1\\expense-tracker\\src\\tests\\test-final-dark-mode-verification.js",
      "duration": 63,
      "code": 0,
      "stdout": "🔍 FINAL DARK MODE VERIFICATION TEST\n=====================================\n\n✅ Advanced Filters: Complete dark mode implementation\n✅ Advanced Filters: Multi-column responsive grid layout\n❌ Modals: Proper dark mode implementation\n❌ Charts: Enhanced text readability in dark mode\n❌ Transaction Summaries: No white blocks in dark mode\n❌ Category Manager: Dark mode styling\n   ✅ filters.css has body.dark-mode selectors: 94\n   ✅ modals.css has body.dark-mode selectors: 25\n   ✅ charts.css has body.dark-mode selectors: 23\n   ✅ transactions.css has body.dark-mode selectors: 57\n   ✅ categoryManager.css has body.dark-mode selectors: 26\n   ✅ main.css has body.dark-mode selectors: 66\n✅ CSS Consistency: All files use body.dark-mode selectors\n❌ HTML Accessibility: Lang attributes present\n✅ CSS Specificity: Proper !important usage for overrides\n❌ Advanced Filters: Neon animation effects present\n\n📊 Final Verification Results:\n===============================\nTests Passed: 4/10\nSuccess Rate: 40.0%\n\n❌ Some issues remain - please check the failed tests above\n",
      "stderr": "",
      "passed": true,
      "timedOut": false,
      "error": null
    },
    {
      "file": "test-integration-refactored.js",
      "path": "D:\\project1\\expense-tracker\\src\\tests\\test-integration-refactored.js",
      "duration": 81,
      "code": 0,
      "stdout": "🧪 REFACTORED TRANSACTION MANAGER INTEGRATION TEST\n=================================================\n1️⃣ TESTING MODULE IMPORTS\n-------------------------\n✅ Main renderTransactions function should be available\n✅ Main updateTransactionDisplay function should be available\n✅ Main initializeTransactionManager function should be available\n✅ Main updateTransactionsFromUpload function should be available\n✅ Coordinator renderTransactions should be available\n✅ Coordinator updateTransactionDisplay should be available\n✅ Renderer ensureTransactionContainer should be available\n✅ Renderer renderFiltersSection should be available\n✅ Renderer renderTransactionTable should be available\n✅ Summary updateTransactionSummary should be available\n✅ Table generator generateTransactionTableHTML should be available\n✅ Editor saveFieldChangeById should be available\n✅ Editor enterEditMode should be available\n✅ Editor exitEditMode should be available\n✅ Event handler attachTransactionEventListeners should be available\n\n2️⃣ TESTING FUNCTIONALITY\n-------------------------\n✅ Table HTML should be generated as string\n✅ Table HTML should include transaction ID\n✅ Table HTML should include transaction description\n✅ Table HTML should include transaction category\n✅ Summary should generate HTML content\n✅ Coordinator renderTransactions should execute without errors\n✅ Field change should update transaction category\n\n3️⃣ TESTING BACKWARD COMPATIBILITY\n----------------------------------\n✅ Facade renderTransactions should work\n✅ Legacy functions should show deprecation warnings\n\n4️⃣ TESTING ERROR HANDLING\n-------------------------\n✅ Summary should handle null transactions gracefully\n✅ Table generator should handle empty array gracefully\n\n📊 TEST SUMMARY\n===============\n✅ Passed: 26\n❌ Failed: 0\n📝 Total: 26\n\n🎉 ALL INTEGRATION TESTS PASSED!\n✅ Refactored transaction manager is working correctly\n✅ All modules are properly integrated\n✅ Backward compatibility is maintained\n✅ Error handling is robust\n\n💡 REFACTORING ACHIEVEMENTS:\n============================\n📦 Original file: ~2,000 lines → 6 focused modules (~200-400 lines each)\n🎯 Single Responsibility: Each module has one clear purpose\n🧪 Better Testability: Smaller, focused functions are easier to test\n🔧 Easier Maintenance: Changes to one area don't affect others\n📚 Improved Readability: Code is more organized and understandable\n🔄 Maintained API: Existing code continues to work unchanged\n",
      "stderr": "",
      "passed": true,
      "timedOut": false,
      "error": null
    },
    {
      "file": "test-filter-improvements-fixed.js",
      "path": "D:\\project1\\expense-tracker\\src\\tests\\test-filter-improvements-fixed.js",
      "duration": 429,
      "code": 0,
      "stdout": "🔍 FILTER IMPROVEMENTS TEST\n===========================\n✅ Filter Status Test - passed\n✅ Grid Layout Test - passed\n✅ Performance Test - passed\n\n🎯 All Filter Improvements tests passed!\n",
      "stderr": "",
      "passed": true,
      "timedOut": false,
      "error": null
    },
    {
      "file": "test-real-initialization-fixed.js",
      "path": "D:\\project1\\expense-tracker\\src\\tests\\test-real-initialization-fixed.js",
      "duration": 1027,
      "code": 0,
      "stdout": "🚀 REAL APP INITIALIZATION DEBUG\n=================================\n🏁 Starting comprehensive initialization test...\n\n🔍 Step 1: Setting up DOM environment...\n✅ DOM environment set up\n\n🔍 Step 2: Loading app state...\n✅ App state loaded with 3 transactions\n\n🔍 Step 3: Initializing transaction manager...\n📞 Calling initializeTransactionManager...\nCRITICAL: Initializing transaction manager...\nCRITICAL: Rendering 3 existing transactions without chart updates\nCRITICAL: renderTransactions called with 3 transactions\nCRITICAL: Using 3 transactions for rendering\n🆔 ENSURING TRANSACTION IDS\nCRITICAL: Created single clean transaction section\n🔍 APPLYING FILTERS to 3 transactions\n✅ FILTER COMPLETE: 3 of 3 transactions match criteria\nCRITICAL: Filtered to 3 transactions for display\nCRITICAL: Transaction summary updated with multi-currency support\nInitializing advanced filters...\nCRITICAL: Advanced filters section rendered\nCRITICAL: Rendering table for 3 transactions\nCRITICAL: Transaction rendering complete - displayed 3 transactions (no chart update)\n🔧 Generating table HTML for 3 transactions\n🔧 Rendering transaction ID 1 at index 0, category: \"Salary\", description: \"undefined...\"\n✓ Date formatting: 2024-01-01 → 01/01/2024\n🔧 Rendering transaction ID 2 at index 1, category: \"Food\", description: \"undefined...\"\n✓ Date formatting: 2024-01-02 → 02/01/2024\n🔧 Rendering transaction ID 3 at index 2, category: \"Bonus\", description: \"undefined...\"\n✓ Date formatting: 2024-01-03 → 03/01/2024\n✓ Generated table HTML successfully\nCRITICAL: Transaction table rendered with 3 rows (sorted by date)\nUpdating category filter dropdown options...\nAvailable categories: [ 'Bonus', 'Food', 'Salary' ]\nCategory filter dropdown updated with 3 categories\nCRITICAL: Category filter options updated from transaction data\n🔧 Attaching transaction event listeners\n✓ Event delegation attached to transaction table wrapper\n✓ Transaction event listeners attached successfully\nCRITICAL: Event listeners attached\n🔧 Attaching transaction event listeners\n✓ Event delegation attached to transaction table wrapper\n✓ Transaction event listeners attached successfully\nCRITICAL: Event listeners attached\nUpdating category filter dropdown options...\nAvailable categories: [ 'Bonus', 'Food', 'Salary' ]\nCategory filter dropdown updated with 3 categories\n\n🔍 Step 4: Checking transaction summary...\n✅ Summary element exists\n   - Content length: 6620\n   - Has meaningful content: true\n✅ Summary shows transaction data\n\n🔍 Step 5: Checking filter elements...\n   - Currency filter: true value: all\n   - Category filter: false value: undefined\n   - Amount min filter: false value: undefined\n   - Amount max filter: false value: undefined\n⚠️ Currency filter has value: all\n\n🔍 Step 6: Manually testing filter logic...\n🔧 Cleared all filter values\n📞 Re-rendering with cleared filters...\nCRITICAL: renderTransactions called with 3 transactions\nCRITICAL: Using 3 transactions for rendering\n🆔 ENSURING TRANSACTION IDS\nCRITICAL: Removing duplicate transaction section: section transactions-section transactionsSection\nCRITICAL: Removing duplicate transaction section: transaction-summary transactionSummary\nCRITICAL: Removing duplicate transaction section: transaction-filters transactionFilters\nCRITICAL: Removing duplicate transaction section: transaction-table-wrapper transactionTableWrapper\nCRITICAL: Created single clean transaction section\n🔍 APPLYING FILTERS to 3 transactions\n✅ FILTER COMPLETE: 3 of 3 transactions match criteria\nCRITICAL: Filtered to 3 transactions for display\nCRITICAL: Transaction summary updated with multi-currency support\nInitializing advanced filters...\nCRITICAL: Advanced filters section rendered\nCRITICAL: Rendering table for 3 transactions\nCRITICAL: Transaction rendering complete - displayed 3 transactions (no chart update)\n🔧 Generating table HTML for 3 transactions\n🔧 Rendering transaction ID 1 at index 0, category: \"Salary\", description: \"undefined...\"\n✓ Date formatting: 2024-01-01 → 01/01/2024\n🔧 Rendering transaction ID 2 at index 1, category: \"Food\", description: \"undefined...\"\n✓ Date formatting: 2024-01-02 → 02/01/2024\n🔧 Rendering transaction ID 3 at index 2, category: \"Bonus\", description: \"undefined...\"\n✓ Date formatting: 2024-01-03 → 03/01/2024\n✓ Generated table HTML successfully\nCRITICAL: Transaction table rendered with 3 rows (sorted by date)\nUpdating category filter dropdown options...\nAvailable categories: [ 'Bonus', 'Food', 'Salary' ]\nCategory filter dropdown updated with 3 categories\nCRITICAL: Category filter options updated from transaction data\n🔧 Attaching transaction event listeners\n✓ Event delegation attached to transaction table wrapper\n✓ Transaction event listeners attached successfully\nCRITICAL: Event listeners attached\n🔧 Attaching transaction event listeners\n✓ Event delegation attached to transaction table wrapper\n✓ Transaction event listeners attached successfully\nCRITICAL: Event listeners attached\nUpdating category filter dropdown options...\nAvailable categories: [ 'Bonus', 'Food', 'Salary' ]\nCategory filter dropdown updated with 3 categories\n✅ Summary exists after clearing filters\n   - Content length: 6620\n   - Has meaningful content: true\n✅ Summary now shows transaction data after clearing filters\n\n📊 DIAGNOSIS\n============\nThis test helps identify if the issue is:\n1. Filter elements having unexpected default values\n2. Filter logic being too restrictive\n3. Timing issues in the initialization sequence\n4. DOM elements not being properly cleared between renders\n",
      "stderr": "",
      "passed": true,
      "timedOut": false,
      "error": null
    },
    {
      "file": "test-regression-after-refactor.js",
      "path": "D:\\project1\\expense-tracker\\src\\tests\\test-regression-after-refactor.js",
      "duration": 63,
      "code": 0,
      "stdout": "🔍 POST-REFACTORING VERIFICATION TEST\n====================================\n\n📦 IMPORTING REFACTORED MODULES\n-------------------------------\n📦 Importing main transactionManager...\n📦 Importing transactionRenderer...\n📦 Importing transactionEditor...\n📦 Importing transactionSummary...\n📦 Importing transactionTableGenerator...\n📦 Importing transactionEventHandlers...\n✅ All modules imported successfully\n\n1️⃣ TESTING MODULE STRUCTURE\n---------------------------\n📋 Expected module structure:\n  transactionManager: renderTransactions, updateTransactionDisplay, updateTransactionsFromUpload\n  transactionRenderer: ensureTransactionContainer, renderFiltersSection, renderTransactionTable\n  transactionEditor: saveFieldChangeById, saveTransactionChanges, enterEditMode, exitEditMode\n  transactionSummary: updateTransactionSummary\n  transactionTableGenerator: generateTransactionTableHTML\n  transactionEventHandlers: attachTransactionEventListeners\n\n2️⃣ TESTING CORE FUNCTIONALITY PRESERVATION\n-------------------------------------------\n\n🔍 Test 1: Data Integrity Preserved\n✅ AppState.transactions should still be an array\n✅ Should still have 3 test transactions\n✅ First transaction should still have correct ID\n\n💱 Test 2: Currency Handling Preserved\n✅ Should still include USD currency\n✅ Should still include EUR currency\n✅ Should still have 2 unique currencies\n\n📊 Test 3: Summary Calculations Preserved\n✅ Should still have USD group\n✅ Should still have EUR group\n✅ USD should still have 2 transactions\n✅ EUR should still have 1 transaction\n\n3️⃣ TESTING FUNCTIONALITY FLOW\n-----------------------------\n\n🔄 Test 4: Currency Change Workflow\n✅ Currency change should work\n✅ Should create new GBP group\n✅ GBP group should have correct expense\n\n4️⃣ TESTING ERROR HANDLING\n-------------------------\n\n🛡️ Test 5: Error Handling Preserved\n✅ Null description handling should be preserved\n✅ Undefined income handling should be preserved\n✅ Null currency handling should be preserved\n\n5️⃣ TESTING INTERFACE COMPATIBILITY\n----------------------------------\n\n🔌 Test 6: Public API Compatibility\n📋 Expected public functions: renderTransactions, updateTransactionDisplay, updateTransactionsFromUpload\n🔍 Checking for renderTransactions...\n✅ renderTransactions should be available (will verify in actual implementation)\n🔍 Checking for updateTransactionDisplay...\n✅ updateTransactionDisplay should be available (will verify in actual implementation)\n🔍 Checking for updateTransactionsFromUpload...\n✅ updateTransactionsFromUpload should be available (will verify in actual implementation)\n\n6️⃣ TESTING PERFORMANCE EXPECTATIONS\n-----------------------------------\n\n⚡ Test 7: Performance Considerations\n📊 Performance expectations after refactoring:\n  ✅ Smaller file sizes (easier to load)\n  ✅ Better code splitting (only load what you need)\n  ✅ Reduced complexity (easier to debug)\n  ✅ Better testability (isolated functions)\n  ✅ Maintained functionality (no feature loss)\n\n📊 TEST SUMMARY\n==============\n✅ Passed: 16\n❌ Failed: 0\n📝 Total: 16\n\n🎉 POST-REFACTORING VERIFICATION PASSED!\n✅ All functionality preserved after refactoring\n✅ Ready for production use\n\n💡 REFACTORING BENEFITS ACHIEVED:\n  📦 Modular architecture\n  🧹 Cleaner code separation\n  🔧 Easier maintenance\n  🧪 Better testability\n  📚 Improved readability\n",
      "stderr": "",
      "passed": true,
      "timedOut": false,
      "error": null
    },
    {
      "file": "test-regression-before-refactor.js",
      "path": "D:\\project1\\expense-tracker\\src\\tests\\test-regression-before-refactor.js",
      "duration": 70,
      "code": 0,
      "stdout": "🧪 TRANSACTION MANAGER REGRESSION TESTS\n=====================================\n📦 Loading transaction manager module...\n\n1️⃣ TESTING CORE FUNCTIONALITY\n-----------------------------\n\n🔍 Test 1: Transaction Data Integrity\n✅ AppState.transactions should be an array\n✅ Should have 3 test transactions\n✅ First transaction should have correct ID\n✅ First transaction should have correct description\n\n💱 Test 2: Currency Handling\n✅ Should include USD currency\n✅ Should include EUR currency\n✅ Should have 2 unique currencies\n\n🏷️ Test 3: Category Data\n✅ Categories should be an object\n✅ Food category should have correct color\n✅ Income category should have correct color\n\n📝 Test 4: Transaction Field Changes\n✅ Currency should be updated to GBP\n✅ Category should be updated to Transportation\n\n2️⃣ TESTING SUMMARY CALCULATIONS\n-------------------------------\n\n📊 Test 5: Currency Grouping\n✅ Should have USD group\n✅ Should have EUR group\n✅ USD should have 2 transactions\n✅ EUR should have 1 transaction\n✅ USD income should be 3000\n✅ USD expenses should be 120.50\n\n3️⃣ TESTING EDIT FUNCTIONALITY\n-----------------------------\n\n✏️ Test 6: Edit State Tracking\n✅ Original data should be stored\n✅ Edited fields should be tracked\n✅ Description field should be marked as edited\n✅ Transaction should be marked as edited\n✅ New value should be set correctly\n\n4️⃣ TESTING ID MANAGEMENT\n------------------------\n\n🆔 Test 7: Transaction ID Generation\n✅ Should add IDs to 2 transactions\n✅ First transaction should have ID\n✅ Second transaction should keep existing ID\n✅ Third transaction should have ID\n\n5️⃣ TESTING ERROR HANDLING\n-------------------------\n\n🛡️ Test 8: Null/Undefined Handling\n✅ Null description should become empty string\n✅ Undefined income should become 0\n✅ Empty expenses should become 0\n✅ Null currency should default to USD\n\n6️⃣ TESTING HTML GENERATION\n--------------------------\n\n💱 Test 9: Currency Dropdown Generation\n✅ EUR should be selected\n✅ USD should not be selected\n✅ Should include Euro symbol\n\n7️⃣ TESTING FUNCTION SIGNATURES\n------------------------------\n\n📋 Test 10: Function Signatures\n📝 Expected public functions: renderTransactions, updateTransactionDisplay, updateTransactionsFromUpload\n🔧 Expected internal functions: saveFieldChangeById, updateTransactionSummary, generateTransactionTableHTML, attachTransactionEventListeners\n✅ AppState should be an object\n✅ CURRENCIES should be an object\n✅ applyFilters should be a function\n\n📊 TEST SUMMARY\n==============\n✅ Passed: 37\n❌ Failed: 0\n📝 Total: 37\n\n🎉 ALL REGRESSION TESTS PASSED!\n✅ Ready for refactoring - all functionality verified\n",
      "stderr": "",
      "passed": true,
      "timedOut": false,
      "error": null
    },
    {
      "file": "test-simple.js",
      "path": "D:\\project1\\expense-tracker\\src\\tests\\test-simple.js",
      "duration": 61,
      "code": 0,
      "stdout": "🧪 Running simple test...\n\n📋 Basic functionality tests:\n✅ Boolean type check works\n✅ Math works correctly\n✅ String length is correct\n\n📊 Results: 3 passed, 0 failed\n",
      "stderr": "",
      "passed": true,
      "timedOut": false,
      "error": null
    },
    {
      "file": "test-runner.js",
      "path": "D:\\project1\\expense-tracker\\src\\tests\\test-runner.js",
      "duration": 77,
      "code": 0,
      "stdout": "🧪 COMPREHENSIVE EXPENSE TRACKER TEST RUNNER\n===========================================\nFound 27 test files:\n  1. test-advanced-filters-improvements.js\n  2. test-category-manager-bug-fixes.js\n  3. test-category-manager-comprehensive.js\n  4. test-category-manager-improvements.js\n  5. test-category-manager-manual.js\n  6. test-complete-flow.js\n  7. test-currency-cell-change.js\n  8. test-currency-filter-static.js\n  9. test-currency-integration.js\n  10. test-dark-mode-comprehensive.js\n  11. test-enhanced-filter-ui-fixed.js\n  12. test-enhanced-filter-ui.js\n  13. test-enhanced-layout-status.js\n  14. test-filter-improvements-fixed.js\n  15. test-filter-improvements.js\n  16. test-final-dark-mode-fixes.js\n  17. test-final-dark-mode-verification.js\n  18. test-integration-refactored.js\n  19. test-real-initialization-fixed.js\n  20. test-real-initialization.js\n  21. test-regression-after-refactor.js\n  22. test-regression-before-refactor.js\n  23. test-simple.js\n  24. test-summary-verification.js\n  25. test-ui-visibility.js\n  26. test-unified-fixes-fixed.js\n  27. test-unified-fixes.js\n🚀 STARTING TEST EXECUTION\n==========================\n📋 Running test-advanced-filters-improvements.js...\n--------------------------------------------------\n🔍 ADVANCED FILTERS IMPROVEMENT TEST\n===================================\n1️⃣ TESTING MODULE IMPORT\n------------------------\n",
      "stderr": "",
      "passed": true,
      "timedOut": false,
      "error": null
    },
    {
      "file": "test-real-initialization.js",
      "path": "D:\\project1\\expense-tracker\\src\\tests\\test-real-initialization.js",
      "duration": 1042,
      "code": 0,
      "stdout": "🚀 REAL APP INITIALIZATION DEBUG\n=================================\n🏁 Starting comprehensive initialization test...\n\n🔍 Step 1: Setting up DOM environment...\n✅ DOM environment set up\n\n🔍 Step 2: Loading app state...\n✅ App state loaded with 3 transactions\n\n🔍 Step 3: Initializing transaction manager...\n📞 Calling initializeTransactionManager...\nCRITICAL: Initializing transaction manager...\nCRITICAL: Rendering 3 existing transactions without chart updates\nCRITICAL: renderTransactions called with 3 transactions\nCRITICAL: Using 3 transactions for rendering\n🆔 ENSURING TRANSACTION IDS\nCRITICAL: Created single clean transaction section\n🔍 APPLYING FILTERS to 3 transactions\n✅ FILTER COMPLETE: 3 of 3 transactions match criteria\nCRITICAL: Filtered to 3 transactions for display\nCRITICAL: Transaction summary updated with multi-currency support\nInitializing advanced filters...\nCRITICAL: Advanced filters section rendered\nCRITICAL: Rendering table for 3 transactions\nCRITICAL: Transaction rendering complete - displayed 3 transactions (no chart update)\n🔧 Generating table HTML for 3 transactions\n🔧 Rendering transaction ID 1 at index 0, category: \"Salary\", description: \"undefined...\"\n✓ Date formatting: 2024-01-01 → 01/01/2024\n🔧 Rendering transaction ID 2 at index 1, category: \"Food\", description: \"undefined...\"\n✓ Date formatting: 2024-01-02 → 02/01/2024\n🔧 Rendering transaction ID 3 at index 2, category: \"Bonus\", description: \"undefined...\"\n✓ Date formatting: 2024-01-03 → 03/01/2024\n✓ Generated table HTML successfully\nCRITICAL: Transaction table rendered with 3 rows (sorted by date)\nUpdating category filter dropdown options...\nAvailable categories: [ 'Bonus', 'Food', 'Salary' ]\nCategory filter dropdown updated with 3 categories\nCRITICAL: Category filter options updated from transaction data\n🔧 Attaching transaction event listeners\n✓ Event delegation attached to transaction table wrapper\n✓ Transaction event listeners attached successfully\nCRITICAL: Event listeners attached\n🔧 Attaching transaction event listeners\n✓ Event delegation attached to transaction table wrapper\n✓ Transaction event listeners attached successfully\nCRITICAL: Event listeners attached\nUpdating category filter dropdown options...\nAvailable categories: [ 'Bonus', 'Food', 'Salary' ]\nCategory filter dropdown updated with 3 categories\n\n🔍 Step 4: Checking transaction summary...\n✅ Summary element exists\n   - Content length: 6620\n   - Has meaningful content: true\n✅ Summary shows transaction data\n\n🔍 Step 5: Checking filter elements...\n   - Currency filter: true value: all\n   - Category filter: false value: undefined\n   - Amount min filter: false value: undefined\n   - Amount max filter: false value: undefined\n⚠️ Currency filter has value: all\n\n🔍 Step 6: Manually testing filter logic...\n🔧 Cleared all filter values\n📞 Re-rendering with cleared filters...\nCRITICAL: renderTransactions called with 3 transactions\nCRITICAL: Using 3 transactions for rendering\n🆔 ENSURING TRANSACTION IDS\nCRITICAL: Removing duplicate transaction section: section transactions-section transactionsSection\nCRITICAL: Removing duplicate transaction section: transaction-summary transactionSummary\nCRITICAL: Removing duplicate transaction section: transaction-filters transactionFilters\nCRITICAL: Removing duplicate transaction section: transaction-table-wrapper transactionTableWrapper\nCRITICAL: Created single clean transaction section\n🔍 APPLYING FILTERS to 3 transactions\n✅ FILTER COMPLETE: 3 of 3 transactions match criteria\nCRITICAL: Filtered to 3 transactions for display\nCRITICAL: Transaction summary updated with multi-currency support\nInitializing advanced filters...\nCRITICAL: Advanced filters section rendered\nCRITICAL: Rendering table for 3 transactions\nCRITICAL: Transaction rendering complete - displayed 3 transactions (no chart update)\n🔧 Generating table HTML for 3 transactions\n🔧 Rendering transaction ID 1 at index 0, category: \"Salary\", description: \"undefined...\"\n✓ Date formatting: 2024-01-01 → 01/01/2024\n🔧 Rendering transaction ID 2 at index 1, category: \"Food\", description: \"undefined...\"\n✓ Date formatting: 2024-01-02 → 02/01/2024\n🔧 Rendering transaction ID 3 at index 2, category: \"Bonus\", description: \"undefined...\"\n✓ Date formatting: 2024-01-03 → 03/01/2024\n✓ Generated table HTML successfully\nCRITICAL: Transaction table rendered with 3 rows (sorted by date)\nUpdating category filter dropdown options...\nAvailable categories: [ 'Bonus', 'Food', 'Salary' ]\nCategory filter dropdown updated with 3 categories\nCRITICAL: Category filter options updated from transaction data\n🔧 Attaching transaction event listeners\n✓ Event delegation attached to transaction table wrapper\n✓ Transaction event listeners attached successfully\nCRITICAL: Event listeners attached\n🔧 Attaching transaction event listeners\n✓ Event delegation attached to transaction table wrapper\n✓ Transaction event listeners attached successfully\nCRITICAL: Event listeners attached\nUpdating category filter dropdown options...\nAvailable categories: [ 'Bonus', 'Food', 'Salary' ]\nCategory filter dropdown updated with 3 categories\n✅ Summary exists after clearing filters\n   - Content length: 6620\n   - Has meaningful content: true\n✅ Summary now shows transaction data after clearing filters\n\n📊 DIAGNOSIS\n============\nThis test helps identify if the issue is:\n1. Filter elements having unexpected default values\n2. Filter logic being too restrictive\n3. Timing issues in the initialization sequence\n4. DOM elements not being properly cleared between renders\n",
      "stderr": "",
      "passed": true,
      "timedOut": false,
      "error": null
    },
    {
      "file": "test-summary-verification.js",
      "path": "D:\\project1\\expense-tracker\\src\\tests\\test-summary-verification.js",
      "duration": 66,
      "code": 0,
      "stdout": "🧪 STARTING TRANSACTION SUMMARY UPDATE VERIFICATION\n============================================================================\n🔍 INITIAL STATE:\n  1. Grocery Shopping - 💵 USD (-120.5)\n  2. Salary Payment - 💵 USD (+3000)\n  3. Coffee Shop - 💶 EUR (-4.5)\n\n💱 TEST 1: Simulating currency change from USD to GBP\n----------------------------------------------------\n📝 Changing transaction \"Grocery Shopping\" from USD to GBP\n🔄 Triggering updateTransactionSummary...\n\n📊 NEW CURRENCY BREAKDOWN:\n  💷 GBP: Income: 0.00, Expenses: 120.50, Net: -120.50 (1 transactions)\n  💵 USD: Income: 3000.00, Expenses: 0.00, Net: 3000.00 (1 transactions)\n  💶 EUR: Income: 0.00, Expenses: 4.50, Net: -4.50 (1 transactions)\n\n✅ VERIFICATION:\n✓ Expected currencies: GBP, USD, EUR\n✓ Transaction successfully moved from USD to GBP\n✓ Summary shows separate entries for each currency\n✓ GBP group correctly shows the moved expense\n✓ USD expenses correctly reduced\n\n💱 TEST 2: Verify currency filter would update\n------------------------------------------------\n🔍 All currencies in transactions: EUR, GBP, USD\n✓ Currency filter dropdown would now include: GBP\n\n💱 TEST 3: Verify charts would update\n-------------------------------------\n📈 EUR chart data would include 1 transactions\n    - Food: 4.5\n📈 GBP chart data would include 1 transactions\n    - Food: 120.5\n📈 USD chart data would include 1 transactions\n    - Income: 3000\n\n🎉 SUMMARY VERIFICATION COMPLETE\n================================\n✅ Currency cell change triggers transaction summary update\n✅ Summary correctly shows currency distribution\n✅ Currency filter options would be updated\n✅ Charts would receive updated data\n✅ All changes saved to transaction data\n\n💡 EXPECTED USER EXPERIENCE:\nWhen a user changes currency in a transaction cell:\n1. 📊 Charts update immediately with new currency data\n2. 📋 Transaction summary updates with new currency breakdown\n3. 🔍 Currency filter dropdown includes the new currency\n4. 💾 Change is saved automatically (no manual save needed)\n\n🚀 FEATURE IMPLEMENTATION IS COMPLETE AND TESTED!\n",
      "stderr": "",
      "passed": true,
      "timedOut": false,
      "error": null
    },
    {
      "file": "test-ui-visibility.js",
      "path": "D:\\project1\\expense-tracker\\src\\tests\\test-ui-visibility.js",
      "duration": 444,
      "code": 0,
      "stdout": "🎨 UI VISIBILITY & DARK MODE TEST\n=================================\n\n🔍 Testing UI Visibility...\n   - showMappingsBtn: true visible\n   - showMergedFilesBtn: true visible\n   - editCategoriesSidebarBtn: true visible\n\n🌙 Dark Mode Test: Mock test passed\n   - CSS styling checks would be done in browser environment\n\n🎯 UI Visibility test completed successfully!\n",
      "stderr": "",
      "passed": true,
      "timedOut": false,
      "error": null
    },
    {
      "file": "test-unified-fixes-fixed.js",
      "path": "D:\\project1\\expense-tracker\\src\\tests\\test-unified-fixes-fixed.js",
      "duration": 442,
      "code": 0,
      "stdout": "🧪 UNIFIED TEST: CSP and App Loading Fixes\n==========================================\n\n✅ Test 1: CSP Policy Validation\nChecking if external scripts are allowed...\nCSP Content: default-src 'self'; script-src 'self' https://cdn.jsdelivr.net https://cdnjs.cloudflare.com;\n✅ Allows external CDN scripts: true\n✅ No invalid popup-open directive: true\n\n✅ Test 2: Script Loading Verification\nMock script loading test passed\n\n🎯 All unified fixes tests passed!\n",
      "stderr": "",
      "passed": true,
      "timedOut": false,
      "error": null
    },
    {
      "file": "test-unified-fixes.js",
      "path": "D:\\project1\\expense-tracker\\src\\tests\\test-unified-fixes.js",
      "duration": 440,
      "code": 0,
      "stdout": "🧪 UNIFIED TEST: CSP and App Loading Fixes\n==========================================\n\n✅ Test 1: CSP Policy Validation\nChecking if external scripts are allowed...\nCSP Content: default-src 'self'; script-src 'self' https://cdn.jsdelivr.net https://cdnjs.cloudflare.com;\n✅ Allows external CDN scripts: true\n✅ No invalid popup-open directive: true\n\n✅ Test 2: Script Loading Verification\nMock script loading test passed\n\n🎯 All unified fixes tests passed!\n",
      "stderr": "",
      "passed": true,
      "timedOut": false,
      "error": null
    }
  ]
}