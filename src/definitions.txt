# Expense Tracker - Project Definitions

## Purpose
The Expense Tracker application helps users manage their expenses by uploading transaction files, categorizing transactions, and visualizing expenses. It provides intelligent features to simplify the process of managing and analyzing financial data.

## Core Functionality
1. **File Upload and Parsing**:
   - Users can upload `.xls`, `.xlsx`, or `.xml` files containing transaction data.
   - The application parses the files and extracts headers and data rows.
   - Each uploaded file is assigned a unique identifier (e.g., SHA-256 hash) to prevent duplicate uploads.

2. **Header Mapping**:
   - Users can map file headers to predefined fields (`Date`, `Income`, `Expenses`, `Description`, etc.).
   - If a file with the same header structure is uploaded again, it is automatically recognized, and the user does not need to define the headers again.

3. **File Merging**:
   - Users can merge multiple files into a unified dataset.
   - Merged files are stored in `localStorage` and can be managed (e.g., added, removed).
   - If a file is removed from the merged list, its associated transaction data is also removed.

4. **Category Management**:
   - Users can define and manage categories for transactions (e.g., `Food`, `Transport`, `Utilities`).
   - Categories are used for filtering and grouping transactions.
   - Rows with descriptions that match previously categorized rows are automatically assigned the same category.

5. **Transaction Management**:
   - Transactions are displayed in a table or list format.
   - Users can filter transactions by category or view uncategorized rows.
   - Users can assign categories to rows, and the assignments are saved persistently in `localStorage`.

6. **Visualization**:
   - A pie chart shows income vs. expenses for selected time periods (e.g., month, quarter, half-year, year).
   - A pie chart shows expenses by category for the same time periods.
   - A timeline chart shows income vs. expenses over time (e.g., by year or half-year).

7. **Smart Features**:
   - **Smart Header Mapping**:
     - The application uses AI to suggest header mappings based on the content of the file.
     - For example, columns with dates are automatically recognized as `Date`, and numeric columns are suggested as `Income` or `Expenses`.
   - **Smart Category Guessing**:
     - The application learns from user input to suggest categories for new rows based on their descriptions.

8. **Dark Mode**:
   - Users can toggle between light and dark themes.

## Future Enhancements (Version 2.0)
1. **Advanced AI Auto-Categorization**:
   - Use machine learning to predict categories for rows based on historical data and user behavior.
2. **Validation**:
   - Validate uploaded files to ensure they meet the required format and structure.
3. **User Accounts**:
   - Add user authentication to allow multiple users to manage their expenses.
4. **Export Functionality**:
   - Allow users to export merged files or transaction data in `.xls` or `.csv` formats.
5. **Mobile Responsiveness**:
   - Optimize the UI for mobile devices.

## Notes
- All major functionality must align with the definitions outlined here.
- Any new major functionality must be added to this file to ensure consistency and clarity.

# AI-Friendly Definitions for Expense Tracker

### ✅ Transaction
An object representing a row in a merged financial dataset.
```json
{
  "date": "2024-01-01",
  "description": "Grocery Store",
  "amount": "-35.99",
  "category": "Food",
  "fileName": "expenses.xlsx"
}
```

### ✅ Category
A label (with a hex color) for grouping transactions.
Stored in `AppState.categories` and localStorage.
```json
{
  "Food": "#FF6384",
  "Transport": "#36A2EB"
}
```

### ✅ Merged File
A single uploaded file, parsed and mapped to transaction fields.
```json
{
  "fileName": "report.csv",
  "headerMapping": ["Date", "Description", "Expenses"],
  "data": [...],
  "headerRow": 1,
  "dataRow": 2,
  "signature": "[\"Date\",\"Amount\"]"
}
```

### ✅ Header Mapping
Maps spreadsheet columns to: `Date`, `Income`, `Expenses`, or `Description`.
Used to normalize different spreadsheet formats.

### ✅ Signature
A stringified version of the header row that uniquely identifies a file format.
```js
const signature = JSON.stringify(headerRow);
```

### ✅ AppState (Shared Global State)
Centralized object to store all session-related data:
```js
AppState = {
  categories: { ... },
  mergedFiles: [ ... ],
  transactions: [ ... ],
  currentCategoryFilters: [ ... ],
  currentFileData: [...],
  currentFileName: "...",
  currentFileSignature: "...",
  savePromptShown: false
};
```

### ✅ Local Storage Keys
- `expenseCategories`
- `mergedFiles`
- `fileFormatMappings`
- `userDefinedHeaders`

### ✅ Component Responsibilities
- `fileHandler.js`: file parsing & merging
- `categoryManager.js`: category CRUD & rendering
- `transactionManager.js`: process, render, assign
- `chartManager.js`: pie and timeline chart rendering
- `mappingsManager.js`: header format management
- `uiManager.js`: UI utilities and merged file list
- `main.js`: initialization, event bindings, glue

### ✅ Toast
Temporary floating UI element for alerts/notifications.
```js
showToast("Upload complete")
```

---
Use these conventions when modifying or extending the app.
All modules should work independently and use `AppState` where needed.

### File Signature
- A JSON-stringified version of the first header row.
- Used to detect file format identity and deduplicate uploads.

### suggestMapping(data)
- Guesses a column's role based on sample data and header name.
- Supports: "Date", "Income", "Expenses", "Description"

### renderHeaderPreview()
- Renders a table with:
  1. First row as headers
  2. Second row as dropdowns for mapping
  3. Third row as sample data

### onSaveHeaders()
- Saves header mapping to localStorage
- Merges file if not already added
- Re-renders transactions

### File Deduplication
- On upload, if a file has the same header signature, it will be:
  - Auto-merged without asking the user again
  - Skipped if already in merged list

### Categories Section
- Add Category button (`➕`)
- Future: Edit modal with rename, color, delete

### New Functions
- `openEditTransactionsModal`: Opens a modal for editing transactions.
- `renderCategoryList`: Renders the categories in the "Categories" section.
- `toggleCategoryFilter`: Toggles the visibility of transactions by category.
- `renderTransactions`: Centralized function for rendering transactions.
- `deleteTransaction`: Deletes a transaction from the list.

## File Handling

### Format Recognition
- The application identifies file formats based on:
  1. File extension (XML, XLS, XLSX)
  2. Number of columns
  3. Header names (normalized)
- Files with identical structures generate the same signature
- When a file with a known signature is uploaded, its format mapping is applied automatically

### XML Files
- XML files are parsed using multiple strategies to extract data
- The parser attempts to find structured rows in various XML formats
- Date recognition is improved for multiple date formats and languages

### Excel Files
- Excel files may contain empty rows which are filtered out
- Excel dates (numeric values 40000-50000) are automatically converted to YYYY-MM-DD format
- Header detection looks for the first non-empty row

## Transaction Management

### Data Normalization
- Fields are normalized before validation:
  - "expenses" field is mapped to "amount"
  - "income" field is also mapped to "amount"
- Negative values are properly handled for expenses

### Transaction Validation
- Each transaction requires a date, description, and valid amount
- Invalid transactions are filtered out with warnings
- All displayed transactions are validated

## User Interface

### File Mapping
- Users can map columns from imported files to standard fields
- Default mappings are suggested based on column content
- Mappings are saved for future use with similar files

### Format Management
- Users can delete saved formats
- When deleting a format, associated files are also removed after confirmation

### Export
- Transactions can be exported to CSV format
- Export includes Date, Description, Category, and Amount fields
- All transaction data is normalized before export

## Changes & Improvements

### Fixed Issues
- XML parsing now supports multiple file structures
- Excel date values are properly converted to human-readable dates
- File signatures are more reliable for format detection
- Field normalization prevents "Invalid amount" warnings
- Export includes all transactions with proper headers

### Removed Features
- Keyboard shortcuts removed due to conflicts with Chrome browser defaults
